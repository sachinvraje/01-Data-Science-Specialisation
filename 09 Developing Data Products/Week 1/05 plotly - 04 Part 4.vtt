WEBVTT

1
00:00:00.760 --> 00:00:05.381
Okay, so let's talk about a different kind
of graph that we can create, a line graph.

2
00:00:05.381 --> 00:00:08.450
Okay, so
let's look at this data("airmiles"),

3
00:00:08.450 --> 00:00:11.393
and then let's just briefly
talk about it quickly.

4
00:00:11.393 --> 00:00:14.386
If I type in airmiles after
I've done data("airmiles"),

5
00:00:14.386 --> 00:00:16.450
you see that it's a time series.

6
00:00:16.450 --> 00:00:20.035
There's a collection of values,
and if I do time(airmiles),

7
00:00:20.035 --> 00:00:22.654
it'll actually give me
the associated times.

8
00:00:22.654 --> 00:00:26.024
In this case the time is years, okay?

9
00:00:26.024 --> 00:00:28.760
Each data point corresponds to a year.

10
00:00:28.760 --> 00:00:33.540
So now if I do plot_ly,
plot_ly's main plotting command,

11
00:00:33.540 --> 00:00:38.300
x is the time variable, y is airmiles.

12
00:00:38.300 --> 00:00:42.830
So we haven't given it a data frame,
we've just named two arguments x and y.

13
00:00:42.830 --> 00:00:48.760
And the variables are in our environment,
so r knows where to find them.

14
00:00:48.760 --> 00:00:51.537
Okay, then we do that plot,
we get this time series plot.

15
00:00:51.537 --> 00:00:55.450
And then notice,
wherever my mouse is on the plot,

16
00:00:55.450 --> 00:00:58.480
it's giving me the corresponding x and
y value.

17
00:00:58.480 --> 00:01:01.290
And you've probably seen a plot
like this if you ever looked at

18
00:01:01.290 --> 00:01:05.809
a market index like in the S&P 500 or
something like that.

19
00:01:07.300 --> 00:01:12.844
They'll often have a plot like this where
they'll have the index value over time.

20
00:01:12.844 --> 00:01:17.777
So why don't we actually
create a multi-line graph just

21
00:01:17.777 --> 00:01:21.280
like that using some stock market data?

22
00:01:21.280 --> 00:01:23.730
Okay, so
we already have plot_ly loaded up.

23
00:01:23.730 --> 00:01:28.590
So we also, just for some data
manipulation, need tidyr and dplyr, and

24
00:01:28.590 --> 00:01:30.591
I'll go through the commands
that we're using from them.

25
00:01:30.591 --> 00:01:33.727
Okay, so there's the data EuStockMarkets.

26
00:01:33.727 --> 00:01:39.249
So if I do Eu,
let me do head(EuStockMarkets).

27
00:01:39.249 --> 00:01:43.383
Okay, so there's the German, Swiss,

28
00:01:43.383 --> 00:01:48.134
French, and British market indices, okay?

29
00:01:48.134 --> 00:01:52.322
So this is actually a time
series-type data set, so

30
00:01:52.322 --> 00:01:55.278
we need to convert it to a data frame.

31
00:01:55.278 --> 00:02:02.371
Okay, so this first command stocks
assignment as.data.frame(EuStockMarkets),

32
00:02:02.371 --> 00:02:07.800
that's just going to convert our
data as it is now into a data frame.

33
00:02:07.800 --> 00:02:13.542
Okay, then we're going to pass that into
this gather command, gather(index, price).

34
00:02:13.542 --> 00:02:17.931
Let me just first show you what
this first command does, which,

35
00:02:17.931 --> 00:02:19.810
this one doesn't do much.

36
00:02:19.810 --> 00:02:24.290
So stocks, now if I do head(stocks),
where all I've done is converted it to

37
00:02:24.290 --> 00:02:27.940
a data frame, now it's just
printing out as a data frame, okay?

38
00:02:28.982 --> 00:02:32.920
Notice that if I did is.data.frame,
our original data,

39
00:02:32.920 --> 00:02:37.628
even though it maybe looked a little
bit like a data frame, EuStockMarkets,

40
00:02:37.628 --> 00:02:40.950
notice FALSE, it is not a data frame.

41
00:02:40.950 --> 00:02:45.210
Okay, now when I go
through the two commands,

42
00:02:45.210 --> 00:02:50.120
where I turn it into a data frame and
then I do the gather command,

43
00:02:50.120 --> 00:02:54.920
let me show now what I've done,
that second manipulation has done.

44
00:02:54.920 --> 00:02:59.430
Notice what it's done is,
it's taken it from

45
00:02:59.430 --> 00:03:05.272
a short format and
converted it into a long format.

46
00:03:05.272 --> 00:03:09.790
So there's a variable index, okay, and

47
00:03:09.790 --> 00:03:16.100
that index was the column name of
the data points from before, okay?

48
00:03:16.100 --> 00:03:21.290
So this is maybe a little bit less
convenient for display purposes way to

49
00:03:21.290 --> 00:03:27.440
have the data, but it's how plot_ly wants
it in order to display multiple lines.

50
00:03:27.440 --> 00:03:32.820
It wants it as one giant,
single data frame with the line,

51
00:03:32.820 --> 00:03:37.920
the things that demarc the different
lines as a single factor variable, okay?

52
00:03:39.090 --> 00:03:44.121
And then this final command is just
going to create our time variable,

53
00:03:44.121 --> 00:03:47.250
okay, it's going to
create our time variable.

54
00:03:47.250 --> 00:03:52.620
So if I do head(stocks) now,
there you go, you see time,

55
00:03:52.620 --> 00:03:58.330
you see the time variable
having been recreated, okay?

56
00:03:58.330 --> 00:04:03.667
So now when we do plot_ly,
we can do plot_ly of the stocks,

57
00:04:03.667 --> 00:04:09.020
x is time, y is price, and
color is which index it is, okay?

58
00:04:09.020 --> 00:04:16.240
Then we do it, we see that it's plotted
the four different index types here.

59
00:04:16.240 --> 00:04:19.910
It's given you a little
key to each of the colors.

60
00:04:19.910 --> 00:04:23.680
And it also does the interactivity where,

61
00:04:23.680 --> 00:04:27.580
as your mouse hovers over a particular
point, it gives you the specific stock

62
00:04:27.580 --> 00:04:33.250
market value, the index value at
that particular point in time.

63
00:04:33.250 --> 00:04:38.230
Okay, so this is pretty similar
I would say to the stock market

64
00:04:38.230 --> 00:04:43.570
graphs you just see a few Google for
any of these indices, for example,

65
00:04:43.570 --> 00:04:49.540
just Google on the DAX and
you'll see exactly these kinds of plots.

66
00:04:49.540 --> 00:04:52.930
So it's really a handy plot, and
as you can see it's quite useful.

67
00:04:52.930 --> 00:04:57.350
And I can't also stress enough
the importance of using tidyr and

68
00:04:57.350 --> 00:05:00.090
dplyr for
doing some of these manipulations.

69
00:05:00.090 --> 00:05:04.810
Switching from short to long format
is a very common manipulation for

70
00:05:04.810 --> 00:05:07.280
data, and tidyr makes that super easy.

71
00:05:07.280 --> 00:05:11.970
And dplyr for working with
data frames is just essential.

72
00:05:11.970 --> 00:05:14.015
Okay, so give it a try.

73
00:05:14.015 --> 00:05:17.120
Maybe either use this data or try and

74
00:05:17.120 --> 00:05:21.908
find some other stock market data to
create a multi-line stock market graph,

75
00:05:21.908 --> 00:05:25.865
and try and put it out on a webpage.