WEBVTT

1
00:00:00.990 --> 00:00:05.180
Hi, my name is Brian Caffo, and
this is the second lecture on Shiny.

2
00:00:05.180 --> 00:00:08.350
In this lecture, we're going to talk a
little bit about reactive expressions, and

3
00:00:08.350 --> 00:00:13.960
you're going to code a Shiny app that
actually uses reactive expression.

4
00:00:13.960 --> 00:00:18.050
Up to this point, we've done a little bit
by creating an interactive graphic, but

5
00:00:18.050 --> 00:00:22.750
we need to go a little bit further so
that our server calculations are more

6
00:00:22.750 --> 00:00:28.080
complicated, and can do more meaningful
calculations from our input, spit out more

7
00:00:28.080 --> 00:00:31.320
meaningful results, do more interesting
graphs, and that sort of thing.

8
00:00:31.320 --> 00:00:34.910
And that leads us to
the topic of reactivity.

9
00:00:34.910 --> 00:00:39.415
So a reactive expression is basically,
like Sean put it here,

10
00:00:39.415 --> 00:00:45.196
it's like a recipe that manipulates inputs
from Shiny and then returns a value.

11
00:00:45.196 --> 00:00:50.018
And it introduces some
slightly unorthodox R coding.

12
00:00:50.018 --> 00:00:55.088
Of course, it's all proper R code,
but nonetheless it introduces some

13
00:00:55.088 --> 00:01:01.950
slightly unorthodox R coding because of
the specific intricacies of Shiny, itself.

14
00:01:01.950 --> 00:01:06.555
So if you want isolated
expressions that respond to

15
00:01:06.555 --> 00:01:11.053
input from your ui.r,
your Shiny.i function,

16
00:01:11.053 --> 00:01:16.422
then they need to be wrapped
as a reactive function, here.

17
00:01:16.422 --> 00:01:19.041
And let me just go
through an example here.

18
00:01:19.041 --> 00:01:23.646
If I have two input boxes,
one labelled box one and

19
00:01:23.646 --> 00:01:29.019
one labeled box two,
in my shiny server function, okay,

20
00:01:29.019 --> 00:01:33.735
suppose I just want to add
the results from box one and

21
00:01:33.735 --> 00:01:38.139
box two, and
I want to assign that to a variable.

22
00:01:40.100 --> 00:01:45.220
But I want that to be redone every
time the input values change.

23
00:01:45.220 --> 00:01:47.660
Then this needs to be in
a reactive statement.

24
00:01:47.660 --> 00:01:53.060
So here I have my output of
the calculation, calc_sum.

25
00:01:53.060 --> 00:01:55.310
It's assigned, reactive.

26
00:01:55.310 --> 00:01:59.580
And notice there's these
slightly unique notation here,

27
00:02:00.660 --> 00:02:05.920
again, where we have both
the functional parentheses there,

28
00:02:05.920 --> 00:02:11.630
but then also this curly braces that
has to contain the reactive statements.

29
00:02:11.630 --> 00:02:16.344
So remember to do that and then remember,
of course, to close everything, okay.

30
00:02:16.344 --> 00:02:23.368
And then that,
we put in input$box1 + input$box2.

31
00:02:23.368 --> 00:02:28.301
Now this calc sum, that variable,
well, it's not a variable,

32
00:02:28.301 --> 00:02:30.454
it's actually a function,

33
00:02:30.454 --> 00:02:35.660
will actually adapt as we input
the new values into box1 and box2.

34
00:02:35.660 --> 00:02:38.430
We'll go through a coding
example in a little bit.

35
00:02:38.430 --> 00:02:42.280
Here, you can see that to reference
calc_sum() later on you're going to

36
00:02:42.280 --> 00:02:44.170
reference it as a function.

37
00:02:44.170 --> 00:02:48.866
And we'll just go through
now a little bit an example,

38
00:02:48.866 --> 00:02:55.514
a relatively simple example, of creating
a reactive environment in Shiny.

39
00:02:55.514 --> 00:02:58.112
And at this point,
once you go through this example,

40
00:02:58.112 --> 00:03:01.577
I think you'll have almost a full tool
set to start making your own Shiny

41
00:03:01.577 --> 00:03:05.350
applications that'll handle just about
anything that you would need to do.

42
00:03:05.350 --> 00:03:08.320
So, for example, if you created
a machine learning algorithm,

43
00:03:08.320 --> 00:03:12.420
you want a user to put in a set of inputs,
and it'll spit out your prediction and

44
00:03:12.420 --> 00:03:15.280
maybe, hopefully,
a prediction error along with it.

45
00:03:15.280 --> 00:03:16.570
Now you'll be able to do that.

46
00:03:16.570 --> 00:03:19.808
It'll be able to do those
calculations on the fly.

47
00:03:19.808 --> 00:03:24.000
And then, toward the end of the lecture,
we'll show how to make it reactive in such

48
00:03:24.000 --> 00:03:26.460
a way that the user actually
has to press a button.

49
00:03:26.460 --> 00:03:27.910
So conditionally reactive, so

50
00:03:27.910 --> 00:03:32.420
the user has to press the button in order
for it to actually execute the command.

51
00:03:32.420 --> 00:03:33.809
So this is helpful if you have

52
00:03:35.940 --> 00:03:39.100
some algorithms in your server
that really take a lot of time.

53
00:03:40.315 --> 00:03:42.840
Okay, now we'll go through the code

54
00:03:42.840 --> 00:03:45.940
demonstration where we're going to
use a lot of reactive expressions.