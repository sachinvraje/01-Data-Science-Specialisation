WEBVTT

1
00:00:01.040 --> 00:00:05.740
Okay, so let's cover some options for
scatter plotting in plot_ly.

2
00:00:05.740 --> 00:00:09.360
And it will do this just because scatter
plots are such an obviously common thing

3
00:00:09.360 --> 00:00:10.520
you might want to do.

4
00:00:10.520 --> 00:00:13.214
So here is one thing you can change,
the color of the points.

5
00:00:13.214 --> 00:00:16.070
Color is as.factor(cyl).

6
00:00:16.070 --> 00:00:17.834
So on the mtcars dataset.

7
00:00:17.834 --> 00:00:24.060
So we come down here head(mtcars) and
show you.

8
00:00:24.060 --> 00:00:26.360
So cylinder is, where is it?

9
00:00:26.360 --> 00:00:29.359
Cylinder is right there,

10
00:00:29.359 --> 00:00:34.139
it's I think > table(mtcars$cyl).

11
00:00:34.139 --> 00:00:36.059
Let's see yeah, so 4 6 and

12
00:00:36.059 --> 00:00:39.739
8 so is displaying the number
of cylinders of the car,

13
00:00:39.739 --> 00:00:45.190
obviously it should have an impact on
miles per gallon, which is our y variable.

14
00:00:45.190 --> 00:00:48.550
So we might want to display
that as another dimension

15
00:00:48.550 --> 00:00:51.460
because it's effectively categorical,
right?

16
00:00:51.460 --> 00:00:52.710
It's just the three values.

17
00:00:52.710 --> 00:00:55.330
We could do it as color, okay?

18
00:00:55.330 --> 00:00:59.570
Now it's not by default,
a factor variable, it's numeric.

19
00:00:59.570 --> 00:01:04.740
So we are going to convert it to a factor
variable by as.factor cylinder, and

20
00:01:04.740 --> 00:01:09.982
now let's run it, and then you can just
see now the colors represent cylinder and

21
00:01:09.982 --> 00:01:14.450
up here is legend,
by default it says 8, 6, and 4.

22
00:01:14.450 --> 00:01:15.490
OK.

23
00:01:15.490 --> 00:01:19.560
Now let's try something that's
continuous to display the color.

24
00:01:19.560 --> 00:01:25.290
So in this case if you get displacement,
so heading back down here.

25
00:01:25.290 --> 00:01:29.250
If you look at the mtcars
dataset the displacement

26
00:01:29.250 --> 00:01:33.320
is kind of a continuous variable, right?

27
00:01:33.320 --> 00:01:38.290
So if we run that,
plot_ly is smart enough to know

28
00:01:38.290 --> 00:01:43.220
that the color is a continuous variable so
it treats it as another dimension,

29
00:01:43.220 --> 00:01:46.190
continuous dimension using
a continuous color gradient.

30
00:01:46.190 --> 00:01:47.410
And then it displays,

31
00:01:47.410 --> 00:01:52.890
very nicely displays the key to
the gradient here on the side, okay?

32
00:01:52.890 --> 00:01:54.730
So that's another way you can use color.

33
00:01:59.760 --> 00:02:01.640
Let's change the size of the points.

34
00:02:01.640 --> 00:02:06.090
I think when we look at this plot,
the points to me are very small.

35
00:02:06.090 --> 00:02:10.920
And then as you saw maybe from the last
lecture when I outputted it to an HTML

36
00:02:10.920 --> 00:02:14.300
file, the points were almost invisible.

37
00:02:14.300 --> 00:02:17.430
So let's change the size.

38
00:02:17.430 --> 00:02:23.350
Now, in this case the size we're
going to do is horsepower.

39
00:02:23.350 --> 00:02:26.320
Okay?
So, horsepower is a continuous variable so

40
00:02:26.320 --> 00:02:30.840
the size will be every point is just
going to have a different horsepower.

41
00:02:30.840 --> 00:02:34.120
Okay, I'm sorry, every point is
going to have a different size.

42
00:02:34.120 --> 00:02:34.870
Okay?

43
00:02:34.870 --> 00:02:38.480
So, here the cylinder is the color, right?

44
00:02:38.480 --> 00:02:41.300
And horsepower is the size.

45
00:02:42.690 --> 00:02:45.670
So another interesting way.

46
00:02:45.670 --> 00:02:49.620
You run out of dimensions of
course in a 2D scatter plot so

47
00:02:49.620 --> 00:02:54.580
the only real dimensions
you have are the two

48
00:02:54.580 --> 00:02:59.980
displayed dimensions color, size of the
points and then the plotting point it self

49
00:02:59.980 --> 00:03:02.030
are the different kinds of
dimensions you can display.

50
00:03:02.030 --> 00:03:05.720
So here itâ€™s nice that we're showing
four dimensions miles per gallon,

51
00:03:05.720 --> 00:03:10.630
weight, cylinders and
horsepower all in the same plot.

52
00:03:12.890 --> 00:03:14.627
Okay, now.

53
00:03:20.130 --> 00:03:26.280
Now, next I would like to just
briefly show a 3D scatterplot.

54
00:03:26.280 --> 00:03:32.725
Now, I'm going to run the code here and

55
00:03:32.725 --> 00:03:36.080
show you the plot and
then we'll describe what it's doing okay.

56
00:03:37.130 --> 00:03:41.470
Of course this is another way you can
add a dimension to a scatter plot.

57
00:03:41.470 --> 00:03:46.250
So what it's doing here is
it's using web GL which is

58
00:03:49.130 --> 00:03:53.500
a web based translation of
the open GL graphics library.

59
00:03:53.500 --> 00:03:55.350
Okay.
And it's a way that

60
00:03:55.350 --> 00:03:59.780
you can have interactive 3D
graphics embedded in webpages.

61
00:03:59.780 --> 00:04:02.840
So again this'll all just display and

62
00:04:02.840 --> 00:04:06.160
be interactive like this when you
output it as a webpage as well.

63
00:04:07.470 --> 00:04:12.280
So here we have three variables,

64
00:04:12.280 --> 00:04:17.560
temperature, pressure and dtime, and

65
00:04:19.720 --> 00:04:24.970
in this case we create
a very fictitious data set.

66
00:04:24.970 --> 00:04:28.158
So temperature was just
100 random normals,

67
00:04:28.158 --> 00:04:34.000
pressure was just 100 random normals and
dtime was just the numbers from 1 to 100.

68
00:04:34.000 --> 00:04:40.140
So, there's a hundred data points,
they have three different values, okay and

69
00:04:40.140 --> 00:04:45.350
this just shows you plot_ly,
same command, okay.

70
00:04:45.350 --> 00:04:50.384
Now we just specify three variables,
x, y, and z, so super easy.

71
00:04:50.384 --> 00:04:53.522
type = "scatter3d" okay.

72
00:04:53.522 --> 00:04:55.520
mode = "markers".

73
00:04:55.520 --> 00:04:59.900
And this, the color = temp,
just like before puts a color gradient.

74
00:04:59.900 --> 00:05:01.280
On the points and then,

75
00:05:01.280 --> 00:05:06.660
puts the actual key to the gradient
on the side of the plot.

76
00:05:06.660 --> 00:05:07.160
Okay.
So,

77
00:05:07.160 --> 00:05:12.120
that's all that we had to do to get
this nice interactive 3D scatter plot.

78
00:05:14.100 --> 00:05:14.910
Okay.

79
00:05:14.910 --> 00:05:17.820
So, your Homework now.

80
00:05:17.820 --> 00:05:22.300
So I feel like we've covered enough
of scatter plots to get you started

81
00:05:22.300 --> 00:05:25.070
on scatter plotting in plot_ly.

82
00:05:25.070 --> 00:05:30.110
You could of course, look at the further
options that you can try and play around

83
00:05:30.110 --> 00:05:35.450
with, but so for homework what I'd like
you to do is create a variety of different

84
00:05:35.450 --> 00:05:40.150
2D scatter plots changing the plotting
attributes, plotting other dimensions

85
00:05:40.150 --> 00:05:44.960
using color, plotting other dimensions
using different plotting points and so on.

86
00:05:44.960 --> 00:05:48.250
And then try to do the same thing for
a 3D scatter plot and

87
00:05:48.250 --> 00:05:50.420
just again, output it a a web page so

88
00:05:50.420 --> 00:05:54.979
you know how to look at it, you know how
to work with these things as web pages.

89
00:05:56.450 --> 00:06:00.040
And if you want, publish them to rpubs or
something like that so

90
00:06:00.040 --> 00:06:04.120
you have a hosting,
a way to host it publicly.

91
00:06:04.120 --> 00:06:07.490
Okay, so try that out and then next
we'll just go over some different,

92
00:06:07.490 --> 00:06:12.124
some even I think cooler
applications of plot_ly