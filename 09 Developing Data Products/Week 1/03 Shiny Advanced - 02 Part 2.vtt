WEBVTT

1
00:00:00.860 --> 00:00:06.430
Okay so I have copied the code
from the R Markdown document and

2
00:00:06.430 --> 00:00:11.100
of the next set of examples and here what
I'm going to show you is I'm going to

3
00:00:11.100 --> 00:00:14.650
first go to the user interface and
then I'll go to the server calculations.

4
00:00:14.650 --> 00:00:18.550
Remember what were trying to
show is reactive expressions.

5
00:00:18.550 --> 00:00:22.230
Okay so again we have our library
shiny statement right there.

6
00:00:22.230 --> 00:00:27.060
Okay, we have shinyUI,
fluidPage, we've got a title and

7
00:00:27.060 --> 00:00:30.170
then we're going to have
a side bar lay out with this.

8
00:00:30.170 --> 00:00:35.860
Okay, so that's this right here which is,
and then that contains the side bar panel,

9
00:00:35.860 --> 00:00:40.780
these commands right here and
the main panel, these commands right here.

10
00:00:40.780 --> 00:00:44.040
So, the sidebarPanel is
going to contain the inputs and

11
00:00:44.040 --> 00:00:46.910
the mainPanel is going to
contain the outputs.

12
00:00:46.910 --> 00:00:52.860
So the sidebarPanel includes
a sliderInput, okay.

13
00:00:52.860 --> 00:00:56.970
And remember, what that's going to
be labeled as, as a sliderMPG.

14
00:00:59.020 --> 00:01:04.028
So we're inputting the MPG from the car,

15
00:01:04.028 --> 00:01:09.035
and then this check box, are going to tell

16
00:01:09.035 --> 00:01:13.900
wether not you want to show certain model

17
00:01:13.900 --> 00:01:19.300
values in the output, in the mainPanel.

18
00:01:19.300 --> 00:01:20.480
Okay.

19
00:01:20.480 --> 00:01:24.770
And then you know,
we give it the default value of 20 and

20
00:01:24.770 --> 00:01:28.080
a range from 10 miles per
gallon to 35 miles per gallon.

21
00:01:28.080 --> 00:01:32.080
And the goal is to create something
that then displays your prediction for

22
00:01:32.080 --> 00:01:33.800
the horsepower.

23
00:01:33.800 --> 00:01:37.400
Then in the mainPanel,
and just by the way,

24
00:01:37.400 --> 00:01:41.900
the inputs are showModel1 and showModel2.

25
00:01:45.540 --> 00:01:51.096
The main panel then it's going
to show the output plot1.

26
00:01:51.096 --> 00:01:56.150
So were going to look in our server
function for plot label plot1 to make sure

27
00:01:56.150 --> 00:01:59.860
that it's there, because it's going to
get displayed here in our mainPanel.

28
00:01:59.860 --> 00:02:03.310
Then we're going to have our
output from prediction one, and

29
00:02:03.310 --> 00:02:08.050
that's going to be labeled pred1,
so we need some sort of

30
00:02:08.050 --> 00:02:13.100
output from our server that is
going to be labeled pred1 and

31
00:02:13.100 --> 00:02:17.960
another one that's labeled pred2, that
are both going to be textOutput, okay.

32
00:02:17.960 --> 00:02:21.900
So that's what our user
interface is doing.

33
00:02:21.900 --> 00:02:23.499
It's getting a slider input.

34
00:02:24.740 --> 00:02:29.830
To get in MPG,
that slider's label is sliderMPG.

35
00:02:29.830 --> 00:02:33.050
It's going to have the two checkboxes for
whether or

36
00:02:33.050 --> 00:02:36.310
not it's going to show that
particular model output.

37
00:02:36.310 --> 00:02:39.220
So that's what it's going to
send to the server.

38
00:02:39.220 --> 00:02:42.280
Those are some information that's
going to be sent to the server as input,

39
00:02:42.280 --> 00:02:47.170
and what we're expecting from our server
functions is output Is we're expecting

40
00:02:47.170 --> 00:02:53.580
a plot labeled plot1, we're expecting text
labeled pred1 and text labeled pred2.

41
00:02:53.580 --> 00:02:54.812
Okay, now let's look at our server.

42
00:02:57.145 --> 00:03:00.225
So, here's our shinyServer function and

43
00:03:00.225 --> 00:03:05.110
then it's contains this function
that contains input and output.

44
00:03:06.420 --> 00:03:10.480
First thing it looks for, or
first thing it's going to do

45
00:03:10.480 --> 00:03:14.060
is it's going to take the mtcars
dataset which is loaded by default.

46
00:03:14.060 --> 00:03:20.120
So if I just type mtcars then you can just
see the data set it's loaded by default.

47
00:03:20.120 --> 00:03:23.420
It's one of the more common
example data sets used in R and

48
00:03:23.420 --> 00:03:26.910
it's basically going to create
this is just a spline term.

49
00:03:26.910 --> 00:03:31.850
So is the mpg of the car is larger
than 20 this is going to return

50
00:03:31.850 --> 00:03:34.950
the mpg otherwise it's
going to return 0 and

51
00:03:34.950 --> 00:03:41.360
that's useful if you want to feed a model
that has kind of of a broken stick feeds.

52
00:03:41.360 --> 00:03:45.930
So it has a line and then a break
point at 20 and then another line and

53
00:03:45.930 --> 00:03:50.900
the two lines meet continuously at that
break point, so then what's going on in

54
00:03:50.900 --> 00:03:55.980
the code is it's fitting this
first model that just has mpg and

55
00:03:55.980 --> 00:04:02.050
the second model that has mpg in this
break point in the middle, okay?

56
00:04:02.050 --> 00:04:03.500
So it's fitting two models and

57
00:04:03.500 --> 00:04:07.260
these two models are what's going
to be used to form the prediction.

58
00:04:07.260 --> 00:04:11.670
Okay, now, let's actually get
the prediction for model one.

59
00:04:11.670 --> 00:04:12.360
Okay?

60
00:04:12.360 --> 00:04:18.040
Now, we're doing calculations based on
inputted values from our user interface,

61
00:04:18.040 --> 00:04:21.020
so it needs to be in a reactive statement.

62
00:04:21.020 --> 00:04:22.840
So here we see this reactive statement,

63
00:04:22.840 --> 00:04:27.610
we see this funny notation where we
have a parenthesis and a curly braces.

64
00:04:27.610 --> 00:04:32.400
Okay, and then we're going to relabel
the input just as a regular R variable

65
00:04:32.400 --> 00:04:36.390
because it gets annoying to type input$ so
often.

66
00:04:36.390 --> 00:04:43.010
So we have mpgInput is
just the input$sliderMPG,

67
00:04:43.010 --> 00:04:49.740
and remember sliderMPG is what we names
the slider value in our user interface.

68
00:04:49.740 --> 00:04:51.230
Okay?

69
00:04:51.230 --> 00:04:55.120
And then this predict statement is
just going to use model1, okay?

70
00:04:55.120 --> 00:04:58.130
So, uses model1,
you can see it right there.

71
00:04:58.130 --> 00:04:59.360
Uses model1, and

72
00:04:59.360 --> 00:05:05.050
it's going to predict it at the new
value input from the slider, okay?

73
00:05:05.050 --> 00:05:06.410
So that's model1.

74
00:05:06.410 --> 00:05:10.470
And then model2 is going to do the same
thing with the exception that we

75
00:05:10.470 --> 00:05:14.110
have to also create this variable
if our input value is bigger

76
00:05:14.110 --> 00:05:18.620
than 20 it returns that otherwise
it's going to return 0.

77
00:05:18.620 --> 00:05:25.350
So it's the same thing only now we've
created this second variable mpgsp,

78
00:05:25.350 --> 00:05:30.830
right, and that's this extra spline term,
so we have our two

79
00:05:30.830 --> 00:05:36.520
reactive assigned variables,
model1 pred, and model2 pred.

80
00:05:36.520 --> 00:05:37.380
Okay.

81
00:05:37.380 --> 00:05:42.260
Now, the first output that we're
going to create is output$plot1.

82
00:05:42.260 --> 00:05:46.650
Remember, that our user interface is
looking for a plot labeled plot1.

83
00:05:46.650 --> 00:05:51.330
And because it's a plot,
we're going to say it's a renderPlot.

84
00:05:51.330 --> 00:05:55.810
Okay and that funny notation
where it's the parentheses and

85
00:05:55.810 --> 00:05:58.940
then the curly braces
inside the parentheses.

86
00:05:58.940 --> 00:06:01.180
So we're grabbing our mpgInput.

87
00:06:01.180 --> 00:06:03.300
That's just the sliderMPG again.

88
00:06:04.360 --> 00:06:09.005
And then we're going to create a plot and
the plot you're all familiar with R

89
00:06:09.005 --> 00:06:13.153
plotting so you can just go through and
see how the plot's working.

90
00:06:17.042 --> 00:06:23.122
But then also what I would like
you to look for first right here,

91
00:06:23.122 --> 00:06:28.974
if show model1,
then it's adding the fit for the model1,

92
00:06:28.974 --> 00:06:34.650
and if showModel2,
it's going to add the fit for model2.

93
00:06:34.650 --> 00:06:37.550
So, that's one thing it has this
conditional values for whether or

94
00:06:37.550 --> 00:06:38.920
not those lines are going to be in there.

95
00:06:40.260 --> 00:06:41.740
It's got a nice legend.

96
00:06:45.160 --> 00:06:53.230
And then if you look down here I guess
this is the most important part I want to

97
00:06:53.230 --> 00:06:59.340
show is we want to add some points at
the miles per gallon that you input.

98
00:06:59.340 --> 00:07:03.040
That's this values right here remember
we reassigned that from the slider

99
00:07:03.040 --> 00:07:04.970
value up here.

100
00:07:04.970 --> 00:07:10.370
So we just rename it
from the input$sliderMPG.

101
00:07:10.370 --> 00:07:11.120
Okay?

102
00:07:11.120 --> 00:07:15.690
But then also we want the result of our
reactive expression, model1pred, and so

103
00:07:15.690 --> 00:07:16.590
we're putting that in there.

104
00:07:16.590 --> 00:07:20.840
But remember you gotta access
that number as a function, right?

105
00:07:20.840 --> 00:07:26.250
Because it was from a reactive expression
other where in the code, okay?

106
00:07:26.250 --> 00:07:27.450
So it's gotta be.

107
00:07:27.450 --> 00:07:29.249
So this'll just return the number.

108
00:07:30.480 --> 00:07:33.800
If you don't actually put those
parentheses there, it'll return

109
00:07:33.800 --> 00:07:37.410
the function, which points won't know
what to plot because it's a function.

110
00:07:37.410 --> 00:07:39.910
So if you want it to
put that in the number,

111
00:07:39.910 --> 00:07:43.160
you have to put the parentheses there.

112
00:07:43.160 --> 00:07:44.740
Then here is the second one.

113
00:07:44.740 --> 00:07:46.350
So these will add the points.

114
00:07:46.350 --> 00:07:49.340
So the output of this
is going to be a plot

115
00:07:49.340 --> 00:07:51.770
that's going to be passed
back to our user interface.

116
00:07:51.770 --> 00:07:55.540
It's going to have if the check boxes are
checked it's going to have the two fitted

117
00:07:55.540 --> 00:07:59.130
lines, it's going to have the data it's
using to fit those lines on there, but

118
00:07:59.130 --> 00:08:02.910
then it's also going to have specific
points at our two prediction values.

119
00:08:02.910 --> 00:08:04.110
Okay, great.

120
00:08:04.110 --> 00:08:07.580
And then it's also,
remember it's looking for a pred1,

121
00:08:07.580 --> 00:08:11.150
in other words it wants
to see the prediction.

122
00:08:12.960 --> 00:08:15.790
And so we're going to do that and
that needs to be text, so

123
00:08:15.790 --> 00:08:19.000
it's going to be renderText({,
and then model1pred().

124
00:08:19.000 --> 00:08:22.430
And then we're going to do pred2, okay?

125
00:08:22.430 --> 00:08:25.510
And that's renderText({ again,
and model2pred().

126
00:08:25.510 --> 00:08:30.440
And remember, in both cases, we're
remembering to do the parentheses for

127
00:08:30.440 --> 00:08:32.270
our reactive expression.

128
00:08:32.270 --> 00:08:36.020
Okay, now let's go ahead and
run it and see how it works.

129
00:08:37.640 --> 00:08:38.840
And there it is.

130
00:08:38.840 --> 00:08:41.710
Okay so here's our slider.

131
00:08:41.710 --> 00:08:45.715
As we change or slider, what you're
going to see is the two points,

132
00:08:45.715 --> 00:08:47.495
the points where we're predicting at.

133
00:08:47.495 --> 00:08:50.195
And you can see the two models here.

134
00:08:50.195 --> 00:08:54.365
The red one, which had no spline term,
and the blue one,

135
00:08:54.365 --> 00:08:58.835
which had this spline term at 20 so you
see it looks like a little broken stick.

136
00:08:58.835 --> 00:09:04.650
So our two models, and then down here
we see the prediction from model1 and

137
00:09:04.650 --> 00:09:06.008
the prediction for model2.

138
00:09:06.008 --> 00:09:08.790
So, exactly as we were
hoping it would work.

139
00:09:08.790 --> 00:09:14.592
And then you can show or hide the first
line, or show or hide the second line.

140
00:09:14.592 --> 00:09:19.830
So, I think now once you
recreate this example,

141
00:09:19.830 --> 00:09:22.960
I think you'll be at the point where you
can actually do some fairly complicated

142
00:09:22.960 --> 00:09:26.330
things in shiny and
it's an incredibly useful tool.

143
00:09:26.330 --> 00:09:28.740
Next, what we're going to want to go
through is just showing how to put

144
00:09:28.740 --> 00:09:33.660
conditional expressions where you'll
operate on the code conditionally upon

145
00:09:33.660 --> 00:09:35.480
clicking a done button or
something like this.

146
00:09:35.480 --> 00:09:36.100
But at this point,

147
00:09:36.100 --> 00:09:39.070
I think you should probably be able
to make shiny pretty useful for you.

148
00:09:40.200 --> 00:09:44.410
So, go ahead and try this example,
and I think after the next lecture,

149
00:09:44.410 --> 00:09:48.910
you'll have a pretty solid foundation for

150
00:09:48.910 --> 00:09:53.760
working on your shiny apps and creating
things that are quite useful for you, and

151
00:09:53.760 --> 00:09:56.360
then, of course, useful for
others when you put them on the internet.