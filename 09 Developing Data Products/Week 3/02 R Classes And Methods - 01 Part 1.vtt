WEBVTT

1
00:00:00.000 --> 00:00:04.950
Hi everyone, this lecture is about writing
classes and methods in R.

2
00:00:04.950 --> 00:00:08.674
The basic idea of writing classes and
methods in R, is that

3
00:00:08.674 --> 00:00:12.519
you want to represent new kinds of data,
or new data types.

4
00:00:12.519 --> 00:00:17.560
That R doesn't kind of you know, by
default support.

5
00:00:17.560 --> 00:00:21.160
So for example you can think of a basic
data type, like a list.

6
00:00:21.160 --> 00:00:23.590
This is this, this is kind of inherent to
R.

7
00:00:23.590 --> 00:00:26.290
There's all kinds of functions and kind of
processes that you can do

8
00:00:26.290 --> 00:00:29.340
to lists that gets all kind of built in
that kind of comes with R.

9
00:00:29.340 --> 00:00:31.450
But if you can imagine thinking of a new
data type.

10
00:00:31.450 --> 00:00:34.900
For example, a new field emerges and they
come up with their own data.

11
00:00:34.900 --> 00:00:39.130
This is not something that the original
designers of R could have foreseen.

12
00:00:39.130 --> 00:00:43.280
And so, you need to develop a new
structure to support that data,

13
00:00:43.280 --> 00:00:46.530
a new set of functions to kind of apply to
that kind of data type.

14
00:00:46.530 --> 00:00:50.170
And so, that's what the idea behind
writing classes and methods in R is.

15
00:00:50.170 --> 00:00:56.102
So any time something new comes up, the R
system can adapt.

16
00:00:56.102 --> 00:00:59.750
And kind of support new types of data and
new data structures.

17
00:00:59.750 --> 00:01:01.490
So that's what we're going to talk about
in this lecture.

18
00:01:06.660 --> 00:01:08.200
The classes and methods system in R

19
00:01:08.200 --> 00:01:11.334
is basically a system for doing
object-oriented programming.

20
00:01:11.334 --> 00:01:15.511
And years ago when R was first coming out
it was quite an interesting language.

21
00:01:15.511 --> 00:01:18.435
Because it was both an interactive system
that

22
00:01:18.435 --> 00:01:21.803
supported a kind of formal system for
object orientation.

23
00:01:21.803 --> 00:01:24.254
And so, many other languages at the time
and things

24
00:01:24.254 --> 00:01:25.622
like, things that had kind of

25
00:01:25.622 --> 00:01:28.691
well known object orientated programming
infrastructure.

26
00:01:28.691 --> 00:01:33.324
Like C++ and Java were generally not
considered interactive languages.

27
00:01:33.324 --> 00:01:35.532
Those are the kind of languages where you
write programs,

28
00:01:35.532 --> 00:01:37.401
you compile them and then you could run
them.

29
00:01:37.401 --> 00:01:40.145
And not the kind of thing where you type
things in the command

30
00:01:40.145 --> 00:01:43.500
line and execute things one at a time like
you do in R.

31
00:01:43.500 --> 00:01:47.110
So a lot of the R code, a lot of the code
in R

32
00:01:47.110 --> 00:01:49.280
for supporting devel, the development of
classes

33
00:01:49.280 --> 00:01:51.150
and methods was written by John Chambers
himself.

34
00:01:51.150 --> 00:01:56.160
So he was the creator of S and has written
a lot of code in the R system.

35
00:01:56.160 --> 00:01:59.830
And so the basic ideas are documented in
his book Programming with Data.

36
00:02:01.400 --> 00:02:06.222
And so, the idea behind the class and
methods system in R is to

37
00:02:06.222 --> 00:02:12.086
kind of allow people to cross over from
being a user to being a programmer.

38
00:02:12.086 --> 00:02:14.942
And you recall from the basic overview of
the R

39
00:02:14.942 --> 00:02:18.518
language that we talked about in the R
programming class.

40
00:02:18.518 --> 00:02:22.418
John Chambers original idea for the, for
the S language was that people would

41
00:02:22.418 --> 00:02:26.660
start off as users and slowly as they
became more familiar with the language.

42
00:02:26.660 --> 00:02:28.580
They would cross over and become
programmers as

43
00:02:28.580 --> 00:02:30.713
they tried to customize the system for
themselves.

44
00:02:30.713 --> 00:02:34.670
So R has a var-, the sa-, the basic same,
the same basic philosophy.

45
00:02:34.670 --> 00:02:38.741
Whereas that people could start off, users
can have executing functions and then

46
00:02:38.741 --> 00:02:42.520
as their needs grow a-, and as their needs
kind of outgrow the R system.

47
00:02:42.520 --> 00:02:45.480
They could become programmers and develop
new things in R.

48
00:02:45.480 --> 00:02:47.280
And that's the basis of classes and
methods.

49
00:02:48.860 --> 00:02:51.390
So object oriented programming is a little
bit different

50
00:02:51.390 --> 00:02:53.330
in R than it is most of the languages.

51
00:02:53.330 --> 00:02:56.310
So if, if you're familiar with the
language, like C++ or Java.

52
00:02:56.310 --> 00:02:58.613
There's document that is helpful, but some
of the

53
00:02:58.613 --> 00:03:01.220
ideas in R are a little bit different so.

54
00:03:01.220 --> 00:03:01.640
It's used.

55
00:03:01.640 --> 00:03:04.079
And you might want to pay, pay attention
to some of the details here.

56
00:03:09.260 --> 00:03:13.440
So in R there are basically two styles of
classes and methods.

57
00:03:13.440 --> 00:03:17.250
And this is a function of kind of
historical development there's kind of

58
00:03:17.250 --> 00:03:20.310
an older style, and the, the new, there's
a newer style.

59
00:03:20.310 --> 00:03:25.340
So sometimes we'll see the older styles
referred to as S3 classes and methods.

60
00:03:25.340 --> 00:03:27.740
So that corresponds with version three of
the S

61
00:03:27.740 --> 00:03:32.283
language and these classes and methods
are, are informal.

62
00:03:32.283 --> 00:03:36.350
They'are a little kludgy and they're
kind of not very formally rigorous.

63
00:03:36.350 --> 00:03:38.202
But they get the job done and they work
quite well.

64
00:03:38.202 --> 00:03:40.722
And a lot of the basic functions that you
use

65
00:03:40.722 --> 00:03:43.730
in R, are kind of built on S3 classes and
methods.

66
00:03:43.730 --> 00:03:45.390
So we know that they are really quite
useful.

67
00:03:46.400 --> 00:03:49.250
And so, and they're not going away anytime
soon.

68
00:03:49.250 --> 00:03:52.640
But the more formal and rigorous system
for writing classes

69
00:03:52.640 --> 00:03:56.680
and methods is called, usually referred to
as the S4 system.

70
00:03:56.680 --> 00:04:00.696
And the became, because it came with the
version 4 of the S language.

71
00:04:00.696 --> 00:04:06.166
It was introduced into R at version 1.4.0,
which was in December 2001.

72
00:04:06.166 --> 00:04:09.145
And these are sometimes called new styled
classes and methods.

73
00:04:09.145 --> 00:04:13.924
And for new projects, it's generally
encouraged, for for

74
00:04:13.924 --> 00:04:17.210
people to kind of use the S4 classes or
methods.

75
00:04:17.210 --> 00:04:19.620
If they're going to be developing new
types of classes and methods.

76
00:04:21.790 --> 00:04:26.470
So, these two systems for the foreseeable
future will be living side, by side.

77
00:04:26.470 --> 00:04:28.740
Just because of the sort of history of R
and a

78
00:04:28.740 --> 00:04:32.190
lot of the kind of built in functionality
that's written in S3.

79
00:04:32.190 --> 00:04:35.940
But the S3 and S4 systems are separate in
the sense that

80
00:04:35.940 --> 00:04:39.660
you don't typically mix then together as
you are programming new things.

81
00:04:39.660 --> 00:04:42.820
So the systems are fairly independent of
each other.

82
00:04:42.820 --> 00:04:46.240
And so developers are encouraged to use
the S4 style classes

83
00:04:46.240 --> 00:04:51.050
in methods that use extensively for
example in the bio-conductor project.

84
00:04:51.050 --> 00:04:53.500
But the S3 classes and methods are
sometimes

85
00:04:53.500 --> 00:04:55.300
useful because they are very quick and
dirty.

86
00:04:55.300 --> 00:04:57.317
They are a little bit easier to program.

87
00:04:57.317 --> 00:05:01.557
And for short term types of projects you
may, it may be tempting

88
00:05:01.557 --> 00:05:06.758
to kind of build up some S3 classes and
methods in the first go.

89
00:05:06.758 --> 00:05:09.457
But for the most part we'll focus on S4.

90
00:05:09.457 --> 00:05:12.700
I'll talk a little bit about the S3 system
just so you're familiar with it.

91
00:05:12.700 --> 00:05:16.110
But I'll talk mostly about developing in
the S4 system.

92
00:05:16.110 --> 00:05:18.700
So one thing that's important to know is
that all of the

93
00:05:18.700 --> 00:05:22.980
implementation of the object orient method
in the S4 classes and methods.

94
00:05:22.980 --> 00:05:25.300
Is implemented in the methods package.

95
00:05:25.300 --> 00:05:27.720
The methods packaged is usually loaded by
default.

96
00:05:27.720 --> 00:05:28.850
So if you just start up R from a

97
00:05:28.850 --> 00:05:32.610
clean installation the methods package
will usually be loaded.

98
00:05:32.610 --> 00:05:33.920
But if it's not, you can always load it

99
00:05:33.920 --> 00:05:36.580
with the library function by calling the
library methods.

100
00:05:40.160 --> 00:05:43.740
So the basic idea this, in object oriented
programming R is

101
00:05:43.740 --> 00:05:46.920
that you have classes and methods as you
may have guessed already.

102
00:05:46.920 --> 00:05:50.800
So a class is basically a description of
some thing, right?

103
00:05:50.800 --> 00:05:55.470
And the thing will usually be some new
thing like a new data type or a new idea.

104
00:05:55.470 --> 00:05:59.910
And a class can be defined using the set
class method in the methods package.

105
00:05:59.910 --> 00:06:03.278
And then you have objects which are
instances of that classes.

106
00:06:03.278 --> 00:06:05.815
And objects can be created using the new
function or

107
00:06:05.815 --> 00:06:09.256
are often there can be created using other
types of functions.

108
00:06:09.256 --> 00:06:11.368
So a method is a function that operates

109
00:06:11.368 --> 00:06:14.020
on certain class on a certain class of
objects.

110
00:06:15.020 --> 00:06:19.010
And so, methods are functions that are
specific to certain classes.

111
00:06:19.010 --> 00:06:21.634
And then finally you have a generic
function,

112
00:06:21.634 --> 00:06:24.296
which is an R function that dispatches
methods.

113
00:06:24.296 --> 00:06:28.450
So generic function is usually it tries to
encapsulate a generic kind of

114
00:06:28.450 --> 00:06:32.020
concept, and we'll see a few of these a
little bit later.

115
00:06:32.020 --> 00:06:37.087
For example, the plot function is probably
one of the most used generic functions.

116
00:06:37.087 --> 00:06:39.820
And the plot functions, plotting is a
fairly generic concept.

117
00:06:39.820 --> 00:06:44.340
And what, how you make a plot may depend
on the kind of data that you're plotting.

118
00:06:44.340 --> 00:06:46.900
And so there are many different plotting
methods

119
00:06:46.900 --> 00:06:48.900
that can be applied to different data
types.

120
00:06:48.900 --> 00:06:52.520
And the plots function jobs it to, to look
at the

121
00:06:52.520 --> 00:06:56.490
data types and, and dispatch specific
methods on those different data types.

122
00:06:56.490 --> 00:06:58.380
So generic functions do not actually do
anything.

123
00:06:58.380 --> 00:07:01.370
They don't do any computation, they don't
do an sort of work.

124
00:07:01.370 --> 00:07:03.500
Their main job is to dispatch methods, and
we'll

125
00:07:03.500 --> 00:07:06.470
talk about what that means more
specifically in a second.

126
00:07:06.470 --> 00:07:08.500
And so, a method is the implementation of
a

127
00:07:08.500 --> 00:07:11.220
generic function for an object of a
particular class.

128
00:07:11.220 --> 00:07:15.589
So the basic concepts are class, object,
method, and generic function here.

129
00:07:18.870 --> 00:07:21.440
So, as you're working your way through
the, learning this system, there are

130
00:07:21.440 --> 00:07:25.800
a number of help files in the methods
package that may come in handy.

131
00:07:25.800 --> 00:07:28.260
so, the primary documentation are in the
help files.

132
00:07:28.260 --> 00:07:31.490
So you can look at the classes and methods
help pages.

133
00:07:31.490 --> 00:07:36.340
You can also look at help pages for
?setClass, ?setMethod, and ?setGeneric.

134
00:07:36.340 --> 00:07:40.090
Some of this gets very technical so you
may want to skim through it right now.

135
00:07:40.090 --> 00:07:43.160
But, as you learn the system, it will make
more sense in the future.

136
00:07:46.960 --> 00:07:49.490
So every object and R has a class, and the

137
00:07:49.490 --> 00:07:52.700
class of that object can be determined
with the class function.

138
00:07:52.700 --> 00:07:54.330
I just take the number one here.

139
00:07:54.330 --> 00:07:56.220
You may recall an R the numbers by

140
00:07:56.220 --> 00:08:00.000
default are kind of real numbers or double
precision numbers.

141
00:08:00.000 --> 00:08:03.730
And so, there considered a numeric class,
and so that's what you see here.

142
00:08:03.730 --> 00:08:06.690
Illogicals have there own class there true
and false are logicals.

143
00:08:10.160 --> 00:08:12.670
If you generate some random numbers, those

144
00:08:12.670 --> 00:08:16.060
are numeric that again is a numeric
vector.

145
00:08:16.060 --> 00:08:18.980
The missing value NA is by default a
logical, but you

146
00:08:18.980 --> 00:08:22.890
can have missing kind of of a numeric unit
missing integer etcetera.

147
00:08:22.890 --> 00:08:26.480
And then this a character string will have
in the class of characters.

148
00:08:26.480 --> 00:08:27.640
So that's all fairly straightforward.

149
00:08:27.640 --> 00:08:29.000
These are kind of atomic classes.

150
00:08:31.060 --> 00:08:32.890
But you can go beyond the atomic classes.

151
00:08:32.890 --> 00:08:34.640
For example, I could fit a linear model.

152
00:08:34.640 --> 00:08:38.540
And the output from the lm function is an
lm class.

153
00:08:38.540 --> 00:08:41.324
So if you think about it, the output from
fitting a linear

154
00:08:41.324 --> 00:08:44.278
model is not what you would think of as a
standard data type.

155
00:08:44.278 --> 00:08:48.630
Like numeric or integer or character but
it is a data type.

156
00:08:48.630 --> 00:08:50.980
There are certain ideas that are kind of
encapsulated

157
00:08:50.980 --> 00:08:52.530
in, from the output of a linear model.

158
00:08:52.530 --> 00:08:54.540
If you are familiar with statistics.

159
00:08:54.540 --> 00:08:58.780
And so and so it may deserve its own data
type.

160
00:08:58.780 --> 00:09:02.430
And so therefore we call it the lm data
type, or data, or class.

161
00:09:06.050 --> 00:09:08.230
So that, that's the idea behind classes in
R.

162
00:09:08.230 --> 00:09:11.270
So generics and methods are the, these
types of functions that

163
00:09:11.270 --> 00:09:13.270
you'll, you'll write to implement

164
00:09:13.270 --> 00:09:14.960
functionality for certain types of
classes.

165
00:09:16.890 --> 00:09:18.910
An S4 and S3 generic functions will

166
00:09:18.910 --> 00:09:22.110
look different but they are conceptually
the same.

167
00:09:22.110 --> 00:09:22.955
They play the same role.

168
00:09:24.590 --> 00:09:26.620
And so when you can when you program you

169
00:09:26.620 --> 00:09:28.950
can write meth-, new methods for an
existing generics.

170
00:09:28.950 --> 00:09:31.610
So there may be a generic like plot that's
already out there.

171
00:09:31.610 --> 00:09:36.430
And then you'll write a new method for a
new type of data.

172
00:09:36.430 --> 00:09:39.030
But there may be new generics that you
create.

173
00:09:39.030 --> 00:09:41.860
So you may create a new generic function
for doing a new operation.

174
00:09:41.860 --> 00:09:45.410
And then, you'll have to write the generic
and the method for a given data type.

175
00:09:49.480 --> 00:09:51.160
Here are a few generic functions.

176
00:09:51.160 --> 00:09:53.590
These are S3 generic functions.

177
00:09:53.590 --> 00:09:55.650
And so these are probably functions that
you've seen already.

178
00:09:55.650 --> 00:09:57.970
The mean is a generic function.

179
00:09:57.970 --> 00:09:59.590
Print is a generic function.

180
00:09:59.590 --> 00:10:01.130
And so you see when I print out these

181
00:10:01.130 --> 00:10:04.740
functions, there's not there's almost no
code associated with them.

182
00:10:04.740 --> 00:10:09.084
The only code that comes out of the mean
function is this use method mean.

183
00:10:09.084 --> 00:10:11.320
And similarly for the print function, the
generic

184
00:10:11.320 --> 00:10:13.412
function, the all you see is use method
print.

185
00:10:13.412 --> 00:10:17.012
And so, the basic idea is that, these
generic functions, there job is

186
00:10:17.012 --> 00:10:21.000
to find an appropriate method for whatever
data type is being passed to them.

187
00:10:23.670 --> 00:10:26.220
So you can see what methods are available,
for

188
00:10:26.220 --> 00:10:29.150
the mean generic function, by calling the
methods function.

189
00:10:29.150 --> 00:10:31.298
And you can see there's a mean function
for dates.

190
00:10:31.298 --> 00:10:33.620
There's a, [UNKNOWN] there's a default
method.

191
00:10:33.620 --> 00:10:36.822
And there's one for div time, Posixct and
Posixlt.

192
00:10:36.822 --> 00:10:40.102
Now as you add as you kind of load
packages into

193
00:10:40.102 --> 00:10:44.903
the R environment, those packages may add
methods for the means.

194
00:10:44.903 --> 00:10:48.487
So, as you kind of load packages
throughout your work in R, this set

195
00:10:48.487 --> 00:10:52.993
of methods that are available to the mean
function may change over time.

196
00:10:52.993 --> 00:10:56.610
And so, this list can grow as you add more
packages.

197
00:10:58.190 --> 00:11:00.920
So, here's an example of an S4 generic

198
00:11:00.920 --> 00:11:03.450
function so this is from the methods
package.

199
00:11:03.450 --> 00:11:06.960
It's called show, and it's the equivalent
of print, but it's the S4 version.

200
00:11:06.960 --> 00:11:09.520
And you see there's a lot more stuff that
gets printed out when

201
00:11:09.520 --> 00:11:12.930
you, when you, when you print out the body
of the show function.

202
00:11:12.930 --> 00:11:14.480
The base, the basic idea's the same.

203
00:11:14.480 --> 00:11:17.502
The, the code for show is the standard
generic.

204
00:11:17.502 --> 00:11:19.833
And then show and based, and it just tries
to

205
00:11:19.833 --> 00:11:23.128
identify the class of the object that's
being passed to it.

206
00:11:23.128 --> 00:11:25.261
And then it will dispatch the appropriate
method.

207
00:11:25.261 --> 00:11:27.055
And so, most of the time in R you

208
00:11:27.055 --> 00:11:30.383
don't call the Show function or the Print
function.

209
00:11:30.383 --> 00:11:35.270
Because most, because objects will be auto
printed at the command line.

210
00:11:35.270 --> 00:11:36.674
So here you can see what methods

211
00:11:36.674 --> 00:11:39.036
are associated with the show, generic
function.

212
00:11:39.036 --> 00:11:42.416
And you can see that this these are, there
are number of methods here

213
00:11:42.416 --> 00:11:45.587
one is for these are all in the methods
package, that you can see.

214
00:11:45.587 --> 00:11:47.507
There is one for the in ref class, is

215
00:11:47.507 --> 00:11:50.633
one for functions, is one for generic
functions etc,.

216
00:11:50.633 --> 00:11:53.223
So all these different types of objects

217
00:11:53.223 --> 00:11:55.880
have a special print method or show
method.

218
00:11:59.160 --> 00:12:02.779
So, the basic mechanism by which generic
functions and

219
00:12:02.779 --> 00:12:06.755
methods interact with each other is, goes
as follows.

220
00:12:06.755 --> 00:12:08.471
So, the first argument for any generic

221
00:12:08.471 --> 00:12:10.484
function is an object of a particular
class.

222
00:12:10.484 --> 00:12:11.226
All right?

223
00:12:11.226 --> 00:12:14.080
There may be other arguments but the first
object is important.

224
00:12:14.080 --> 00:12:16.420
Sorry, the first argument is important.

225
00:12:16.420 --> 00:12:18.080
And so the way the process works, is that

226
00:12:18.080 --> 00:12:21.210
the generic function will check the class
of that object.

227
00:12:21.210 --> 00:12:23.260
So it will try to identify the class.

228
00:12:23.260 --> 00:12:25.980
It will do, the generic function will
essentially do a search

229
00:12:25.980 --> 00:12:29.430
to see if there's a method that is
specific for that class.

230
00:12:29.430 --> 00:12:31.870
If there is a method for that class, then
it will call

231
00:12:31.870 --> 00:12:34.900
the method of that object, and then the
generic functions job is done.

232
00:12:34.900 --> 00:12:36.260
The method will do the rest of the work.

233
00:12:37.320 --> 00:12:40.760
If there is no method for that class Then
the

234
00:12:40.760 --> 00:12:43.210
generic will search, will see if there's a
default method.

235
00:12:43.210 --> 00:12:45.910
So a kind of catch all method that always
gets applied

236
00:12:45.910 --> 00:12:48.990
if there's no other kind of more specific
type of method.

237
00:12:48.990 --> 00:12:50.800
If there'a default method, then the
default method

238
00:12:50.800 --> 00:12:52.960
is called and then it does all the work.

239
00:12:52.960 --> 00:12:56.214
If there's no default method, then,
there's an error.

240
00:12:56.214 --> 00:12:59.594
Because the generic function doesn't know
what to call, and

241
00:12:59.594 --> 00:13:03.498
there's no default method so, it can't do
anything by itself.

242
00:13:03.498 --> 00:13:07.093
so, a lot of times you may want to look at
the code for methods.

243
00:13:07.093 --> 00:13:10.085
But it's important to note that it's
generally not

244
00:13:10.085 --> 00:13:13.526
possible to, kind of, print the code of a
method function.

245
00:13:13.526 --> 00:13:16.380
Just like you might print the code of any
other function.

246
00:13:16.380 --> 00:13:19.224
So some functions that are not generics or
methods.

247
00:13:19.224 --> 00:13:21.397
You can just type the name of the function
in the command line and

248
00:13:21.397 --> 00:13:23.785
you, you'll see the body of the function
when you look at the code.

249
00:13:23.785 --> 00:13:27.429
That's not always the case with S3 or S4
methods.

250
00:13:27.429 --> 00:13:30.437
And so, the appropriate way to look at the
code or method

251
00:13:30.437 --> 00:13:34.510
is to use either the get S3 method or the
get method function.

252
00:13:34.510 --> 00:13:39.580
So get S3 method is for gen,ge,gen S3
generics, I'm sorry methods.

253
00:13:39.580 --> 00:13:41.510
And the get method function is for S4.

254
00:13:41.510 --> 00:13:43.600
And the basic idea, is you pass this
function.

255
00:13:43.600 --> 00:13:45.660
The first argument is the name of the
generic.

256
00:13:45.660 --> 00:13:48.880
And the second argument is the is the
class of the object.