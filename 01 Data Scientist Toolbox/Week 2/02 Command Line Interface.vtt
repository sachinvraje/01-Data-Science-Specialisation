WEBVTT

1
00:00:00.910 --> 00:00:03.690
This is an introduction to the command
interface.

2
00:00:03.690 --> 00:00:06.950
The command line interface is a way of
working with files and folders

3
00:00:06.950 --> 00:00:11.690
that involves typing a command as opposed
to pointing and clicking with a mouse.

4
00:00:11.690 --> 00:00:15.060
It's incredibly useful for data science
and will be used both when you programming

5
00:00:15.060 --> 00:00:18.890
in R and when you're using other tools in
the data scientist tool box.

6
00:00:20.520 --> 00:00:22.520
So, what is the command line interface?

7
00:00:22.520 --> 00:00:24.590
Almost every computer that's shipped today
comes

8
00:00:24.590 --> 00:00:27.320
with some form of a command line
interface.

9
00:00:27.320 --> 00:00:28.460
For this class, the command line

10
00:00:28.460 --> 00:00:30.550
interfaces we'll be using, for Windows,
it's

11
00:00:30.550 --> 00:00:34.680
Git Bash and you'll see more about that in
the "Introduction to Git".

12
00:00:34.680 --> 00:00:36.700
And for Mac and Linux, it's the terminal.

13
00:00:38.640 --> 00:00:40.200
[SOUND] So what can the Command Line
Interface do?

14
00:00:40.200 --> 00:00:43.130
Well, you can use it to navigate between
folders.

15
00:00:43.130 --> 00:00:46.700
You can use it to create files, folders,
and programs, and

16
00:00:46.700 --> 00:00:49.370
then you can use it to edit those files
and folders.

17
00:00:49.370 --> 00:00:52.160
Finally you can use it to run computer
programs which is one of

18
00:00:52.160 --> 00:00:55.420
the main uses we'll be having for it in a
data science program.

19
00:00:56.910 --> 00:00:59.730
So first we need to understand the basics
of directories.

20
00:00:59.730 --> 00:01:02.650
So directory is just another name for
folder, and it's the

21
00:01:02.650 --> 00:01:05.100
common name that you'll be hearing about a
lot in this class.

22
00:01:05.100 --> 00:01:07.290
So being in a directory and moving to the
directory.

23
00:01:08.500 --> 00:01:11.560
Directories on your computer are organized
like a tree.

24
00:01:11.560 --> 00:01:15.180
So there's one directory will be inside of
another directory.

25
00:01:15.180 --> 00:01:17.010
And so we can navigate between

26
00:01:17.010 --> 00:01:20.030
those directories using the command line
interface.

27
00:01:20.030 --> 00:01:23.753
So, here's an example, we have a music
directory and there

28
00:01:23.753 --> 00:01:27.841
are three sub directories, one for each
composer here, and so you

29
00:01:27.841 --> 00:01:31.856
can imagine that the Debussy directory is
inside of the music

30
00:01:31.856 --> 00:01:36.990
directory and so when we think about the
structure of this directory.

31
00:01:36.990 --> 00:01:42.150
We think of being either inside of a
directory or being up from a directory.

32
00:01:42.150 --> 00:01:47.110
So, one directory up from the Debussy
directory is the music directory.

33
00:01:47.110 --> 00:01:50.760
In general, the directory that's up from
the directory that you're

34
00:01:50.760 --> 00:01:53.820
thinking of is the directory that contains
the directory you're thinking of.

35
00:01:56.170 --> 00:01:58.740
[SOUND] So the directory structure on your
computer looks something like this.

36
00:01:58.740 --> 00:02:01.120
You have sort of a tree structure

37
00:02:01.120 --> 00:02:04.550
where each sub, each directory has sub
directories.

38
00:02:06.240 --> 00:02:09.840
And so a couple of special cases that you
might want, that need to be considered.

39
00:02:09.840 --> 00:02:12.100
First it's the root directory.

40
00:02:12.100 --> 00:02:15.600
So this is the root directory up here at
the top of the tree.

41
00:02:15.600 --> 00:02:18.880
And it's indicated at the top because it
contains all of the other directories.

42
00:02:18.880 --> 00:02:24.870
And it's usually the shorthand for the new
directory is a slash.

43
00:02:24.870 --> 00:02:26.800
So a slash indicates the new directory.

44
00:02:28.360 --> 00:02:30.660
[SOUND] The other main directory that you
might want

45
00:02:30.660 --> 00:02:33.300
to be paying attention to is your home
directory.

46
00:02:33.300 --> 00:02:34.720
So that's down here.

47
00:02:34.720 --> 00:02:39.350
So, the home directory is where you log in
when you log in your computer and most

48
00:02:39.350 --> 00:02:41.950
of your personal stuff, your photos, your
music, your

49
00:02:41.950 --> 00:02:44.130
R function will all be in your personal
directory.

50
00:02:45.320 --> 00:02:48.420
And so that would be a sub directory of
the root directory again.

51
00:02:51.020 --> 00:02:54.131
[SOUND] So if you want to navigate between
those directories using the

52
00:02:54.131 --> 00:02:57.540
command line interface, first you have to
have a command line interface.

53
00:02:57.540 --> 00:03:01.220
So, for Windows users you should open the
Start menu,

54
00:03:01.220 --> 00:03:05.600
search for git bash, and then open git
bash the application.

55
00:03:07.020 --> 00:03:09.160
If you're a Mac user, you open Spotlight,

56
00:03:09.160 --> 00:03:12.000
search for terminal, and then open the
terminal application.

57
00:03:13.920 --> 00:03:16.350
When you open the terminal or GitBash,
you'll

58
00:03:16.350 --> 00:03:18.610
see something that looks a lot like this.

59
00:03:18.610 --> 00:03:25.240
So this is basically application where you
mostly see blank space.

60
00:03:25.240 --> 00:03:28.550
And so what will see is what's called the
prompt.

61
00:03:28.550 --> 00:03:29.740
Which is your username.

62
00:03:29.740 --> 00:03:33.580
Here in this case it's Sean followed by
[INAUDIBLE].

63
00:03:33.580 --> 00:03:36.010
And then so when you open this up, when
you open

64
00:03:36.010 --> 00:03:38.830
up the command line interface, you start
in your home directory.

65
00:03:38.830 --> 00:03:43.010
An important term that we'll be using a
lot is called your working directory.

66
00:03:43.010 --> 00:03:45.040
So that's whatever directory you're in at
the moment.

67
00:03:45.040 --> 00:03:47.560
So when you open you're command line

68
00:03:47.560 --> 00:03:51.070
interface, you're working directory is
your home directory.

69
00:03:51.070 --> 00:03:52.980
If you move into a sub directory called

70
00:03:52.980 --> 00:03:55.565
music, then your working directory will be
music.

71
00:03:55.565 --> 00:03:59.130
[SOUND] So another thing to keep in mind
is the

72
00:03:59.130 --> 00:04:03.850
path, so, people think about the path in
the directory structure.

73
00:04:03.850 --> 00:04:06.470
And so we'll be moving around along the
path.

74
00:04:06.470 --> 00:04:08.850
And so, suppose that you're down here,
you're down

75
00:04:08.850 --> 00:04:12.670
in your home directory which is signified
by the tilde.

76
00:04:12.670 --> 00:04:14.890
And so you might want to know what are the

77
00:04:14.890 --> 00:04:18.760
directors that are, directories that are
up from your home directory.

78
00:04:18.760 --> 00:04:21.950
So the first directory that's up is the
users directory.

79
00:04:21.950 --> 00:04:24.640
And then the next directory up is the root
directory.

80
00:04:24.640 --> 00:04:28.540
So you can imagine the path is the set of
directories you

81
00:04:28.540 --> 00:04:31.470
have to follow in order to get back up to
the root directory.

82
00:04:33.800 --> 00:04:39.120
[SOUND] So if you type PWD when you're in
the command line interface.

83
00:04:39.120 --> 00:04:40.610
So here we are at that prompt.

84
00:04:40.610 --> 00:04:42.530
You can see the username, the dollar sign.

85
00:04:42.530 --> 00:04:47.570
Then if you type PWD and hit return, what
you'll see is the path.

86
00:04:47.570 --> 00:04:51.120
So, this is the path to the working
directory that you're in right now.

87
00:04:51.120 --> 00:04:54.140
So in this case, this person is in the

88
00:04:54.140 --> 00:04:58.420
root directory, then users, and underneath
that they're in Sean.

89
00:04:58.420 --> 00:05:02.580
So, that's the path to the working
directory that they're in.

90
00:05:02.580 --> 00:05:05.090
So, PWD stands for print working
directory.

91
00:05:08.150 --> 00:05:11.871
[SOUND] If you use PWD, you can use that
at any time in your directory,

92
00:05:11.871 --> 00:05:13.884
it will always print the directory that

93
00:05:13.884 --> 00:05:16.530
you're in, that you're looking at right
then.

94
00:05:18.010 --> 00:05:22.320
So, there's always a recipe that goes with
using command line interfaces.

95
00:05:22.320 --> 00:05:25.450
So what you'll do is you'll use what's
called the command.

96
00:05:25.450 --> 00:05:27.940
So in the previous case it was called PWD.

97
00:05:27.940 --> 00:05:30.820
Then you'll use something called flags.

98
00:05:30.820 --> 00:05:33.680
These are like parameters or things that
you'll pass to

99
00:05:33.680 --> 00:05:38.430
the command that tell it what kind of
behavior to take.

100
00:05:38.430 --> 00:05:41.590
And then arguments can be what command is
going to modify

101
00:05:41.590 --> 00:05:43.830
so what files it'll look at and things
like that.

102
00:05:45.030 --> 00:05:49.110
Depending on the command, you may or may
not need to use flags or arguments.

103
00:05:49.110 --> 00:05:53.760
So for example when you were using PWD, it
was a command and it didn't require any

104
00:05:53.760 --> 00:05:56.090
sort of options, it didn't require any
flags

105
00:05:56.090 --> 00:05:58.130
or arguments in order to change what was
happening.

106
00:06:00.270 --> 00:06:02.700
[SOUND] So again, what we can use is we

107
00:06:02.700 --> 00:06:06.710
can use pwd to print the current working
directory.

108
00:06:06.710 --> 00:06:10.260
So, if I'm a different user then, when i
go to my

109
00:06:10.260 --> 00:06:13.850
home directory and I type PWD, I'll
actually get a different path.

110
00:06:13.850 --> 00:06:18.570
It's the path, users followed by Jeff
because now I'm a different user.

111
00:06:18.570 --> 00:06:20.460
And so I have a different current working
directory.

112
00:06:21.930 --> 00:06:25.780
Clear will clear all the commands in your
current command line interface.

113
00:06:25.780 --> 00:06:27.880
So for example, suppose you typed a bunch
of commands.

114
00:06:27.880 --> 00:06:31.190
In this case, we typed PWD, and we have
something here in users Jeff,

115
00:06:31.190 --> 00:06:35.760
and we don't want to have that cluttering
up the space in our interface anymore.

116
00:06:35.760 --> 00:06:37.340
Then what we can do is type just the

117
00:06:37.340 --> 00:06:40.940
word clear, and that will clear out
everything in

118
00:06:40.940 --> 00:06:42.750
the command line interface, and you'll be
left with

119
00:06:42.750 --> 00:06:44.660
just a prompt at the top of the screen
again.

120
00:06:46.720 --> 00:06:48.880
And a very important command is LS.

121
00:06:48.880 --> 00:06:53.180
So, LS lists files and folders in the
current directory.

122
00:06:53.180 --> 00:06:55.988
So, if you type LS, for example, in

123
00:06:55.988 --> 00:07:00.160
direc, [INAUDIBLE] directory, you might
get all the subfolders.

124
00:07:00.160 --> 00:07:02.908
So for example, you might get the desktop,
the photos, and music.

125
00:07:02.908 --> 00:07:09.170
And last, dash A lists both hidden and
unhidden files.

126
00:07:09.170 --> 00:07:10.900
And so for example, the desktop, photos,

127
00:07:10.900 --> 00:07:12.770
and music were all unhidden, but then
there

128
00:07:12.770 --> 00:07:18.980
are these files, the trash files and on a
Mac and .DS underscore store file.

129
00:07:18.980 --> 00:07:22.590
Those files are start, start with a dot
and so they're hidden when you type LS.

130
00:07:22.590 --> 00:07:27.858
They'll also be hidden if you look at in a
folder structure on the computer.

131
00:07:27.858 --> 00:07:30.120
But LS dash A reveals those folders.

132
00:07:31.220 --> 00:07:33.930
LS dash A lists some details for those
folders.

133
00:07:35.090 --> 00:07:37.440
So for example it lists information about
the

134
00:07:37.440 --> 00:07:38.940
size of the folders and stuff like that.

135
00:07:39.940 --> 00:07:44.140
An important note is that both dash A and
dash L are flags, so

136
00:07:45.340 --> 00:07:50.920
they're prec, preceded by a dash and often
a flag is preceded by a dash.

137
00:07:50.920 --> 00:07:53.980
You can combine them together into one
flag by

138
00:07:53.980 --> 00:07:56.304
just catnating the two letters together
after the dash.

139
00:07:56.304 --> 00:08:00.780
[SOUND]
CD is another command.

140
00:08:00.780 --> 00:08:03.130
It stands for change directory.

141
00:08:03.130 --> 00:08:06.620
It takes as an argument the directory that
you want to go visit.

142
00:08:06.620 --> 00:08:10.500
So if you're in a particular directory and
you want to move to another directory,

143
00:08:10.500 --> 00:08:16.810
you can pass to CD a particular path and
it will take you to that directory.

144
00:08:16.810 --> 00:08:19.850
So if you type CD with no argument at

145
00:08:19.850 --> 00:08:22.550
all it'll just take you straight to your
home directory.

146
00:08:23.830 --> 00:08:27.950
And then an important one is if you CD.

147
00:08:27.950 --> 00:08:30.830
What that'll do is it'll change
directories up one level, so

148
00:08:30.830 --> 00:08:34.180
you'll just move up one level if you do CD
dot dot.

149
00:08:34.180 --> 00:08:41.460
So for example if I'm in my home directory
and I type CD Music/Debussy.

150
00:08:41.460 --> 00:08:44.660
Then, I print what directory I've moved
to.

151
00:08:44.660 --> 00:08:49.640
I will have moved to that, sub directory
by using the CD command.

152
00:08:50.650 --> 00:08:53.780
Then if I wanted to move up just one
directory to the music folder

153
00:08:53.780 --> 00:08:57.360
what I could is I could type CD dot dot,
and what that would

154
00:08:57.360 --> 00:09:00.560
do is it would just move me up one
directory, and so if I

155
00:09:00.560 --> 00:09:05.430
print working directory now I move down
into the, or up into the music directory.

156
00:09:06.870 --> 00:09:10.280
[SOUND] If I just type CD and I don't type
anything after it like this

157
00:09:10.280 --> 00:09:14.320
right here then what I end up with is just
going back to my home directory.

158
00:09:16.720 --> 00:09:22.040
Mkdir or M K D I R stands for make
directory so,

159
00:09:22.040 --> 00:09:27.480
it's basically just like what you'd do if
you say right click create new folder.

160
00:09:27.480 --> 00:09:29.890
And so, what you need to do is you given

161
00:09:29.890 --> 00:09:32.790
an argument that's the name of the
directory you're creating.

162
00:09:32.790 --> 00:09:37.580
So, for example, suppose I'm here again in
my home directory, Jeff.

163
00:09:37.580 --> 00:09:41.620
And I type MKDIR, space, documents.

164
00:09:41.620 --> 00:09:44.810
What that will do is it will create a new
folder called documents.

165
00:09:44.810 --> 00:09:48.870
So if I type LS, the list out all the
directories that I see.

166
00:09:48.870 --> 00:09:50.880
One of the directories will now be
documents

167
00:09:50.880 --> 00:09:53.190
that I've just created with this MKDIR
command.

168
00:09:53.190 --> 00:09:56.420
So now I can actually move into that

169
00:09:56.420 --> 00:10:00.970
document's directory, and then print my
current working directory

170
00:10:00.970 --> 00:10:02.730
and you'll see that I'm now moved into

171
00:10:02.730 --> 00:10:05.650
this new documents directory that I
created with MKDIR.

172
00:10:07.900 --> 00:10:10.060
So touch creates an empty file.

173
00:10:10.060 --> 00:10:15.010
So if I type, here again, touch, test
file, what that will do

174
00:10:15.010 --> 00:10:18.850
is that it will actually just create a
file called test underscore file.

175
00:10:18.850 --> 00:10:22.230
And so if I then list out everything
that's in my home directory,

176
00:10:22.230 --> 00:10:25.820
you'll see that now one of the files
listed is test underscore file.

177
00:10:25.820 --> 00:10:27.880
So if you need to create a file you use
touch.

178
00:10:29.800 --> 00:10:31.100
CP stands for copy.

179
00:10:31.100 --> 00:10:35.120
So suppose you want to take a file and
copy it into another file.

180
00:10:35.120 --> 00:10:38.520
What you do is pass copy two arguments.

181
00:10:38.520 --> 00:10:42.840
First is the file that you want to copy
and

182
00:10:42.840 --> 00:10:45.650
then the place that you want it to be
copied to.

183
00:10:45.650 --> 00:10:50.930
So for example if I type CP and then the
test file that I've created.

184
00:10:50.930 --> 00:10:52.730
And then a directory, documents.

185
00:10:52.730 --> 00:10:54.650
What it will do is it will take the test

186
00:10:54.650 --> 00:10:57.880
file and it will move it into the
documents directory.

187
00:10:59.270 --> 00:11:01.930
So if I copy that file there and then I
move

188
00:11:01.930 --> 00:11:05.840
into the documents directory by typing, CD
documents, and I list

189
00:11:05.840 --> 00:11:07.950
out list out the files, you'll see that
one of the

190
00:11:07.950 --> 00:11:11.170
files that is in that directory now is the
test file.

191
00:11:11.170 --> 00:11:15.050
You can then CD dot dot, and that will put
you back into your home directory.

192
00:11:18.030 --> 00:11:23.250
[SOUND] So CP can, CP can also be used for
copying the contents of directories.

193
00:11:24.290 --> 00:11:27.760
So suppose you want to move one directory
into another directory, you

194
00:11:27.760 --> 00:11:31.470
can do that but you need to use the dash R
flag.

195
00:11:31.470 --> 00:11:35.540
So the dash R is a flag that stands for
recursive.

196
00:11:35.540 --> 00:11:38.727
And so if you have the line CP.

197
00:11:38.727 --> 00:11:45.360
Dash R, so that's CP with a flag dash R,
documents to more documents, it will

198
00:11:45.360 --> 00:11:48.990
copy the entire folder, or the entire
directory

199
00:11:48.990 --> 00:11:53.070
documents into a new directory called more
documents.

200
00:11:53.070 --> 00:11:59.190
So for example, what we can do here is we
can use MKDIR to create more docs.

201
00:11:59.190 --> 00:12:00.820
And then what we can do is we can use

202
00:12:00.820 --> 00:12:04.900
this CP dash R command to move documents
into more documents.

203
00:12:06.000 --> 00:12:09.100
Then if we move in to the more docs
command using

204
00:12:09.100 --> 00:12:13.220
C or directory using CD and we loop, use
the is

205
00:12:13.220 --> 00:12:16.180
command to list everything in that
directory, we see that there's

206
00:12:16.180 --> 00:12:19.389
a test file in that directory because it's
been copied over.

207
00:12:21.680 --> 00:12:23.470
RN stands for remove.

208
00:12:23.470 --> 00:12:26.080
So, RN is sort of like delete.

209
00:12:26.080 --> 00:12:29.280
You basically use it to delete files that
you don't want.

210
00:12:29.280 --> 00:12:31.530
So for example if we list out the files in
my

211
00:12:31.530 --> 00:12:34.810
home directory, we now have all these new
files that we've created.

212
00:12:34.810 --> 00:12:37.400
Suppose we want to remove this test file.

213
00:12:37.400 --> 00:12:42.090
Then I just type RM space test underscore
file and it will remove that file.

214
00:12:42.090 --> 00:12:46.790
So, if I list things out again you'll see
that the test file is now missing.

215
00:12:50.140 --> 00:12:52.960
You can use RM to remove entire
directories

216
00:12:52.960 --> 00:12:56.020
and their contents by using the dash R
flag.

217
00:12:56.020 --> 00:13:00.100
So, in other words you can recursively
move all of the files in a directory.

218
00:13:00.100 --> 00:13:02.650
But you should be very careful when you do
this because

219
00:13:02.650 --> 00:13:06.446
there is no undo so if you delete it, it's
gone.

220
00:13:06.446 --> 00:13:11.060
So be very careful when you're using RM
dash R.

221
00:13:11.060 --> 00:13:16.310
So if I use in my home directory RM dash R
more docs.

222
00:13:16.310 --> 00:13:21.090
It will delete the more docs directory and
all of the files that were inside it.

223
00:13:21.090 --> 00:13:23.900
And so you can see, again, if I LS now

224
00:13:23.900 --> 00:13:26.890
after doing that, all of the more docs has
been deleted.

225
00:13:26.890 --> 00:13:33.780
MV stands for move, so with MV you can
move files between directories.

226
00:13:33.780 --> 00:13:37.270
So again, suppose I crate this new file
with touch.

227
00:13:37.270 --> 00:13:38.830
So I created that file.

228
00:13:38.830 --> 00:13:39.930
And suppose I want to move it into

229
00:13:39.930 --> 00:13:43.520
documents, then I would type MV space the
name

230
00:13:43.520 --> 00:13:45.830
of the file, new underscore file, and then

231
00:13:45.830 --> 00:13:48.780
the directory I wanted to move it to
documents.

232
00:13:48.780 --> 00:13:54.140
And so what I would end up with if I typed
ls now is that there wouldn't be a file in

233
00:13:54.140 --> 00:13:59.670
my main directory, but if I CD, I move to
the documents directory.

234
00:13:59.670 --> 00:14:02.100
And I list out everything that's in there.

235
00:14:02.100 --> 00:14:05.810
I end up seeing that I've moved the new
file into that directory.

236
00:14:08.280 --> 00:14:10.800
[SOUND] You can also use MV to rename
files.

237
00:14:10.800 --> 00:14:15.210
So if you move a file to another file with
a new name it will just change the name.

238
00:14:15.210 --> 00:14:17.810
So for example here if I list the files of
the

239
00:14:17.810 --> 00:14:21.590
directory I'm in then there's two files,
Test File and New File.

240
00:14:21.590 --> 00:14:24.230
And I want to change the name of new file.

241
00:14:24.230 --> 00:14:28.290
I can type MV, space, new underscore file.

242
00:14:28.290 --> 00:14:31.110
That's the file name I was, it was
previously.

243
00:14:31.110 --> 00:14:33.410
And I want to create it a renamed file.

244
00:14:33.410 --> 00:14:38.630
So I'm moving, I'm changing the name of
this file to renamed file.

245
00:14:38.630 --> 00:14:43.750
And then if I list out all the files that
exist now, now there's test file and

246
00:14:43.750 --> 00:14:48.660
renamed file, which had the contents that
were previously in new file.

247
00:14:48.660 --> 00:14:51.810
[SOUND] And so echo will print whatever
arguments you provide.

248
00:14:51.810 --> 00:14:57.950
So for example, if you to echo, new, hello
world!,

249
00:14:57.950 --> 00:15:01.330
like this, what it will do is just print
out hello world!

250
00:15:01.330 --> 00:15:02.950
Echo is very useful for printing out

251
00:15:05.310 --> 00:15:08.240
the contents of particular variables that
have

252
00:15:08.240 --> 00:15:10.630
been stored that we'll talk about later.

253
00:15:11.710 --> 00:15:14.150
Date will predict pre, pre, print the
date.

254
00:15:14.150 --> 00:15:17.040
So if you type date like this you'll get
the date

255
00:15:17.040 --> 00:15:20.515
that this actually in this case that the
slides were created.

256
00:15:20.515 --> 00:15:27.870
[SOUND] So, summary of commands are PWD,
which is printing the working directory.

257
00:15:27.870 --> 00:15:30.120
It's telling you what directory you're in.

258
00:15:30.120 --> 00:15:32.490
Clear, which clears the screen.

259
00:15:32.490 --> 00:15:37.150
LS, which lists the files in the current
working directory.

260
00:15:37.150 --> 00:15:40.720
CD, which allows you to change working
directories.

261
00:15:40.720 --> 00:15:45.040
MKDIR, which creates a new directory,
touch, which creates a new

262
00:15:45.040 --> 00:15:50.530
file, CP, which create, copies a file, RM,
which removes a

263
00:15:50.530 --> 00:15:53.890
file or directory if you use the dash R
command, or

264
00:15:53.890 --> 00:15:58.888
flag sorry, and MV means moving a file or
renaming a file.

265
00:15:58.888 --> 00:16:01.330
And then date and echo are ways to look

266
00:16:01.330 --> 00:16:03.670
at the date or to echo out a particular
command.