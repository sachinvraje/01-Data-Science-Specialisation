WEBVTT

1
00:00:04.380 --> 00:00:07.020
So subsetting a list is
a little bit different.

2
00:00:07.020 --> 00:00:10.020
Because you can use the double bracket or
the dollar sign operator.

3
00:00:10.020 --> 00:00:12.130
You can also use the single
bracket operator.

4
00:00:12.130 --> 00:00:15.730
So here I've got a list, the first element
is called, is a named element called foo.

5
00:00:15.730 --> 00:00:17.980
That's an ind, and
it's a sequence 1 through 4.

6
00:00:17.980 --> 00:00:21.610
And the second element is named bar,
and it's the number 0.6.

7
00:00:21.610 --> 00:00:23.990
So this is a list of two elements in it.

8
00:00:23.990 --> 00:00:27.050
I can extract the first element by
using the single square bracket.

9
00:00:27.050 --> 00:00:31.440
And I get, when I, remember the single
square bracket always returns the element

10
00:00:31.440 --> 00:00:33.040
that's the same class as the original.

11
00:00:33.040 --> 00:00:36.800
So if x is a list, than x bracket
1 is going to be a list too.

12
00:00:36.800 --> 00:00:39.870
So what I get back is a list
that has element call foo,

13
00:00:39.870 --> 00:00:42.010
which is a sequence 1 through 4.

14
00:00:42.010 --> 00:00:47.910
Now if I use, so if I use the double
bracket then if I said x double bracket 1,

15
00:00:47.910 --> 00:00:50.370
what I get back is just a sequence,
1 through 4.

16
00:00:50.370 --> 00:00:54.980
So, so the difference here is that in the
first example, I got a list that contained

17
00:00:54.980 --> 00:00:59.050
the sequence 1 through 4, and in the
second example, I got just the sequence.

18
00:00:59.050 --> 00:01:01.880
That's the difference between the single
bracket and the double bracket operator.

19
00:01:03.360 --> 00:01:05.430
In the next example here
I'm using a dollar sign.

20
00:01:05.430 --> 00:01:07.890
And so I'm saying, x dollar bar.

21
00:01:07.890 --> 00:01:09.040
And that what that mean is that,

22
00:01:09.040 --> 00:01:13.480
that gives me that element that
is associated with the name bar.

23
00:01:13.480 --> 00:01:16.554
So in that case it's the,
it's a single number 0.6.

24
00:01:16.554 --> 00:01:20.578
I can also use the double bracket
operator and pass in a string.

25
00:01:20.578 --> 00:01:25.121
So x double bracket quote bar is
the same as doing as x dollar bar and

26
00:01:25.121 --> 00:01:27.310
it just gives me 0.6.

27
00:01:27.310 --> 00:01:29.560
If I use the single bracket with the name,

28
00:01:29.560 --> 00:01:34.680
I can say x bracket quote bar, that gives
me a list with the element bar in it.

29
00:01:34.680 --> 00:01:37.455
So remember, because the single
bracket always returns a list if I'm

30
00:01:37.455 --> 00:01:38.900
going to subset a list.

31
00:01:38.900 --> 00:01:42.790
So the nice thing about being able
to subset an element using its name,

32
00:01:42.790 --> 00:01:45.590
is that you don't have to
remember where it is in the list.

33
00:01:45.590 --> 00:01:48.570
So if I couldn't remember whether
bar was the first element or

34
00:01:48.570 --> 00:01:51.470
was the second element,
I don't have to remember whether, what,

35
00:01:51.470 --> 00:01:54.110
where it is in order to
use the numeric index.

36
00:01:54.110 --> 00:01:56.550
I can just use its name,
and then I don't have to,

37
00:01:56.550 --> 00:01:59.690
then it will automatically extract that,
extract that element from the list.

38
00:02:01.540 --> 00:02:04.870
If you want to extract multiple
elements of a list then you need to

39
00:02:04.870 --> 00:02:06.370
use the single bracket operator.

40
00:02:06.370 --> 00:02:09.510
So for example, if I want the third,
the first and the third element here,

41
00:02:09.510 --> 00:02:13.570
in which case, which is the foo and
the baz element, I can pass a,

42
00:02:13.570 --> 00:02:19.230
a vector, a 1, 3, the numeric vector 1,
3 to x using the single bracket operator.

43
00:02:19.230 --> 00:02:22.270
And that returns to me a list with
the elements foo and the elements baz.

44
00:02:23.570 --> 00:02:26.020
So that's how I extract
multiple elements of a list.

45
00:02:26.020 --> 00:02:27.775
There's, you cannot use
the double bracket or

46
00:02:27.775 --> 00:02:31.550
the dollar sign operators when you only
extract multiple elements of a list.

47
00:02:34.410 --> 00:02:37.340
The nice thing about the double bracket
operator, which is different from

48
00:02:37.340 --> 00:02:41.350
the dollar sign, is that you can use
the double bracket operator to, to,

49
00:02:41.350 --> 00:02:45.410
to index it a list,
where the index itself was computed.

50
00:02:45.410 --> 00:02:48.350
So, notice that when I used
the dollar sign before, I had to,

51
00:02:48.350 --> 00:02:50.340
I actually typed out the word bar.

52
00:02:50.340 --> 00:02:52.700
I had to type out the name of the object.

53
00:02:52.700 --> 00:02:55.060
Sometimes the name of,
sorry the name of the element.

54
00:02:55.060 --> 00:03:00.320
But sometimes the name of the element is
actually the result of some computation.

55
00:03:00.320 --> 00:03:03.950
So for example here I've got a list
with three elements, foo, bar, and baz.

56
00:03:03.950 --> 00:03:09.970
And then I create a variable called
name which is actually the string foo.

57
00:03:09.970 --> 00:03:12.939
So if I use the double bracket
operator on this variable here.

58
00:03:13.950 --> 00:03:18.040
Notice that the there's no element in
the list that has the name, name in it.

59
00:03:19.040 --> 00:03:21.340
But there is an element in the list
that has the name foo in it.

60
00:03:21.340 --> 00:03:25.310
So now when I, when I pass this
variable called name into the double

61
00:03:25.310 --> 00:03:29.170
bracket operator, it returns me the,
the element that was associated with foo.

62
00:03:29.170 --> 00:03:31.820
because that's what the value
of the name variable is.

63
00:03:31.820 --> 00:03:35.455
So if I can,
if I compute the index that I want to use,

64
00:03:35.455 --> 00:03:37.750
then I have to use
the double bracket operator.

65
00:03:37.750 --> 00:03:41.520
If I use the dollar sign,
then it's going to literally look for

66
00:03:41.520 --> 00:03:44.710
an element of the list that's,
that has the word name associated with it,

67
00:03:44.710 --> 00:03:46.500
and that of course doesn't
exist in this list.

68
00:03:47.640 --> 00:03:50.680
So to use the dollar sign I
need to use a literal symbol.

69
00:03:54.240 --> 00:03:59.820
Now, the double bracket operator
can take an integer sequence in as,

70
00:03:59.820 --> 00:04:01.250
rather than a single number, and

71
00:04:01.250 --> 00:04:05.620
the way you can think of this is that
it kind of recurses into the list.

72
00:04:05.620 --> 00:04:08.338
So if you look at this
current list I've got here,

73
00:04:08.338 --> 00:04:13.020
with the first element a is another
list which has elements 10, 12 and 14.

74
00:04:13.020 --> 00:04:15.790
So suppose I wanted to
extract the number 14.

75
00:04:15.790 --> 00:04:19.810
Well, that's really the third
element of the first element, right?

76
00:04:19.810 --> 00:04:22.190
So it's the third element of the list,

77
00:04:22.190 --> 00:04:24.940
which happens to be the first
element of the other list.

78
00:04:24.940 --> 00:04:29.294
And so I can extract the 1,
3 element term by passing the vector 1,

79
00:04:29.294 --> 00:04:33.038
3 to it to the x list using
the double bracket operator.

80
00:04:33.038 --> 00:04:37.440
And that's equivalent to kind of doing
this double sub-setting of one and three.

81
00:04:37.440 --> 00:04:42.066
I can also extract the first element
of the second element by use,

82
00:04:42.066 --> 00:04:45.784
by passing the integer
vector 2,1 to get 3.14