WEBVTT

1
00:00:05.250 --> 00:00:08.148
So partial matching is
a handy tool which it,

2
00:00:08.148 --> 00:00:11.880
which it often saves you a lot
of typing at the command line.

3
00:00:11.880 --> 00:00:14.860
It's not particularly useful when you're
pro, when you're writing out programs and

4
00:00:14.860 --> 00:00:17.530
functions but it's very useful
when you're kind of working at

5
00:00:17.530 --> 00:00:20.310
the command like typing
things as fast as you can.

6
00:00:20.310 --> 00:00:23.350
So the idea with partial matching is that
it works with the double bracket and

7
00:00:23.350 --> 00:00:25.550
the single, and the dollar sign operator.

8
00:00:25.550 --> 00:00:28.580
So, suppose I have a list x
which has an element in it

9
00:00:28.580 --> 00:00:32.048
called aardvark which is
the sequence 1 through 5.

10
00:00:32.048 --> 00:00:37.310
And suppose typing out the word aardvark
every single time is a bit of a pain so

11
00:00:37.310 --> 00:00:38.940
I'm just going to type the word a.

12
00:00:38.940 --> 00:00:43.610
Well, the way the dollar sign works by
default is that it looks for it looks for

13
00:00:43.610 --> 00:00:46.580
a name in this list,
that matches the letter a.

14
00:00:46.580 --> 00:00:48.520
In this case there's only one element.

15
00:00:48.520 --> 00:00:53.200
And so you get you get the word aardvark.

16
00:00:53.200 --> 00:00:54.690
And then it gives me the, the el,

17
00:00:54.690 --> 00:00:58.100
the object associated with aardvark,
which is the sequence 1 through 5.

18
00:00:58.100 --> 00:01:01.910
So if I use the double bracket operator
things are a little bit different.

19
00:01:01.910 --> 00:01:05.320
So what the double bracket operator
expects, is that it's going to be,

20
00:01:05.320 --> 00:01:08.400
that the name that you pass it is
going to be an exact match for

21
00:01:08.400 --> 00:01:10.110
one of the names in the list.

22
00:01:10.110 --> 00:01:13.730
So by default the double bracket operator
doesn't do partial matching like

23
00:01:13.730 --> 00:01:15.260
the dollar sign does.

24
00:01:15.260 --> 00:01:20.400
So now when I pass x double bracket
a what happens is I get null back,

25
00:01:20.400 --> 00:01:24.860
because there's no element of
the list that has the name a.

26
00:01:24.860 --> 00:01:27.770
But there's a some, a second argument
that you can pass to the dou,

27
00:01:27.770 --> 00:01:30.790
double bracket operator,
which is the exact argument.

28
00:01:30.790 --> 00:01:33.760
And if you specify that
exact equals false.

29
00:01:33.760 --> 00:01:37.350
And then when I pass at x double bracket
a, it gives me the sequence 1 through 5,

30
00:01:37.350 --> 00:01:42.090
because that's the one that mat,
matches the letter a the closest.