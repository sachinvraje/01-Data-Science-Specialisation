WEBVTT

1
00:00:00.610 --> 00:00:03.610
This is just a simple note on vectorized
operations in R.

2
00:00:03.610 --> 00:00:06.960
So, vectorized operations, is one of the
features of the R language

3
00:00:06.960 --> 00:00:10.170
that make it, that makes it easy to use,
on the command line.

4
00:00:10.170 --> 00:00:13.210
It makes very, kind of, nice to write
code, without

5
00:00:13.210 --> 00:00:16.060
having to do lots of looping, and things
like that.

6
00:00:16.060 --> 00:00:19.628
And so, it's kind of a natural thing to
have in a computational language.

7
00:00:19.628 --> 00:00:22.490
Many other types of languages, like MATLAB
have this kind of feature.

8
00:00:24.130 --> 00:00:26.120
so, the idea with vectorized operations

9
00:00:26.120 --> 00:00:30.140
is, is that things can happen in parallel,

10
00:00:30.140 --> 00:00:32.730
when you, for example want to do a
computation.

11
00:00:32.730 --> 00:00:35.820
For example, suppose I got two vectors
here x and y.

12
00:00:35.820 --> 00:00:40.310
x is the sequence one through four and y
is the sequence six through nine.

13
00:00:40.310 --> 00:00:42.310
And I want to add the two vectors
together.

14
00:00:42.310 --> 00:00:44.270
Now, when I say I want to add them, what I
mean

15
00:00:44.270 --> 00:00:46.170
is I want to add the first element of x to
the

16
00:00:46.170 --> 00:00:49.120
first element of y, the second element of
x to the second

17
00:00:49.120 --> 00:00:52.190
element of y, et cetera, the third element
to the third element.

18
00:00:52.190 --> 00:00:54.580
So I want to kind of do things in parallel
like that.

19
00:00:54.580 --> 00:00:57.000
So, in other languages you might have to
use a loop to do that,

20
00:00:57.000 --> 00:01:00.100
so you'd loop through each element and
kind of add them one by one.

21
00:01:00.100 --> 00:01:03.885
But in R you can just use the plus to, on
the two vectors, and

22
00:01:03.885 --> 00:01:06.890
it'll just add them together so x plus y
kind of does what you would expect.

23
00:01:06.890 --> 00:01:15.550
It adds 1 to 6, 2 to 7, 3 to 8, and 4 to
9, so you get the vector 7, 9, 11, 13.

24
00:01:15.550 --> 00:01:17.848
similarly, you can use the greater than,
or

25
00:01:17.848 --> 00:01:21.280
less than symbols to, give you logical
vectors.

26
00:01:21.280 --> 00:01:23.340
For example, x greater than 2.

27
00:01:23.340 --> 00:01:26.230
So well x is actually a, a vector of 4
numbers.

28
00:01:26.230 --> 00:01:29.860
So, which one, so, which number are you
comparing to 2?

29
00:01:29.860 --> 00:01:32.300
Well, the, the vectorized operation
compares all

30
00:01:32.300 --> 00:01:34.890
the numbers to 2, and it gives you

31
00:01:34.890 --> 00:01:40.180
a vector of falses and trues depending on
which numbers happen to be bigger than 2.

32
00:01:40.180 --> 00:01:41.570
So you can also use greater than equal to,

33
00:01:41.570 --> 00:01:43.030
and that'll tell you which numbers are
greater than and

34
00:01:43.030 --> 00:01:47.550
equal to 2, and the double equals sign,
tests for equality.

35
00:01:47.550 --> 00:01:51.860
So it'll take each element of y and test
to see whether it's equal to 8.

36
00:01:51.860 --> 00:01:54.580
other, and the other kind of,

37
00:01:54.580 --> 00:01:56.970
or arithmetic operations like
multiplication, by

38
00:01:56.970 --> 00:01:59.890
the asterisk, and division, by the

39
00:01:59.890 --> 00:02:01.990
solidus, are all vectorized types of
operation.

40
00:02:01.990 --> 00:02:04.400
So when you want to multiply or divide,
add,

41
00:02:04.400 --> 00:02:08.070
subtract, vectors, you just you can do the
natural

42
00:02:08.070 --> 00:02:11.270
thing, just add them together or multiply
them together, and they will

43
00:02:11.270 --> 00:02:14.570
be, and they will be the operation will be
done in parallel.

44
00:02:16.430 --> 00:02:19.570
Similarly you can do, you can do You can
add make,

45
00:02:19.570 --> 00:02:22.220
you can add and subtract, and multiply and
divide matrices together.

46
00:02:22.220 --> 00:02:24.250
So it's useful to know this because

47
00:02:24.250 --> 00:02:26.400
there are different types of mult matrix
multiplication.

48
00:02:26.400 --> 00:02:29.770
So I've created two matrices here, x and
y.

49
00:02:29.770 --> 00:02:33.430
X is the matrix 1 through 4, it's a two by
two matrix.

50
00:02:33.430 --> 00:02:37.570
And y is a, is a matrix that's all tens,
it's also a two by two matrix.

51
00:02:37.570 --> 00:02:42.560
So if I just do x times y, this is not a
mat, matrix multiplication.

52
00:02:42.560 --> 00:02:44.690
This is an element-wise multiplication.

53
00:02:44.690 --> 00:02:46.870
So the first, the kind of the 1, 1 element

54
00:02:46.870 --> 00:02:49.638
of x is multiplied by the 1, 1 element of
y.

55
00:02:49.638 --> 00:02:51.950
And the 2,2 element is multiplying the 2,2

56
00:02:51.950 --> 00:02:53.530
element of, of the other matrix, et
cetera.

57
00:02:53.530 --> 00:02:57.220
So, each element is multiplied, together
in parallel.

58
00:02:57.220 --> 00:02:58.390
Same when you do division.

59
00:02:58.390 --> 00:03:01.010
This is not a matrix inverse or something
like that, this

60
00:03:01.010 --> 00:03:04.270
is just dividing one matrix, literally
element by element by another.

61
00:03:05.270 --> 00:03:08.980
So if you want to do a true matrix
multiplication, you have

62
00:03:08.980 --> 00:03:13.650
to use the %*%, that's the symbol for a
matrix multiplication.

63
00:03:14.750 --> 00:03:16.450
So when you, so, this is just, that's

64
00:03:16.450 --> 00:03:19.740
it for vectorized operations for now,
You'll see these

65
00:03:19.740 --> 00:03:24.150
a lot more often later on, but the idea,
but I just wanted to introduce this idea,

66
00:03:24.150 --> 00:03:26.350
because it makes code easier to write.

67
00:03:26.350 --> 00:03:29.260
And for those of you who are kind of used
to other types

68
00:03:29.260 --> 00:03:30.810
of programming languages, if you've
programmed

69
00:03:30.810 --> 00:03:32.090
in languages where you can't do this

70
00:03:32.090 --> 00:03:36.760
kind of thing, it's sometimes, it's common
to kind of reflexively go to

71
00:03:36.760 --> 00:03:38.860
something like a for loop or a while loop
or whatever it is.

72
00:03:39.990 --> 00:03:42.300
But in the but in a language like R, you
can

73
00:03:42.300 --> 00:03:44.880
just use the vectorized operations to make
the code a lot simpler.