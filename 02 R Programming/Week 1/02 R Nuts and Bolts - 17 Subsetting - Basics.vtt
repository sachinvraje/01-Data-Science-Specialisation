WEBVTT

1
00:00:00.710 --> 00:00:03.731
[NOISE] I'm going to continue
to talk about data types, and

2
00:00:03.731 --> 00:00:05.086
basic operations in R.

3
00:00:05.086 --> 00:00:08.460
In particular in this video I'm going to
talk about subsetting objects in R.

4
00:00:08.460 --> 00:00:12.160
So there are a couple of different
operators that you can use,

5
00:00:12.160 --> 00:00:15.480
to extract subsets of diff, of R objects.

6
00:00:15.480 --> 00:00:16.970
There's the single bracket.

7
00:00:16.970 --> 00:00:18.290
Sorry, the single square bracket.

8
00:00:18.290 --> 00:00:19.380
The double square bracket,

9
00:00:19.380 --> 00:00:23.620
which we saw in the previous video,
and there's the dollar sign.

10
00:00:23.620 --> 00:00:29.070
So the sing, the basic kind of principles
to remember here is that the single

11
00:00:29.070 --> 00:00:33.502
square bracket always returns an object
of the same class as the original.

12
00:00:33.502 --> 00:00:37.200
So the subset a vector,
you're going to get back a vector.

13
00:00:37.200 --> 00:00:39.960
If you subset a list,
you're going to get back a list.

14
00:00:39.960 --> 00:00:44.710
Any time you used the single bracket
operator to subset an object,

15
00:00:44.710 --> 00:00:47.350
you'll get the same,
an object of the same class back.

16
00:00:48.675 --> 00:00:52.890
si, furthermore the single
bracket operator can be used to

17
00:00:52.890 --> 00:00:55.170
select more than one element of an object.

18
00:00:56.200 --> 00:00:58.400
With one ex,
exception that we'll get to later.

19
00:00:58.400 --> 00:01:02.120
But double bracket operator is used
to extract elements of a list or

20
00:01:02.120 --> 00:01:03.598
a data frame.

21
00:01:03.598 --> 00:01:07.880
It can only be used to exa,
extract a single element and.

22
00:01:07.880 --> 00:01:10.010
Of that object, either the list or
the data frame.

23
00:01:10.010 --> 00:01:13.270
And the class of the returned object will
not necessarily be a list or a data frame.

24
00:01:13.270 --> 00:01:17.380
So the idea with the double bracket
operator is that, remember that lists can,

25
00:01:17.380 --> 00:01:20.940
can, can hold things that
are of many different classes.

26
00:01:20.940 --> 00:01:22.580
They don't all have to be the same.

27
00:01:22.580 --> 00:01:26.170
So, the first element might be a vec
a numeric vector, the second element might

28
00:01:26.170 --> 00:01:29.700
be a data frame, the third element
might be a complex vector, et cetera.

29
00:01:29.700 --> 00:01:33.302
And so when you use the double bracket
operator to extract an element of a list,

30
00:01:33.302 --> 00:01:36.110
the oh, the object that comes back maybe,

31
00:01:36.110 --> 00:01:39.890
may not be a list, it may be an object
of a totally different class.

32
00:01:39.890 --> 00:01:43.124
So that's what the double
brack operator is useful for.

33
00:01:43.124 --> 00:01:46.428
The dollar sign is used to extract
elements of a list, again of a list or

34
00:01:46.428 --> 00:01:48.100
data frame that have a name.

35
00:01:48.100 --> 00:01:51.000
Very similar objects can have names and
the reason,

36
00:01:51.000 --> 00:01:54.500
one of the reasons you've
used names in an object is so

37
00:01:54.500 --> 00:01:57.360
that you can reference elements of
the object by the different names.

38
00:01:59.060 --> 00:02:02.690
Otherwise the, the semantics of the dollar
sign are similar to the double bracket in

39
00:02:02.690 --> 00:02:05.570
the sense that when you use the dollar
sign to extract an element of

40
00:02:05.570 --> 00:02:10.660
an object it may or may not be of
the same class as the original object.

41
00:02:10.660 --> 00:02:11.780
So, here is the first,

42
00:02:11.780 --> 00:02:15.910
the first example, a very simple vector,
a character vector called x.

43
00:02:15.910 --> 00:02:16.660
And and

44
00:02:16.660 --> 00:02:20.460
I'm going to use the single bracket
operator to extract the first element.

45
00:02:20.460 --> 00:02:22.650
So here, what I get back is a,

46
00:02:22.650 --> 00:02:25.787
is another character vector with
the single element a in it.

47
00:02:25.787 --> 00:02:28.940
If I, if I use, if I try to
extract the second element of x,

48
00:02:28.940 --> 00:02:34.050
what I would get returned back to me is a
character vector with the element b in it.

49
00:02:34.050 --> 00:02:36.380
I could also extract
a sequence of elements so

50
00:02:36.380 --> 00:02:40.200
if I say, If I, If I want to get
the first four elements of x I can cre,

51
00:02:40.200 --> 00:02:44.570
construct the sequence one through
four and then I get a, b, c, c.

52
00:02:44.570 --> 00:02:47.700
So in these three examples
here what I've done is I,

53
00:02:47.700 --> 00:02:52.960
I, is I subset the vector x using a
numeric index so the numeric index is one,

54
00:02:52.960 --> 00:02:55.590
two or the sequence one through four.

55
00:02:55.590 --> 00:02:59.650
The oth, another type of index that you
can use is the, is a logical index.

56
00:02:59.650 --> 00:03:05.150
So, in this next example here, I'm
going to subset the vector x and I want,

57
00:03:05.150 --> 00:03:08.420
I only want all the elements were,
that are greater than or

58
00:03:08.420 --> 00:03:11.290
equ, sorry,
that are greater than the letter a, right?

59
00:03:11.290 --> 00:03:14.150
So, you might,
it might seem strange to you that

60
00:03:14.150 --> 00:03:17.450
I'm using the greater than sign
with letters instead of numbers but

61
00:03:17.450 --> 00:03:20.300
there is a lexicographical
ordering to the letters, and

62
00:03:20.300 --> 00:03:24.640
all the letters that are greater than
a are letters like b, c, d, e, et cetera.

63
00:03:24.640 --> 00:03:28.220
So what I get returned to me is
a character vector that only

64
00:03:28.220 --> 00:03:29.930
contains the letters
that are greater than a.

65
00:03:29.930 --> 00:03:31.330
So, here I've got b, c, c, and d.

66
00:03:31.330 --> 00:03:37.560
The other thing I can do,
is I can create a logical vector,

67
00:03:37.560 --> 00:03:41.851
which here I call u, which is just
the it's a, it's, it tells it's a true or

68
00:03:41.851 --> 00:03:42.812
false vector, which tells me,

69
00:03:42.812 --> 00:03:46.200
which tells me which elements of
the vector x are greater than a.

70
00:03:46.200 --> 00:03:50.800
So, if I print out u here I can see that
the, the first element is equal to a, so

71
00:03:50.800 --> 00:03:52.240
it's not greater than a.

72
00:03:52.240 --> 00:03:54.440
Then, the next four are greater than a,

73
00:03:54.440 --> 00:03:57.340
but then the last element is equal to a,
so again, that's false.

74
00:03:57.340 --> 00:04:01.370
And so, I can subset the vector
x with this u vector, and

75
00:04:01.370 --> 00:04:04.520
then I get out all the elements
that are greater than a.

76
00:04:04.520 --> 00:04:07.360
So there are two types of
indices that I use here,

77
00:04:07.360 --> 00:04:10.130
one, the first type
with the numeric index.

78
00:04:10.130 --> 00:04:12.220
And the second type was the logical index.