WEBVTT

1
00:00:03.430 --> 00:00:08.370
This video is about the most important
function in all R, the str function.

2
00:00:08.370 --> 00:00:10.180
This function is really handy.

3
00:00:10.180 --> 00:00:12.500
It's really useful.
I use it all the time.

4
00:00:12.500 --> 00:00:14.640
And you can use it in all kinds of
situations

5
00:00:14.640 --> 00:00:16.830
just to help you out, to look at R
objects.

6
00:00:16.830 --> 00:00:22.220
So the idea behind the str function is, is
that it's suppose to compactly display the

7
00:00:22.220 --> 00:00:24.990
internal structure of an R object, so str,

8
00:00:24.990 --> 00:00:28.060
str, you can think of as being, meaning
structure.

9
00:00:28.060 --> 00:00:28.560
So it's a very

10
00:00:28.560 --> 00:00:31.810
simple diagnostic function.
It's very versatile.

11
00:00:31.810 --> 00:00:34.960
And, the idea's that it's, you can use it
as, like, an alternative to summary.

12
00:00:34.960 --> 00:00:38.850
You want to look at an object, and see,
and see you know, what is it.

13
00:00:38.850 --> 00:00:40.360
And, what's in it.

14
00:00:40.360 --> 00:00:43.150
You can use summary which will often be
very useful.

15
00:00:43.150 --> 00:00:44.618
But str is another option.

16
00:00:44.618 --> 00:00:48.150
It's partic, particularly well suited for
compactly

17
00:00:48.150 --> 00:00:51.720
displaying large lists which may contain
nested lists.

18
00:00:53.080 --> 00:00:53.710
And also

19
00:00:53.710 --> 00:00:58.888
and, and its goal is to produce roughly
one line of output per basic object.

20
00:00:58.888 --> 00:01:00.600
For example so if you give it a simple
object

21
00:01:00.600 --> 00:01:03.130
like a vector, it'll give you one line of
output backup.

22
00:01:03.130 --> 00:01:04.530
It will print it to the console.

23
00:01:04.530 --> 00:01:10.660
And so the basic goal of str is to answer
the question, what's in this object?

24
00:01:10.660 --> 00:01:13.550
I'm going to start up R here and I'm going
to

25
00:01:13.550 --> 00:01:16.190
just give a little demonstration of how
the str function can work.

26
00:01:16.190 --> 00:01:19.210
So here, you can apply str to itself and

27
00:01:19.210 --> 00:01:23.420
see it's a function that takes an object.
It can take any R object.

28
00:01:23.420 --> 00:01:25.821
So, so you can apply str to other
functions.

29
00:01:25.821 --> 00:01:28.060
So let's say I want to know what the lm
function does.

30
00:01:28.060 --> 00:01:31.090
So here, what it gives you it gives

31
00:01:31.090 --> 00:01:33.790
you the, the function arguments for the lm
function.

32
00:01:33.790 --> 00:01:36.783
So just, so here you can see it's a very
brief summary, you

33
00:01:36.783 --> 00:01:40.690
know, take the first argument's a formula,
the second argument's data, et cetera.

34
00:01:40.690 --> 00:01:42.760
I can look at maybe ls function and it

35
00:01:42.760 --> 00:01:44.310
gives me, you know, what are the arguments
for the

36
00:01:44.310 --> 00:01:45.010
LS function?

37
00:01:46.020 --> 00:01:47.730
So if you want to look at some data,
though.

38
00:01:47.730 --> 00:01:50.900
Let's say I'm going to generate some
normal random variables here, 100

39
00:01:50.900 --> 00:01:54.320
of them, let's say mean two variant, and
standard deviation four.

40
00:01:55.650 --> 00:01:58.040
Now one thing you can do is, is just do
summary on x,

41
00:01:58.040 --> 00:02:01.150
and that will give you like a five number
summary plus the mean.

42
00:02:01.150 --> 00:02:05.910
So you get the mean, median that is 25th,
75th percentiles and the min and the max.

43
00:02:05.910 --> 00:02:09.330
So that gives you a rough sense of kind of
what the range is and how

44
00:02:09.330 --> 00:02:10.460
it varies.

45
00:02:10.460 --> 00:02:14.130
You can also call str on x and it will
give you a little bit more information.

46
00:02:14.130 --> 00:02:15.730
So it'll give you a one line output.

47
00:02:15.730 --> 00:02:20.280
It tells you that x is a numeric vector.
There are 100 elements.

48
00:02:20.280 --> 00:02:23.920
And then, and it'll give you the first
five numbers in this vector.

49
00:02:23.920 --> 00:02:25.930
So you can get a sense of kind of what the
data looked like.

50
00:02:27.500 --> 00:02:29.990
So you can apply str to other types of
vectors.

51
00:02:29.990 --> 00:02:32.770
So here I can create like a factor
variable.

52
00:02:34.210 --> 00:02:34.740
So this

53
00:02:34.740 --> 00:02:36.680
is the factor that has 40 levels and each
one

54
00:02:36.680 --> 00:02:38.810
is repeated ten times so if I call str on
it.

55
00:02:39.950 --> 00:02:42.060
And it'll give me a one line output again.

56
00:02:42.060 --> 00:02:44.960
So here, it tells me it's a factor.
It's got 40 levels.

57
00:02:44.960 --> 00:02:48.130
The level, the first four of them are
named 1, 2, 3 and 4.

58
00:02:48.130 --> 00:02:50.610
So that's not particularly interesting.

59
00:02:50.610 --> 00:02:53.460
And then here, I've said the first couple
of elements of

60
00:02:53.460 --> 00:02:57.850
this factor are all in the, k-, all have
the label, one.

61
00:02:57.850 --> 00:02:59.890
You can also call summary on a factor, and
you

62
00:02:59.890 --> 00:03:02.010
can see that the output's a little bit
different.

63
00:03:02.010 --> 00:03:04.460
And what this does is it, is it gives you

64
00:03:04.460 --> 00:03:07.020
the number of elements in each of the 40
different levels.

65
00:03:07.020 --> 00:03:09.150
So that's another piece of data that's not

66
00:03:09.150 --> 00:03:13.700
quite as compact of output as str gives
you.

67
00:03:13.700 --> 00:03:17.200
So you can use str for other types of data
types.

68
00:03:17.200 --> 00:03:19.110
So here, I can, I can load like a data
frame.

69
00:03:20.554 --> 00:03:21.940
Here's the airquality data set.

70
00:03:21.940 --> 00:03:23.318
So, you know, if I look at the airquality
data

71
00:03:23.318 --> 00:03:24.910
set, I can use the head function to look
at the

72
00:03:24.910 --> 00:03:27.630
first six rows, or I can call str

73
00:03:29.840 --> 00:03:34.640
to get a little some different output.
So here, it tells me it's a data frame.

74
00:03:34.640 --> 00:03:36.600
It tells me that there's a 153

75
00:03:36.600 --> 00:03:38.680
observations, so 153 rows in this data
frame

76
00:03:38.680 --> 00:03:43.000
with, of six variables and then for each
variable, it, it gives me a little output.

77
00:03:43.000 --> 00:03:45.240
So it tells me that the name of the first
variable is Ozone.

78
00:03:45.240 --> 00:03:46.090
It's an integer.

79
00:03:47.300 --> 00:03:50.800
Variable and, and here are the first could
of observations.

80
00:03:50.800 --> 00:03:53.520
You can see there are some NAs there, so
that's useful to know.

81
00:03:53.520 --> 00:03:55.306
The second variable is called Solar.R, and

82
00:03:55.306 --> 00:03:58.180
it's also an integer, and you can see the,
the first couple of values.

83
00:03:58.180 --> 00:04:03.435
So, the Str output here is very useful for
kind of just getting a quick examination

84
00:04:03.435 --> 00:04:09.030
of data that you might have in R and what
the structure of different R objects is.

85
00:04:10.150 --> 00:04:11.470
We can take this a little bit farther, so

86
00:04:11.470 --> 00:04:13.682
for example, we could create a little
matrix here.

87
00:04:13.682 --> 00:04:16.090
I'm going to put some random normals in
there.

88
00:04:18.490 --> 00:04:22.180
That will be a 10 by 10 matrix.
I'll call str on m.

89
00:04:22.180 --> 00:04:23.780
See, it will give me a little bit more
information.

90
00:04:23.780 --> 00:04:25.590
So now it knows that it's a matrix.

91
00:04:25.590 --> 00:04:28.850
It'll say that it's a, it's a
two-dimensional array.

92
00:04:28.850 --> 00:04:32.510
That it's got 10 rows and 10 columns.
And here are the first couple of elements.

93
00:04:32.510 --> 00:04:35.648
So that's going to be the first column
that you're seeing there.

94
00:04:35.648 --> 00:04:37.936
So if I, so if I just print out the first
column here,

95
00:04:37.936 --> 00:04:41.090
you'll see that it, that's what it's
giving me in the str output.

96
00:04:41.090 --> 00:04:43.530
The last thing I'll do here

97
00:04:43.530 --> 00:04:46.928
is create a little list by using the split
function and see how

98
00:04:46.928 --> 00:04:50.830
str can look at the list and give a
compact summary of it.

99
00:04:50.830 --> 00:04:52.800
So, I'm just going to take this air
quality

100
00:04:52.800 --> 00:04:55.910
data frame And split it by the month.

101
00:04:55.910 --> 00:05:00.990
So here I go to airquality, going to split
it by the month variable.

102
00:05:03.530 --> 00:05:05.095
So now if I call str on S you'll see,

103
00:05:05.095 --> 00:05:07.380
well there's a little bit of output that
flies by.

104
00:05:07.380 --> 00:05:10.930
You see now this is a list, that contains
five different data

105
00:05:10.930 --> 00:05:14.110
frames where each data frame corresponds
to the data for a given month.

106
00:05:14.110 --> 00:05:16.432
So the months are, the data are only
collected over

107
00:05:16.432 --> 00:05:19.536
five different months so that's why
there's only five elements.

108
00:05:19.536 --> 00:05:23.280
So here you can see that the month, the
month five, which is May has

109
00:05:23.280 --> 00:05:25.412
31 observations on six variables and
that's a

110
00:05:25.412 --> 00:05:27.490
little bit of what the data looked like.

111
00:05:27.490 --> 00:05:29.050
And you'll see for June,

112
00:05:29.050 --> 00:05:31.010
here, there's 30 observations on six

113
00:05:31.010 --> 00:05:32.970
variables again, same six variables, of
course.

114
00:05:32.970 --> 00:05:35.200
And that's what the data look like there.

115
00:05:35.200 --> 00:05:38.770
And then for July, the data are here.
And August and September.

116
00:05:38.770 --> 00:05:41.570
So you can see the you can have a
representation

117
00:05:41.570 --> 00:05:45.710
of this split list that's kind of, that's
not as compact

118
00:05:45.710 --> 00:05:47.570
as it was before but it's about as compact
as you

119
00:05:47.570 --> 00:05:50.660
can make it and str will provide a very
nice summary.

120
00:05:50.660 --> 00:05:51.780
You can take a quick look at the data.

121
00:05:51.780 --> 00:05:54.730
See if there's any problems.
See if there's missing values and

122
00:05:54.730 --> 00:05:57.840
get a sense of what to do next.
So that's the str function.

123
00:05:57.840 --> 00:06:00.975
I'll, I'll repeat again, I think it's the
most useful function

124
00:06:00.975 --> 00:06:02.910
in all of R and you can use it in all
cases.

125
00:06:02.910 --> 00:06:04.900
I encourage you to use it anytime you have

126
00:06:04.900 --> 00:06:06.540
an R object and, you don't know what's
there.