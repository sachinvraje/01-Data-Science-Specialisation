WEBVTT

1
00:00:04.185 --> 00:00:06.913
Now, we've talked about how to
simulate random numbers from

2
00:00:06.913 --> 00:00:09.000
simple probability solutions.

3
00:00:09.000 --> 00:00:12.722
But the question now is how,
what if we want to assimilate data from a,

4
00:00:12.722 --> 00:00:13.450
from a model.

5
00:00:13.450 --> 00:00:15.360
So for example, like a linear model.

6
00:00:15.360 --> 00:00:18.020
So I've got a fairly
simple linear model here.

7
00:00:18.020 --> 00:00:21.290
It has a single predictor, x and
it's going to have random noise, what I

8
00:00:21.290 --> 00:00:26.360
call epsilon that, that has a normal
distribution with standard deviation two.

9
00:00:26.360 --> 00:00:30.780
There is, the outcome is going to be
generated by, by, use, using these two

10
00:00:30.780 --> 00:00:33.990
regression coefficients around intercept
beta knot and, and a slope beta one.

11
00:00:33.990 --> 00:00:37.100
And I've got I'm going to assume
that beta knot is equal to 0.5 and

12
00:00:37.100 --> 00:00:38.420
beta 1 is equal to 2.

13
00:00:38.420 --> 00:00:39.910
So the question is,

14
00:00:39.910 --> 00:00:44.100
how do I simulate from this model
now that I've specified what it is?

15
00:00:44.100 --> 00:00:46.260
So I here, at first I set the seed.

16
00:00:46.260 --> 00:00:47.940
It's always very important
to set that seed.

17
00:00:47.940 --> 00:00:50.110
So I set it to 20.

18
00:00:50.110 --> 00:00:54.510
I generate x the predictor, which is,
has a standard normal distribution.

19
00:00:54.510 --> 00:00:57.300
I generate epsilon,
which is going to have a standard

20
00:00:57.300 --> 00:00:59.970
a normal distribution with mean
zero of standard deviation two.

21
00:00:59.970 --> 00:01:02.200
And then I'm going to add
them all together by,

22
00:01:02.200 --> 00:01:05.160
and after multiplying the regression
coefficients to generate my y.

23
00:01:05.160 --> 00:01:11.220
And so, from the summary here,
you see that y has roughly a mean of 0.68.

24
00:01:11.220 --> 00:01:15.980
And it ha, and
it ranges from about minus 6 to plus 6.

25
00:01:15.980 --> 00:01:18.030
And then I can plot the data
to see what they look like.

26
00:01:18.030 --> 00:01:19.240
And here they are on the next slide.

27
00:01:20.750 --> 00:01:23.090
So this is the plot of
the x that I simulated.

28
00:01:23.090 --> 00:01:25.060
And the y that I simulated
from the linear model.

29
00:01:25.060 --> 00:01:29.766
And you can see that they very clearly
have a linear relationship according that

30
00:01:29.766 --> 00:01:31.628
follows the model that we specify

31
00:01:35.552 --> 00:01:38.360
So just a slight variation
of the previous example.

32
00:01:38.360 --> 00:01:41.920
What if x is a, instead of x
being a normal random variable,

33
00:01:41.920 --> 00:01:46.740
what if x is a binary random variable, so
member it, maybe it represents gender or

34
00:01:46.740 --> 00:01:49.770
maybe it's some treatment versus
control or something like that.

35
00:01:49.770 --> 00:01:52.750
So here, and it's very simple,
I can generate binary data from the,

36
00:01:52.750 --> 00:01:56.880
using the binomial distribution and
the rbinom function.

37
00:01:56.880 --> 00:01:58.480
So, I set the seed again.

38
00:01:58.480 --> 00:02:01.273
And I generate a 100 binomial
random variables and

39
00:02:01.273 --> 00:02:04.408
these are going to have these,
this, this if from, this comes from

40
00:02:04.408 --> 00:02:08.080
the binomial distribution which is
n equals to 1 and p equals to half.

41
00:02:08.080 --> 00:02:12.050
So, the probability of one
is going to be equal to 0.5.

42
00:02:12.050 --> 00:02:14.120
So I generate a hundred of those.

43
00:02:14.120 --> 00:02:16.290
And then I generate my
normal random variables.

44
00:02:16.290 --> 00:02:21.030
My normal error term which is going to
be mean zero and standard deviation two.

45
00:02:21.030 --> 00:02:24.360
And then I add them all together
which should produce my y.

46
00:02:24.360 --> 00:02:26.090
So now I look at the summary of y.

47
00:02:26.090 --> 00:02:31.145
I see the mean is about 1.4, and the range
is about from minus 3 to six or seven.

48
00:02:31.145 --> 00:02:32.910
So when I, now when I plot the data,

49
00:02:32.910 --> 00:02:37.640
of course they'll look very different,
because the x variable is binary.

50
00:02:37.640 --> 00:02:40.190
But the y variable is still continuous,
it's normal.

51
00:02:40.190 --> 00:02:43.330
So here you can see that there's,
there appears to be a pretty clear,

52
00:02:43.330 --> 00:02:48.059
again, linear trend when, between going
from x equals to 0 and x equals to 1.

53
00:02:50.330 --> 00:02:53.440
Now suppose you want to simulate from
a slightly more complicated model

54
00:02:53.440 --> 00:02:56.730
a generalized linear model perhaps
with a Poisson distribution.

55
00:02:56.730 --> 00:03:00.110
And so, for example, you might want to
simulate some outcome data that are,

56
00:03:00.110 --> 00:03:02.540
that count variables,
instead of continuous variable.

57
00:03:02.540 --> 00:03:06.020
So we have to use a slightly
more complicated approach, to do

58
00:03:06.020 --> 00:03:09.570
this in particular, because the error
distribution is not going to be normal.

59
00:03:09.570 --> 00:03:11.720
It's going to be a a Poisson distribution.

60
00:03:11.720 --> 00:03:15.780
And so, let's assume that the outcome y
has a Poisson distribution with mean mu.

61
00:03:15.780 --> 00:03:21.570
And that the log of mu follows a linear
model with a intercept beta knot and

62
00:03:21.570 --> 00:03:22.590
a slope beta one.

63
00:03:22.590 --> 00:03:25.190
So x is going to be one of our predictors.

64
00:03:25.190 --> 00:03:27.410
So let's assume that beta knot is 0.5.

65
00:03:27.410 --> 00:03:28.860
And beta one is 0.3.

66
00:03:28.860 --> 00:03:33.140
So how do we simulate from this
model to get our Poisson on data?

67
00:03:33.140 --> 00:03:36.215
So so we need to use
the rpois function for this.

68
00:03:36.215 --> 00:03:40.900
And so we first set the seed as always,
and we generate our predictor variable, x.

69
00:03:40.900 --> 00:03:43.176
Which is going to have
a standard normal distribution.

70
00:03:43.176 --> 00:03:47.600
Then we're going to simulate, generate
our lin, linear predictor log of mu.

71
00:03:47.600 --> 00:03:50.120
Which is just adding the slope and
this, the intercept and

72
00:03:50.120 --> 00:03:52.290
the slope coefficient times x.

73
00:03:52.290 --> 00:03:53.870
So that's the log of our linear predictor.

74
00:03:53.870 --> 00:03:55.622
But when we, but
in order to get the mean for

75
00:03:55.622 --> 00:03:58.590
our Poisson random variable,
we need to exponentiate that.

76
00:03:58.590 --> 00:04:03.859
So we, we simulate 100 of these Poisson
random variables using the rpois function,

77
00:04:03.859 --> 00:04:06.980
and we give it the ex,
the exponential of our log mean.

78
00:04:08.490 --> 00:04:10.070
So when we summarize this,

79
00:04:10.070 --> 00:04:15.040
you'll see that the mean is about 1.5 and
our range is between zero and six.

80
00:04:15.040 --> 00:04:18.230
When I plot this data, you'll see
that they look like Poisson data, and

81
00:04:18.230 --> 00:04:21.260
that there's clearly a linear
relationship between x and

82
00:04:21.260 --> 00:04:26.040
y, as x increases, the count for
y generally gets larger.

83
00:04:26.040 --> 00:04:27.860
But the data are still
count variables here.