WEBVTT

1
00:00:00.230 --> 00:00:04.450
So, here's a function with four arguments.
A, B, C and D.

2
00:00:04.450 --> 00:00:06.610
So, A has no default value.

3
00:00:06.610 --> 00:00:11.870
B, C, and D, all have default values.
And so, when you define a function.

4
00:00:11.870 --> 00:00:15.540
You want it if both specify the names of
the arguments.

5
00:00:15.540 --> 00:00:18.260
And, whether or not any of the arguments
have default values.

6
00:00:19.890 --> 00:00:21.850
So null is a common argument.

7
00:00:21.850 --> 00:00:24.390
Sorry, common value to assign to an
argument.

8
00:00:24.390 --> 00:00:25.380
Which mean, which can

9
00:00:25.380 --> 00:00:26.740
mean a variety of things, but usually

10
00:00:26.740 --> 00:00:27.990
means that, you know, there's nothing
there.

11
00:00:31.800 --> 00:00:36.670
So, one of the key features of the, our
language is what's called Lazy Evaluation.

12
00:00:36.670 --> 00:00:40.160
So Lazy Evaluation is a common model in a
variety of programming languages.

13
00:00:41.210 --> 00:00:43.400
And the way that it works is all of the

14
00:00:43.400 --> 00:00:47.280
arguments to a function are only evaluated
as they're needed.

15
00:00:47.280 --> 00:00:50.220
And so for example, if you take a look at
this function over here.

16
00:00:50.220 --> 00:00:52.080
You can see it takes two arguments a and
b.

17
00:00:53.130 --> 00:00:55.190
But the body of the argument only takes
one thing,

18
00:00:55.190 --> 00:00:56.840
it takes a and then it squares it and then
it

19
00:00:56.840 --> 00:00:57.330
returns it.

20
00:00:57.330 --> 00:00:59.700
And now recall that in a function, the

21
00:00:59.700 --> 00:01:02.980
return value whatever the last expression
is evaluated.

22
00:01:02.980 --> 00:01:04.730
So there's only one expression in this
function.

23
00:01:04.730 --> 00:01:07.450
So that's the last expression.
And so it's the return value.

24
00:01:07.450 --> 00:01:10.650
So if I say f(2).
What happens?

25
00:01:10.650 --> 00:01:15.420
Well, in R what happens is you get 4
because 2 squared is 4.

26
00:01:15.420 --> 00:01:20.560
Now you might be wondering what happens to
B when I call (f).

27
00:01:20.560 --> 00:01:21.960
I never specify what the value

28
00:01:21.960 --> 00:01:22.910
of b is.

29
00:01:22.910 --> 00:01:25.390
And furthermore, b doesn't have a default
value.

30
00:01:25.390 --> 00:01:27.360
And so what happens, what, what happens is
nothing

31
00:01:27.360 --> 00:01:31.020
happens because the function f doesn't
actually use b.

32
00:01:31.020 --> 00:01:34.980
And so the argument is never evaluated.

33
00:01:34.980 --> 00:01:37.210
And so, because it's never evaluated,
there's really no error.

34
00:01:37.210 --> 00:01:39.010
There's nothing that's going wrong here.

35
00:01:39.010 --> 00:01:40.590
Now now you might say there, of course,
well,

36
00:01:40.590 --> 00:01:42.470
the, the function F is kind of poorly
defined.

37
00:01:42.470 --> 00:01:46.740
So why would you give and argument where
that's never actually evaluated?

38
00:01:46.740 --> 00:01:47.060
And that's

39
00:01:47.060 --> 00:01:49.410
a reasonable objection, but in this case,
the

40
00:01:49.410 --> 00:01:53.050
only, the, the function will operate
correctly because

41
00:01:53.050 --> 00:01:57.700
because it's Because the value of 2, is

42
00:01:57.700 --> 00:02:00.250
positionally matched to the arg, to the
argument A.

43
00:02:00.250 --> 00:02:01.070
Which is then squared.

44
00:02:02.620 --> 00:02:04.360
Here's another example of a function
that's

45
00:02:04.360 --> 00:02:06.980
only slightly more complicated than the
previous one.

46
00:02:06.980 --> 00:02:10.110
So this is another function that takes
arguments a and b,

47
00:02:10.110 --> 00:02:12.280
but now what the function does is it
prints out a and

48
00:02:12.280 --> 00:02:13.130
it prints out b.

49
00:02:14.190 --> 00:02:17.620
And so, when I call f of 45, look what
happens.

50
00:02:17.620 --> 00:02:20.840
I get, well I get an error that says in
print b, argument b is missing.

51
00:02:20.840 --> 00:02:24.820
So here, what happened is that it printed
out 45 because 45

52
00:02:24.820 --> 00:02:27.670
was matched to the argument a, and so
there was no error.

53
00:02:27.670 --> 00:02:30.540
Up until the first line of the function,
there was no error occurring.

54
00:02:30.540 --> 00:02:32.300
But then when it got to the second line,

55
00:02:32.300 --> 00:02:34.670
It had to evaluate the val, the argument
b.

56
00:02:34.670 --> 00:02:37.550
And because b had no value assigned to it
and no default

57
00:02:37.550 --> 00:02:40.660
value, then an error had to occur.

58
00:02:40.660 --> 00:02:46.020
So here, but you notice that the error
only occurs after the 45 was printed out.

59
00:02:46.020 --> 00:02:50.750
And so the lazy evaluation applies, but
because

60
00:02:50.750 --> 00:02:53.370
the argument is only evaluate when it's
needed.

61
00:02:53.370 --> 00:02:56.750
Everything else comes before it that's
valid, it will execute it

62
00:02:56.750 --> 00:02:59.920
until it hits the, the part that which
causes an error.

63
00:03:03.040 --> 00:03:05.860
So there's a special argument, in.

64
00:03:05.860 --> 00:03:08.686
In our functions which is the dot, dot,
dot argument.

65
00:03:08.686 --> 00:03:10.770
And it's used to indicate a variable
number of

66
00:03:10.770 --> 00:03:14.230
arguments that can sometimes be passed on
to other functions.

67
00:03:14.230 --> 00:03:18.660
So the three dots are often used when
extending another function and

68
00:03:18.660 --> 00:03:22.150
you don't want to copy the entire argument
list of the original function.

69
00:03:22.150 --> 00:03:24.840
So for example you might want to extend
the plot function

70
00:03:26.020 --> 00:03:28.280
and just to have a little bit of a tweak
or

71
00:03:28.280 --> 00:03:30.380
to change some of the defaults, for
example.

72
00:03:30.380 --> 00:03:33.460
And so for example you might create a
function that's called my plot.

73
00:03:33.460 --> 00:03:35.330
And the my plot will replicate some of the

74
00:03:35.330 --> 00:03:38.180
arguments of the original plot function
like x and y.

75
00:03:38.180 --> 00:03:39.870
But it's going to change the default type

76
00:03:39.870 --> 00:03:44.230
arguments so that instead of creating
circles for points.

77
00:03:44.230 --> 00:03:47.760
You want it to create lines.
So you say type equal to l.

78
00:03:47.760 --> 00:03:51.900
So, but of course the default plot
function has many, many other arguments.

79
00:03:51.900 --> 00:03:54.330
And you want to leave them all ultimately
the same.

80
00:03:54.330 --> 00:03:57.680
And so, what you, what you can do is pass
dot dot dot.

81
00:03:57.680 --> 00:04:01.840
And then though, that can used to, be used
to kind of absorb all the other

82
00:04:01.840 --> 00:04:03.610
arguments in the plot function and then
what

83
00:04:03.610 --> 00:04:05.640
happens is I'll take the dot dot dot and

84
00:04:05.640 --> 00:04:07.420
then pass it down to the original plot

85
00:04:07.420 --> 00:04:10.850
function, and so all those original
arguments can be

86
00:04:10.850 --> 00:04:12.970
preserved then I don't have to retype or

87
00:04:12.970 --> 00:04:16.410
reconstruct all of those arguments in my
extended function.

88
00:04:17.480 --> 00:04:19.250
There is another function.

89
00:04:19.250 --> 00:04:22.250
And sorry, there's another use of the dot
dot dot argument, and it's for

90
00:04:22.250 --> 00:04:24.880
what are called generic functions so that

91
00:04:24.880 --> 00:04:26.470
extra arguments can be passed to the
methods.

92
00:04:26.470 --> 00:04:27.620
So we'll talk a lot about more of

93
00:04:27.620 --> 00:04:30.510
this later when we talk about object
oriented programming.

94
00:04:30.510 --> 00:04:32.720
But the basic idea is that in R there,

95
00:04:32.720 --> 00:04:35.420
there can be special functions called
generic functions which

96
00:04:35.420 --> 00:04:37.940
don't do anything, but what they do is
they

97
00:04:37.940 --> 00:04:43.410
dispatch methods to put, according for
different types of data.

98
00:04:43.410 --> 00:04:44.280
And so the dot dot dot

99
00:04:44.280 --> 00:04:46.449
is used very heavily in this type of
setup.

100
00:04:50.390 --> 00:04:53.460
lastly, so the dot dot dot argument is, is
necessary when the

101
00:04:53.460 --> 00:04:57.730
number of arguments that are passive
functions cannot be known in advance.

102
00:04:57.730 --> 00:05:00.860
So one good example of this usage is in
the paste function.

103
00:05:00.860 --> 00:05:02.970
So the paste function, what is does it

104
00:05:02.970 --> 00:05:06.740
paste, it concatenates a set of strings
together to

105
00:05:06.740 --> 00:05:09.870
create one string or a vector of strings

106
00:05:09.870 --> 00:05:12.270
and it can take a variable number of
arguments.

107
00:05:12.270 --> 00:05:15.460
So, there is no way for the function to
note advance how many arguments it's

108
00:05:15.460 --> 00:05:17.840
going to have to paste together and so the

109
00:05:17.840 --> 00:05:20.580
first argument for paste is actually dot
dot dot.

110
00:05:20.580 --> 00:05:22.070
And therefore you can take a number of
different

111
00:05:22.070 --> 00:05:24.530
R objects that are character vectors and
then, and

112
00:05:24.530 --> 00:05:28.900
then paste something together using a
separator and in

113
00:05:28.900 --> 00:05:31.362
the, which the case the default is the
space.

114
00:05:31.362 --> 00:05:35.040
So there are other arguments to face which
are set to collapse.

115
00:05:35.040 --> 00:05:37.870
But they come after the dot dot dot
argument.

116
00:05:37.870 --> 00:05:40.490
Another function that has the dot dot dot
as the first

117
00:05:40.490 --> 00:05:41.610
argument is cat.

118
00:05:41.610 --> 00:05:43.340
And what cat does similar to paste, it

119
00:05:43.340 --> 00:05:45.490
puts together, it pastes together a number
of strings

120
00:05:45.490 --> 00:05:48.840
then it prints out the, the, the
concatenated

121
00:05:48.840 --> 00:05:51.290
string either to a file or to a console.

122
00:05:51.290 --> 00:05:54.240
So you can see that there are many other
arguments to cat but the first

123
00:05:54.240 --> 00:05:55.910
argument is going to be the set of our

124
00:05:55.910 --> 00:05:57.830
objects that, that are going to be
concatenated.

125
00:06:00.940 --> 00:06:04.010
So, one catch with the dot dot dot
argument is that any arguments

126
00:06:04.010 --> 00:06:09.350
that appear after three dots on the
argument list must be named explicitly.

127
00:06:09.350 --> 00:06:11.370
And furthermore, cannot be partially
matched.

128
00:06:11.370 --> 00:06:14.140
So you cannot, you can't use positional
matching or

129
00:06:14.140 --> 00:06:17.450
partial matching for arguments that come
after the three dots.

130
00:06:17.450 --> 00:06:19.050
because, and this kind of makes sense,
because otherwise

131
00:06:19.050 --> 00:06:21.060
there's no way for r to know whether you

132
00:06:21.060 --> 00:06:23.100
are passing something to the dot dot dot
or

133
00:06:23.100 --> 00:06:25.370
whether you are passing something to a
different argument.

134
00:06:25.370 --> 00:06:26.330
So if I say

135
00:06:26.330 --> 00:06:28.740
in the first example here, where I try to
paste together A

136
00:06:28.740 --> 00:06:31.550
and B, so A and B are going to the dot dot
dot

137
00:06:31.550 --> 00:06:34.440
argument and then I say sep equals colon
and then which means that

138
00:06:34.440 --> 00:06:38.450
I want to paste something together by
separating them into with a colon.

139
00:06:38.450 --> 00:06:41.180
However, if I try to do partial matching
with set,

140
00:06:41.180 --> 00:06:45.040
what happens is that the partial matching
gets ignored, and so,

141
00:06:45.040 --> 00:06:48.030
when, when I say paste a b and then s e

142
00:06:48.030 --> 00:06:51.860
equal to colon, well, the s e is, in
another circumstance

143
00:06:51.860 --> 00:06:53.330
might be partially matched.

144
00:06:53.330 --> 00:06:55.960
But in the pace function, it can't use
partial batching.

145
00:06:55.960 --> 00:06:58.550
So it gets, it just ignores that and just
assumes

146
00:06:58.550 --> 00:07:01.560
that colon is just another string to be
pieced together.

147
00:07:01.560 --> 00:07:04.076
And so then you get the, the string ab:.

148
00:07:04.076 --> 00:07:06.316
So just be careful when you're using
functions

149
00:07:06.316 --> 00:07:09.020
that have dot, dot, dot as an argument.

150
00:07:09.020 --> 00:07:10.990
That any arguments that appear after the
three

151
00:07:10.990 --> 00:07:13.300
dots have to be named explicitly and in
full.