WEBVTT

1
00:00:00.470 --> 00:00:03.170
I want to talk briefly about dates and
time in R, which is a

2
00:00:03.170 --> 00:00:06.540
very, is a very special topic and could
require a lot more time.

3
00:00:06.540 --> 00:00:07.360
And I have something I need to talk

4
00:00:07.360 --> 00:00:10.410
a little bit about how R represents dates
and

5
00:00:10.410 --> 00:00:11.850
times, and how you can use them in kind

6
00:00:11.850 --> 00:00:15.480
of ara, arithmetic and data analysis types
of computations.

7
00:00:16.490 --> 00:00:21.580
[NOISE] so R has a special way to
represent dates and times.

8
00:00:21.580 --> 00:00:24.920
And they're, they're represented using
special data classes.

9
00:00:24.920 --> 00:00:25.520
So, in the past,

10
00:00:25.520 --> 00:00:28.070
we talked about different data types like
lists.

11
00:00:28.070 --> 00:00:29.390
And character vectors.

12
00:00:29.390 --> 00:00:30.640
And, numeric vectors, and so.

13
00:00:30.640 --> 00:00:35.640
This is just another type of data on top
of those kinds of classes.

14
00:00:35.640 --> 00:00:38.194
So dates are represented by the date
class.

15
00:00:38.194 --> 00:00:41.006
and, times are represented by two separate

16
00:00:41.006 --> 00:00:44.040
classes: the POSIXct and the POSIXlt
class.

17
00:00:45.040 --> 00:00:46.850
So dates are basically.

18
00:00:46.850 --> 00:00:50.716
Don't have times attached to them.
They represent a day, in a year

19
00:00:50.716 --> 00:00:52.000
in a month.

20
00:00:52.000 --> 00:00:56.150
And the, kind of, you can figure them in a
kind of a year, month, day format so for

21
00:00:56.150 --> 00:01:01.680
example, this date is 1970, January 1st
and so

22
00:01:01.680 --> 00:01:07.880
internally the dates are stored as the
number of days since 1970 January 1st.

23
00:01:07.880 --> 00:01:12.270
That particular detail is not very
important but in case you're wondering

24
00:01:12.270 --> 00:01:16.170
you don't know how they, how the, how R
actually does calculations

25
00:01:16.170 --> 00:01:17.460
based on dates.

26
00:01:17.460 --> 00:01:20.810
Times are stored internally as the number
of seconds.

27
00:01:20.810 --> 00:01:23.480
Since 1970, January 1st.

28
00:01:23.480 --> 00:01:25.350
And so, that's, again, another underlying
detail.

29
00:01:25.350 --> 00:01:28.850
That's not very important, but it maybe
useful to know, sometimes.

30
00:01:28.850 --> 00:01:33.580
So, the way dates in R, in R work, is you
can take a character screen.

31
00:01:33.580 --> 00:01:35.750
Like this following 1970-01-01.

32
00:01:35.750 --> 00:01:38.560
And convert it into a date, using as.Date
function.

33
00:01:38.560 --> 00:01:41.470
That's probably the most common way that
you'll start

34
00:01:41.470 --> 00:01:43.320
your, begin working with dates.

35
00:01:43.320 --> 00:01:46.040
And, you'll notice that if you print out
this object.

36
00:01:46.040 --> 00:01:48.060
You'll get something that looks like a
character string.

37
00:01:48.060 --> 00:01:50.000
Now it's not actually a character string
but it will

38
00:01:50.000 --> 00:01:54.000
print out that way because there's a
special print method.

39
00:01:54.000 --> 00:01:57.480
Now if I unclass the object here you'll
see I get the number 0.

40
00:01:57.480 --> 00:01:57.820
Remember?

41
00:01:57.820 --> 00:02:01.120
Because the dates are stored internally as
the

42
00:02:01.120 --> 00:02:04.030
number of days since 1970, January 1st and
since.

43
00:02:04.030 --> 00:02:06.640
1970 January 1st.
0 days from that point.

44
00:02:06.640 --> 00:02:08.560
You'll get 0.
If I.

45
00:02:08.560 --> 00:02:12.810
If I input January 2, 1970, then you'll
see that underline is

46
00:02:12.810 --> 00:02:18.150
represented as a number 1, because that's
1 day after 1970 January 1st.

47
00:02:18.150 --> 00:02:19.000
If you had a.

48
00:02:19.000 --> 00:02:20.195
If you had a date that was before

49
00:02:20.195 --> 00:02:23.180
1970 Then, they'd be represented as
negative numbers.

50
00:02:24.230 --> 00:02:26.450
so, but that's just for your little
background.

51
00:02:26.450 --> 00:02:28.960
You don't, you don't have to worry about
the underlying representation.

52
00:02:28.960 --> 00:02:31.930
Ultimately, what you need to know, is that
dates are stored

53
00:02:31.930 --> 00:02:33.510
as objects of the date class.

54
00:02:36.110 --> 00:02:39.100
Times, on the other hand, are represented
as two possible types.

55
00:02:39.100 --> 00:02:41.690
One is called POSIXct and the other
POSIXlt.

56
00:02:41.690 --> 00:02:48.180
So, POSIX is a family of computing
standards for how things should be

57
00:02:48.180 --> 00:02:51.250
done on certain types of computers or how
data should be represented and

58
00:02:51.250 --> 00:02:54.530
so there's a there's a family of standards
for how to represent dates

59
00:02:54.530 --> 00:02:58.050
and times and pos and so POSIX a that's
part of the POSIX standard.

60
00:02:58.050 --> 00:03:01.200
So [COUGH] in the POSIXct class.

61
00:03:01.200 --> 00:03:03.890
Times are represented at just as very
large integers.

62
00:03:05.740 --> 00:03:09.840
And so it's a useful type of class if you
want to say, store times in

63
00:03:09.840 --> 00:03:10.950
a data frame or something like because

64
00:03:10.950 --> 00:03:13.335
it's basically it's like a big integer
vector.

65
00:03:13.335 --> 00:03:16.380
POSIXlt stores a time as a list.

66
00:03:17.620 --> 00:03:19.680
underlying, and so, and it stores a bunch
of

67
00:03:19.680 --> 00:03:23.200
other useful information about a given
time, for example what's

68
00:03:23.200 --> 00:03:26.790
the day of the week of that time, what's
the the day of the year, the day of the

69
00:03:26.790 --> 00:03:28.850
month, or the month itself.

70
00:03:28.850 --> 00:03:29.940
And there are a number of generic

71
00:03:29.940 --> 00:03:33.310
functions that operate on both dates and
times.

72
00:03:33.310 --> 00:03:37.240
That you can use such as the, so the
weekdays functions tells you

73
00:03:37.240 --> 00:03:41.000
what day of the week a given time is or a
given day is.

74
00:03:41.000 --> 00:03:45.220
The month function tells you what month
that date or time is.

75
00:03:45.220 --> 00:03:47.160
And the quarters functions gives you the
quarter number.

76
00:03:47.160 --> 00:03:51.860
So for example, quarter Q1 would be
January through March, Q2 would be

77
00:03:51.860 --> 00:03:55.160
April through June, etc.
like that.

78
00:03:55.160 --> 00:03:58.870
So, these generic functions operate on, on
objects of class.

79
00:03:58.870 --> 00:04:01.120
POSIXct or POSIXlt or date.

80
00:04:02.580 --> 00:04:05.350
So, so, for example, you can, you can, you

81
00:04:05.350 --> 00:04:08.820
can coerce things back and forth between
POSIXlt and POSIXct.

82
00:04:08.820 --> 00:04:14.600
If you want, using the as.POSIXlt or the
as.POSIXct function.

83
00:04:14.600 --> 00:04:17.030
so, for example the Sys.time function
here,

84
00:04:17.030 --> 00:04:20.620
just gives you the current time.
As it's known by the system.

85
00:04:20.620 --> 00:04:24.320
And you can see that when it prints out,
it prints out in a year month day format.

86
00:04:24.320 --> 00:04:26.530
And then an hour minute second format.

87
00:04:27.600 --> 00:04:31.935
And then the, the timezone, which is
Eastern Standard Time right now.

88
00:04:31.935 --> 00:04:40.980
[COUGH] So you can convert this di to a
POSIXlt using pa, as.POSIXlt.

89
00:04:40.980 --> 00:04:42.190
And, POSIXlt remember

90
00:04:42.190 --> 00:04:43.390
underlying is a list.

91
00:04:43.390 --> 00:04:44.970
So you can look at the names of the
elements.

92
00:04:44.970 --> 00:04:47.050
In this list if you unclass it and you can

93
00:04:47.050 --> 00:04:49.090
see that there's an element called seconds
that's the seconds

94
00:04:49.090 --> 00:04:51.860
and the minutes the hours the M days the
day

95
00:04:51.860 --> 00:04:55.390
of the month which in this case would be
23.

96
00:04:55.390 --> 00:05:00.470
The month is just the month your in so
that's a January and then the year.

97
00:05:00.470 --> 00:05:02.320
The weekdays or the day of the week.

98
00:05:02.320 --> 00:05:05.120
The year, day, which is the day of the
year.

99
00:05:05.120 --> 00:05:06.920
And then are we on daylight

100
00:05:06.920 --> 00:05:07.555
savings or not?

101
00:05:07.555 --> 00:05:10.660
[NOISE] So, if I extract the sec, seconds

102
00:05:10.660 --> 00:05:13.270
element of this list, you'll see it's
11.86.

103
00:05:13.270 --> 00:05:17.160
And so that, and so this actually gives
you the seconds in in fractional seconds.

104
00:05:17.160 --> 00:05:20.090
So, it's 11 seconds and then .86 seconds.

105
00:05:20.090 --> 00:05:22.649
So, that's, that's the number of seconds
in the time.

106
00:05:25.030 --> 00:05:28.510
The POSIXct format you can see is you can
also get it from

107
00:05:28.510 --> 00:05:33.320
the sys.time function and you can see that
if I un-class the POSIXct object.

108
00:05:33.320 --> 00:05:35.110
I get this very large integer, because
that's

109
00:05:35.110 --> 00:05:39.500
just the number of seconds since January
1, 1970.

110
00:05:39.500 --> 00:05:42.980
Now if I try to apply the list operator,
the dollar sign to this object, you

111
00:05:42.980 --> 00:05:45.300
see I get an error because objects of

112
00:05:45.300 --> 00:05:48.220
POSIXct don't have these list elements in
them.

113
00:05:48.220 --> 00:05:50.110
You want to get those list elements out
you

114
00:05:50.110 --> 00:05:54.360
have to convert it to POSIXlt using the
as.POSIXlt function.

115
00:05:54.360 --> 00:05:55.750
Then I can get the seconds out.

116
00:05:55.750 --> 00:05:57.370
In this case it's 11.88 seconds.

117
00:06:01.230 --> 00:06:06.210
So, finally there's a strptime function
which converts dates which

118
00:06:06.210 --> 00:06:11.040
are written in character string format
into date or time objects.

119
00:06:11.040 --> 00:06:13.790
Well, in this case it converts into two
time objects.

120
00:06:13.790 --> 00:06:17.270
So and they use what are called format
strings.

121
00:06:17.270 --> 00:06:22.090
So here I've got a string that says
January 10th, 2012 and then 10, 40

122
00:06:22.090 --> 00:06:27.430
meaning hour 10 minute 40 and

123
00:06:27.430 --> 00:06:31.740
then I have another string that said
December 9th 2012.

124
00:06:31.740 --> 00:06:32.720
9, 10.

125
00:06:32.720 --> 00:06:38.950
So if I want to convert these strings to
time objects I can use the strptime

126
00:06:38.950 --> 00:06:40.430
function, what I do is I pass the

127
00:06:40.430 --> 00:06:44.100
character vector and I pass it a format
string.

128
00:06:44.100 --> 00:06:47.360
So in this case I got, and so you'll see
how these present signs fall by letters.

129
00:06:47.360 --> 00:06:49.792
And then you can, you can look-up what

130
00:06:49.792 --> 00:06:53.000
these symbols mean in the help page for
strptime.

131
00:06:54.214 --> 00:06:57.000
So present B means the month.

132
00:06:57.000 --> 00:07:01.460
In an abbreviate [UNKNOWN] name, %d is the
day.

133
00:07:01.460 --> 00:07:05.866
Then comma and then %Y is the four-digit
year.

134
00:07:05.866 --> 00:07:11.620
Then %H is the hour, sort of like colon
followed by %M which is the minute.

135
00:07:11.620 --> 00:07:14.160
And so that's the format.
Of the, of the times here.

136
00:07:15.490 --> 00:07:19.280
You can see that after I call [UNKNOWN] I
print out X, I get

137
00:07:19.280 --> 00:07:23.030
these time objects that are formatted,
that

138
00:07:23.030 --> 00:07:24.920
are printed out in the standard format.

139
00:07:24.920 --> 00:07:30.020
When I look at the class of this object
you'll see it's in a POSIXlt format and so

140
00:07:32.260 --> 00:07:36.110
that's the so you can look at so that's
the underlying kind of list format here.

141
00:07:36.110 --> 00:07:39.120
Now I personally can never remember what
those formatting strings

142
00:07:39.120 --> 00:07:41.840
are the %B ,%D, %Y I can never remember
what

143
00:07:41.840 --> 00:07:43.940
those are and so I always have to look at

144
00:07:43.940 --> 00:07:47.740
the help page for [UNKNOWN] to remember
what those details are.

145
00:07:49.970 --> 00:07:54.940
Now, once you've got data in the date or
time format, you can, you

146
00:07:54.940 --> 00:07:59.770
can do operations on them, which can be
very handy for example, you can you

147
00:07:59.770 --> 00:08:02.860
can add and subtract dates, you can
compare dates, you can see is, is

148
00:08:02.860 --> 00:08:05.890
one date less than another date or are
these two dates equal to each other?

149
00:08:07.020 --> 00:08:08.300
So, but the end you need to be

150
00:08:08.300 --> 00:08:11.100
careful that you can't always mix
different classes.

151
00:08:11.100 --> 00:08:16.256
So for here, I have X which is a date
object, then Y which is a POSIXlt object.

152
00:08:17.780 --> 00:08:20.590
If I try to subtract the two, you'll,
you'll get

153
00:08:20.590 --> 00:08:23.090
an error because they're not the same,
type of object.

154
00:08:23.090 --> 00:08:28.340
So I can, can, but if I convert the date
to a POSIXlt object so I can do as.POSIXlt

155
00:08:28.340 --> 00:08:30.430
on it, then if I take the difference it'll
say

156
00:08:30.430 --> 00:08:33.820
that the, the difference of 356.3 days
between the two.

157
00:08:37.820 --> 00:08:40.850
The nice thing about the date and time
operators is that they keep track

158
00:08:40.850 --> 00:08:43.500
of very tricky things like leap years,

159
00:08:43.500 --> 00:08:46.740
leap seconds daylight savings and time
zones.

160
00:08:46.740 --> 00:08:50.440
So just, this first example here, you can
see that so 2012,

161
00:08:50.440 --> 00:08:53.910
it was a leap year and so there was a
February 29th.

162
00:08:53.910 --> 00:08:57.960
And so the difference between March 1st
and February 28th is actually a difference

163
00:08:57.960 --> 00:09:00.760
of two days, not a difference of one day
like it is every other year.

164
00:09:02.550 --> 00:09:02.950
Similarly

165
00:09:02.950 --> 00:09:08.130
I could take two times one which is in my,
X which is in my kind of

166
00:09:08.130 --> 00:09:13.220
current time and then Y which is in the
time zone of GMT, so Greenwich Mean Time.

167
00:09:13.220 --> 00:09:14.510
And take the difference between those.

168
00:09:14.510 --> 00:09:17.410
So even though it looks like it should be
a 5-hour difference, it's

169
00:09:17.410 --> 00:09:21.190
actually only a 1 hour difference because
of the change in the time zones.

170
00:09:21.190 --> 00:09:24.180
So one of the advantages of using the date
time classes

171
00:09:24.180 --> 00:09:28.700
is that it will automatically take care of
these kinds of irregularities.

172
00:09:31.100 --> 00:09:33.990
So that was just a quick sum, kind of
overview

173
00:09:33.990 --> 00:09:36.500
of the, the dates and the time classes in
R.

174
00:09:36.500 --> 00:09:39.600
So just to summerize there are special
classes in R that will, that

175
00:09:39.600 --> 00:09:41.170
represents dates and times that'll allow

176
00:09:41.170 --> 00:09:44.218
you to do numerical and statistic
calculations.

177
00:09:44.218 --> 00:09:48.570
dates, date, class, times use either the
POSIXct or POSIClt class.

178
00:09:49.840 --> 00:09:52.840
And then character strings can be coerced
to either a date

179
00:09:52.840 --> 00:09:59.090
or a time class, using the strptime
function or as.Date.as.POSIXlt, and

180
00:09:59.090 --> 00:10:00.610
POSIX, as.POSIXct.

181
00:10:00.610 --> 00:10:04.070
The other thing to note, that I haven't
really talked about here

182
00:10:04.070 --> 00:10:09.370
is that a lot of the plotting functions,
will recognize date time objects.

183
00:10:09.370 --> 00:10:14.110
So when you try to plot An object that,
that's a date time class.

184
00:10:14.110 --> 00:10:18.370
It will recognize that object and then
format the X axis in

185
00:10:18.370 --> 00:10:21.380
a special way so that it will have a time
element to it.

186
00:10:21.380 --> 00:10:24.240
So you might want to try to experiment
with that a little bit to see how

187
00:10:24.240 --> 00:10:26.350
plots change when you use a date time
class.