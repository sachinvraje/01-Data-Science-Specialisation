WEBVTT

1
00:00:00.000 --> 00:00:09.576
[MUSIC]

2
00:00:09.576 --> 00:00:17.140
Alright, so so today's lecture is about
the debugging tools that are built into R.

3
00:00:17.140 --> 00:00:18.030
So these come with R.

4
00:00:18.030 --> 00:00:24.060
They're not part of any package and they
can be useful for kind of

5
00:00:24.060 --> 00:00:27.080
figuring anything out, figuring out what's
wrong

6
00:00:27.080 --> 00:00:29.100
after you've discovered there's a problem,
right.

7
00:00:29.100 --> 00:00:34.660
So how do you know that there's a problem?
So, there are a couple of

8
00:00:34.660 --> 00:00:39.320
indications that R, will produce that that
will

9
00:00:39.320 --> 00:00:40.840
give you the sense that there's something
going on.

10
00:00:40.840 --> 00:00:44.240
And they kind of, and this is the, roughly
the gradient.

11
00:00:44.240 --> 00:00:45.760
And so I think I mentioned this before.

12
00:00:45.760 --> 00:00:48.760
But, basically there are three main types
of indications.

13
00:00:48.760 --> 00:00:54.100
The first is a message.
And a message is a very tame notification.

14
00:00:54.100 --> 00:00:58.010
It's just an in, it could be a diagnostic
message that something happened.

15
00:00:58.010 --> 00:00:59.380
But it could, it could be nothing.

16
00:00:59.380 --> 00:00:59.750
Okay?

17
00:00:59.750 --> 00:01:04.600
And and so the message won't stop your
function from executing.

18
00:01:04.600 --> 00:01:07.462
It will just it will print.

19
00:01:07.462 --> 00:01:09.360
There will be a message that gets printed
to the screen

20
00:01:09.360 --> 00:01:12.570
and the execution of the function will
continue and that's all.

21
00:01:12.570 --> 00:01:14.060
The next level up is the warning.

22
00:01:14.060 --> 00:01:16.700
All right?
So the warning is another indication.

23
00:01:16.700 --> 00:01:19.820
Usually, if you're writing a function, you
are choosing, you're trying

24
00:01:19.820 --> 00:01:23.124
to figure out, okay, what's a message and
what's a warning.

25
00:01:23.124 --> 00:01:24.468
furthermore, or if you're

26
00:01:24.468 --> 00:01:27.324
using a function and you're figuring out
well what does that

27
00:01:27.324 --> 00:01:31.132
mean, a warning is an indication that
something unexpected happened it's

28
00:01:31.132 --> 00:01:34.156
not necessarily a problem, and may, and
many times you, you,

29
00:01:34.156 --> 00:01:39.170
you explicitly want to ignore warnings but
there's something unexpected happened.

30
00:01:39.170 --> 00:01:42.700
So the function was expecting one thing,
and it got something slightly different.

31
00:01:42.700 --> 00:01:45.020
It wasn't enough to kill the whole thing,

32
00:01:45.020 --> 00:01:46.840
But it was enough to kind of trigger this
warning.

33
00:01:46.840 --> 00:01:49.490
So execution of the function will continue
if a

34
00:01:49.490 --> 00:01:52.890
warning occurs but you'll get a message
after the end,

35
00:01:52.890 --> 00:01:56.000
so once you'll get a message when the
function completes execution.

36
00:01:56.000 --> 00:01:57.360
So when the function comes back, when you

37
00:01:57.360 --> 00:02:00.000
get your console back, that's when the
warning appears.

38
00:02:00.000 --> 00:02:02.850
So you won't get a warning in the middle
of the execution.

39
00:02:04.040 --> 00:02:05.090
By default.

40
00:02:05.090 --> 00:02:07.360
So this is, these are generated by the
warning function, sorry

41
00:02:07.360 --> 00:02:09.740
I should say the messages are generated by
the message function.

42
00:02:10.860 --> 00:02:12.960
And then an error is the last stop, right?

43
00:02:12.960 --> 00:02:14.520
So an error is a fatal problem.

44
00:02:14.520 --> 00:02:16.300
This stops execution of the function.

45
00:02:17.360 --> 00:02:21.620
And and these, and error messages are
produced by the stop function.

46
00:02:22.930 --> 00:02:25.129
So and then there's a general notion of a
condition.

47
00:02:26.320 --> 00:02:28.360
Which is it's the higher level concept.

48
00:02:28.360 --> 00:02:31.900
It can, all three of these things are, are
conditions.

49
00:02:31.900 --> 00:02:33.790
And so you can, you can imagine that, and
so

50
00:02:33.790 --> 00:02:36.020
it, you can create new conditions if you
wanted to.

51
00:02:36.020 --> 00:02:38.060
So if you have, and generally you're not
going to

52
00:02:38.060 --> 00:02:39.870
be doing this at this level but if you
have

53
00:02:39.870 --> 00:02:43.594
a, a, another type of of, condition that
you want

54
00:02:43.594 --> 00:02:47.400
to, kind of trigger when something, when a
special thing happens.

55
00:02:47.400 --> 00:02:50.790
So it's not an error, it's not a warning,
and it's not a message.

56
00:02:50.790 --> 00:02:54.010
You can create your own conditions and and

57
00:02:54.010 --> 00:02:55.450
using some of the functions that are
available.

58
00:02:55.450 --> 00:02:56.760
So we won't be doing that now, but there

59
00:02:56.760 --> 00:03:00.050
is this notion of a condition and it's,
it's generic.

60
00:03:03.750 --> 00:03:07.780
So this is your basic warning, right?
You take the log of a negative number.

61
00:03:07.780 --> 00:03:08.840
You can't do that, right?

62
00:03:08.840 --> 00:03:13.230
Now notice that you get a value back.
It's a NaN, right?

63
00:03:13.230 --> 00:03:14.750
Not a number.

64
00:03:14.750 --> 00:03:16.230
And, but you also get this warning

65
00:03:16.230 --> 00:03:18.990
which occurred after the execution of the
function.

66
00:03:18.990 --> 00:03:22.870
And it just says that in the log of minus
1 NaNs are produced, right?

67
00:03:22.870 --> 00:03:26.900
So this is your typical and, and sometimes
that's fine.

68
00:03:26.900 --> 00:03:28.900
Because maybe you're taking a log of a
bunch

69
00:03:28.900 --> 00:03:31.950
of numbers and maybe some of them are
negative, but you don't really care

70
00:03:31.950 --> 00:03:35.380
and then you're going to make some sort of
plot or something like that.

71
00:03:35.380 --> 00:03:39.711
So so this is the kind of thing where you
probably wouldn't want the function's

72
00:03:39.711 --> 00:03:41.663
behavior to just stop anytime it sees a

73
00:03:41.663 --> 00:03:45.020
negative number because sometimes these
things just happen.

74
00:03:45.020 --> 00:03:48.360
You get negative numbers on occasion and
you want to take the log anyway.

75
00:03:48.360 --> 00:03:50.560
So so that's a warning.

76
00:03:50.560 --> 00:03:54.360
Now I've got a little function here that
I've created.

77
00:03:54.360 --> 00:03:56.480
It's very simple it takes your input.

78
00:03:56.480 --> 00:03:58.180
It checks to see if it's greater than
zero.

79
00:03:58.180 --> 00:04:01.435
If it's greater than zero, it prints a
message saying x is greater than zero.

80
00:04:01.435 --> 00:04:04.300
[COUGH] If it's less than or equal to
zero, you get

81
00:04:04.300 --> 00:04:05.910
a message saying that it's less than or
equal to zero.

82
00:04:05.910 --> 00:04:10.210
So very handy function I'm, I'm sure
you'll all be using soon.

83
00:04:10.210 --> 00:04:12.360
and, and then last I want to mention this
part here.

84
00:04:12.360 --> 00:04:19.743
So invisible is a function that that, that
stops or I should say prevents

85
00:04:19.743 --> 00:04:21.680
auto printing.

86
00:04:21.680 --> 00:04:24.500
So normally when you, if I if I'm at

87
00:04:24.500 --> 00:04:27.450
command line and I type a function,
remember the, and

88
00:04:27.450 --> 00:04:30.130
I execute a function the, the function
will return

89
00:04:30.130 --> 00:04:32.870
the last element of, that's in its
function body, right?

90
00:04:32.870 --> 00:04:34.470
So if the last sum in this function body
is

91
00:04:34.470 --> 00:04:38.410
like is numeric vector, it will return
that numeric vector.

92
00:04:38.410 --> 00:04:41.770
Now what happens is that if you just
execute the function,

93
00:04:41.770 --> 00:04:44.830
that numeric venture, vector will be
automatically printed to the console

94
00:04:44.830 --> 00:04:47.180
because it got returned by the function
and R will

95
00:04:47.180 --> 00:04:49.230
use auto printing to just print that to
the console.

96
00:04:50.490 --> 00:04:53.750
If I call invisible on the return object,
then it will still

97
00:04:53.750 --> 00:04:58.530
return the same object but it won't, it
wont do the auto printing.

98
00:04:58.530 --> 00:05:01.560
So you can call the function and the
object will be returned.

99
00:05:01.560 --> 00:05:02.900
But there won't be any auto printing.

100
00:05:02.900 --> 00:05:06.930
So a, a, a, a, an example of a function
like this is the load function.

101
00:05:06.930 --> 00:05:11.190
So we haven't really used that much, but
the load functions loads

102
00:05:11.190 --> 00:05:12.830
objects from what, from a saved work
space,

103
00:05:12.830 --> 00:05:15.960
so it's like the opposite of of save,
right?

104
00:05:15.960 --> 00:05:19.260
and, but when, and when it loads the
objects, it actually returns

105
00:05:19.260 --> 00:05:23.110
a character vector containing the names of
all the objects that it loads.

106
00:05:23.110 --> 00:05:24.460
But that doesn't get printed to the

107
00:05:24.460 --> 00:05:27.260
screen and because, it's, it's returned
invisibly.

108
00:05:27.260 --> 00:05:27.950
Okay.

109
00:05:27.950 --> 00:05:32.380
So if you have a function that returns
something invisibly then the return, what

110
00:05:32.380 --> 00:05:36.660
happens is that the object that gets, that
gets returned by that function doesn't

111
00:05:36.660 --> 00:05:39.410
get printed to the console and so
sometimes

112
00:05:39.410 --> 00:05:42.860
you want that to happen and sometimes you
don't.

113
00:05:42.860 --> 00:05:43.960
Sometimes it doesn't matter.

114
00:05:43.960 --> 00:05:45.442
So here I've, I've just added this here
just

115
00:05:45.442 --> 00:05:46.740
so I can, you know, tell you about it.

116
00:05:46.740 --> 00:05:48.050
It's not particularly important.

117
00:05:48.050 --> 00:05:51.480
But actually, the print, actually I should
say that any print function

118
00:05:51.480 --> 00:05:58.260
here actually all print functions will
return the string that it prints.

119
00:05:58.260 --> 00:05:58.540
Okay.

120
00:05:58.540 --> 00:06:02.020
So when you say print X, what gets
returned

121
00:06:02.020 --> 00:06:03.390
is a string, X.
Right?

122
00:06:03.390 --> 00:06:05.380
But you don't actually see that, because
it, the,

123
00:06:05.380 --> 00:06:09.660
the, the, the return value is, is, is
returned invisibly.

124
00:06:09.660 --> 00:06:10.370
Right?
So it actually.

125
00:06:10.370 --> 00:06:14.990
So, so, so, so you could assign the output
of print to, like, an, an object.

126
00:06:14.990 --> 00:06:15.420
But you.

127
00:06:15.420 --> 00:06:16.720
Generally speaking, you never do that.

128
00:06:16.720 --> 00:06:20.000
So, anyway.
That was a little diversion on invisible.

129
00:06:22.140 --> 00:06:23.810
So here I, I create my

130
00:06:23.810 --> 00:06:27.060
printmessage function, and I call
printmessage(1), great.

131
00:06:27.060 --> 00:06:27.570
No problem.

132
00:06:27.570 --> 00:06:29.670
I get the message x is greater than 0.

133
00:06:29.670 --> 00:06:30.530
Okay.

134
00:06:30.530 --> 00:06:33.950
So and so what does printmessage return,
just before I go on?

135
00:06:33.950 --> 00:06:36.020
Printmessage returns its argument,
alright.

136
00:06:36.020 --> 00:06:39.650
And so actually, if I had assigned print,
the output or printmessage to

137
00:06:39.650 --> 00:06:42.460
some other object, it would be the number
one in this case, right.

138
00:06:43.880 --> 00:06:46.950
Even though it didn't printout the number
one anywhere.

139
00:06:46.950 --> 00:06:47.321
So now,

140
00:06:47.321 --> 00:06:49.830
I'm going to pass it directly an NA,
right.

141
00:06:49.830 --> 00:06:52.260
And and, and we're going to get an error
here because you can't

142
00:06:52.260 --> 00:06:56.170
make the comparison if NA was greater than
zero, it's not defined, right.

143
00:06:56.170 --> 00:06:59.080
And so it doesn't know what to do it can't
move on.

144
00:06:59.080 --> 00:07:01.540
It, and so it has to error out.

145
00:07:01.540 --> 00:07:06.750
Okay, so you get an error saying that in
this expression if X is greater than zero

146
00:07:06.750 --> 00:07:09.600
the missing value, you, you have a missing
value

147
00:07:09.600 --> 00:07:12.650
where, so it was expecting true or false
and

148
00:07:12.650 --> 00:07:15.960
instead it got NA, which is neither true
or, nor false.

149
00:07:15.960 --> 00:07:17.330
Right, okay.

150
00:07:18.590 --> 00:07:21.390
So something happened there that's wrong.

151
00:07:21.390 --> 00:07:24.960
Now, I'm going to to fixed this problem so
to speak.

152
00:07:24.960 --> 00:07:28.681
I've got a new function print message two
and the first thing we are going

153
00:07:28.681 --> 00:07:31.930
to do is I'm going to check to see if the
argument is NA, right?

154
00:07:31.930 --> 00:07:37.630
So, now I if it's NA, I'm going to print
this message,

155
00:07:37.630 --> 00:07:37.870
right.

156
00:07:37.870 --> 00:07:39.290
So it's not going to produce an error,

157
00:07:39.290 --> 00:07:41.540
it's just going to print, print a
different message.

158
00:07:41.540 --> 00:07:43.770
So this function's going to print one of
three messages

159
00:07:43.770 --> 00:07:46.684
for now and then it's going to return its
argument, invisibly.

160
00:07:49.182 --> 00:07:50.458
So when I call this, so now

161
00:07:50.458 --> 00:07:53.421
what, so what's something that might
typically happen?

162
00:07:53.421 --> 00:07:56.400
Well I, I calculate the log of minus 1 and
I assign it to X.

163
00:07:56.400 --> 00:07:58.420
So that doesn't stop anything.

164
00:07:58.420 --> 00:08:00.610
I just get a warning, and I move on, all
right?

165
00:08:02.050 --> 00:08:06.140
Now I'm going to printmessage on x, and
I'm getting x as a missing value, right?

166
00:08:06.140 --> 00:08:13.370
So, now that, now there's no error there
but it's, it may be unexpected, right?

167
00:08:13.370 --> 00:08:14.580
Because maybe I, I,

168
00:08:14.580 --> 00:08:16.060
I, maybe I thought that, okay, well the

169
00:08:16.060 --> 00:08:18.530
thing that I'm inputting into
printmessage2 is, is like

170
00:08:18.530 --> 00:08:20.070
some positive number, so I thought I was
going

171
00:08:20.070 --> 00:08:23.100
to get the message X is greater than zero.

172
00:08:23.100 --> 00:08:25.525
But instead I'm getting this message x is
a missing value.

173
00:08:25.525 --> 00:08:26.844
So what happened right?

174
00:08:26.844 --> 00:08:31.640
So um,this is the kind of thing where
where what you thought you were going

175
00:08:31.640 --> 00:08:34.098
to get, where your expectation is
different from

176
00:08:34.098 --> 00:08:36.170
actually kind of what the function
produced, right?

177
00:08:36.170 --> 00:08:38.030
And so all I'm trying to say here is

178
00:08:38.030 --> 00:08:40.037
how do you know when something's gone
wrong, right?

179
00:08:40.037 --> 00:08:43.210
And sometimes it's easy to tell like in
the case where you got the error message.

180
00:08:43.210 --> 00:08:45.020
But sometimes it's not easy to tell
because here there's no

181
00:08:45.020 --> 00:08:49.490
error but it's not exactly what it, what I
was expecting, okay.

182
00:08:51.930 --> 00:08:54.000
It's when you, when you're looking at a
function, you think

183
00:08:54.000 --> 00:08:58.400
something's gone wrong, there's a couple
questions you want to ask yourself.

184
00:08:58.400 --> 00:09:01.870
To see whether there something actually is
wrong, or maybe,

185
00:09:01.870 --> 00:09:05.990
or is there is something we call user
error, okay?

186
00:09:05.990 --> 00:09:09.640
So what was your, so the thing about when
you're kind of thinking about, when you're

187
00:09:09.640 --> 00:09:11.440
debugging a function you want to answer
all

188
00:09:11.440 --> 00:09:14.460
these questions as you're going through
your process here.

189
00:09:14.460 --> 00:09:15.741
So what was the input that you put?

190
00:09:15.741 --> 00:09:18.475
What, what did you feed into that
function?

191
00:09:18.475 --> 00:09:19.980
Okay, not what you thought you fed into

192
00:09:19.980 --> 00:09:22.925
that function, what did you actually into
that function?

193
00:09:22.925 --> 00:09:25.140
Okay, so I thought I fed that function a
positive

194
00:09:25.140 --> 00:09:29.000
number but in reality I fed it a, a NaN.

195
00:09:29.000 --> 00:09:32.410
Alright, so how did you call the function?
What are were the arguments that you gave?

196
00:09:32.410 --> 00:09:35.940
Things like that.
What were you expecting?

197
00:09:35.940 --> 00:09:38.260
So you, and this is important when you're
asking

198
00:09:38.260 --> 00:09:41.480
someone for help, or you're asking someone
a question.

199
00:09:41.480 --> 00:09:43.608
I can't just, it's not that useful to say

200
00:09:43.608 --> 00:09:45.660
oh the printmessage2 to function didn't
work.

201
00:09:46.970 --> 00:09:48.490
How do you know it didn't work, alright?

202
00:09:48.490 --> 00:09:52.630
Because, and then you say, well I was
expecting this, but I got that, okay?

203
00:09:52.630 --> 00:09:54.560
That's how you know it doesn't work.

204
00:09:54.560 --> 00:09:57.130
And then, someone could say, well you
shouldn't have expected this, because

205
00:09:57.130 --> 00:09:59.930
that's not what that function does, or you
know, or something like that.

206
00:09:59.930 --> 00:10:02.310
But or you can say, okay, here's the
problem.

207
00:10:02.310 --> 00:10:04.360
So what were you were expecting is then
very important to be

208
00:10:04.360 --> 00:10:09.090
able to articulate at least to yourself
and maybe to other people.

209
00:10:09.090 --> 00:10:10.730
What was the output that you were
expecting, were

210
00:10:10.730 --> 00:10:13.920
the were you expecting some message that
you didn't get?

211
00:10:13.920 --> 00:10:17.550
Or other results, other numerical results,
things like that.

212
00:10:17.550 --> 00:10:20.760
So what we're expecting, and then of
course, what did you actually get?

213
00:10:20.760 --> 00:10:24.450
How do, how did what you actually get
differ from what you're expecting?

214
00:10:26.080 --> 00:10:28.990
And then of course were expectations
correct in the first place?

215
00:10:28.990 --> 00:10:31.440
So, if you were expecting something that
was, that was in

216
00:10:31.440 --> 00:10:34.320
fact incorrect then your notion of what is
correct and incorrect

217
00:10:34.320 --> 00:10:36.590
is now being challenged, right?

218
00:10:36.590 --> 00:10:40.760
So an important, and another key aspect of
debugging of course

219
00:10:40.760 --> 00:10:43.290
is you have to be able to reproduce the
problem, right?

220
00:10:43.290 --> 00:10:46.055
Because if you can never reproduce the
problem, you'll never have a chance

221
00:10:46.055 --> 00:10:49.520
in figuring it what went wrong, because it
only happened that one time, right?

222
00:10:49.520 --> 00:10:52.870
So this is very, very, very, very
important.

223
00:10:52.870 --> 00:10:56.680
And unless it's a very I mean unless it's
like the most basic problem.

224
00:10:56.680 --> 00:10:58.480
And I can't even say what that would be.

225
00:10:59.850 --> 00:11:01.640
You have to be able to reproduce the
problem.

226
00:11:01.640 --> 00:11:02.940
You know, because you have to be able to

227
00:11:02.940 --> 00:11:07.410
show someone this is how I created the
problem.

228
00:11:07.410 --> 00:11:11.420
Because most people are not going to know
if you just show them the output of

229
00:11:11.420 --> 00:11:14.750
the error message, or what that means, or
where it came from or how you got there.

230
00:11:14.750 --> 00:11:17.260
Okay, so the process by which you
encounter

231
00:11:17.260 --> 00:11:20.400
the error or the problem is very
important.

232
00:11:20.400 --> 00:11:22.580
So you, you have to know how to reproduce
the problem.

233
00:11:23.740 --> 00:11:25.120
There are some problems, and

234
00:11:25.120 --> 00:11:26.720
so when I was talking about, for example,
when

235
00:11:26.720 --> 00:11:28.690
in random number generation you need to
set the

236
00:11:28.690 --> 00:11:31.380
seed because it may be that only under a

237
00:11:31.380 --> 00:11:34.770
certain sequence of random numbers that a
problem occurs.

238
00:11:34.770 --> 00:11:36.930
And, if you're not setting the seed, you

239
00:11:36.930 --> 00:11:39.540
will never be able to reproduce that
problem,

240
00:11:39.540 --> 00:11:42.180
because every time you run it, it's going
to be a different set of random numbers.

241
00:11:43.410 --> 00:11:46.750
There are other types of problems that can
be hard to reproduce.

242
00:11:46.750 --> 00:11:48.120
They, and, but they're more complex.

243
00:11:48.120 --> 00:11:50.250
They're usually, for example, if you're
writing networking

244
00:11:51.580 --> 00:11:54.084
co, networking functions, you know,
something, so you're

245
00:11:54.084 --> 00:11:56.730
doing like parallel programming, often,
those kinds of problems

246
00:11:56.730 --> 00:11:59.020
can be very hard to reproduce because they
depend

247
00:11:59.020 --> 00:12:01.370
on activity in other machines and things
like that.

248
00:12:01.370 --> 00:12:02.540
You can't really reproduce that.

249
00:12:04.120 --> 00:12:06.693
Things that, if you're getting code over
the internet, and so if

250
00:12:06.693 --> 00:12:08.960
you're getting data over the internet, and
your code is kind of interacting

251
00:12:08.960 --> 00:12:11.500
with things in the web, that can, problems
there can sometimes be

252
00:12:11.500 --> 00:12:14.940
hard to reproduce because servers on the
other side may change or whatever.

253
00:12:14.940 --> 00:12:16.826
And so you, you can't

254
00:12:16.826 --> 00:12:19.000
always freeze things in time.

255
00:12:19.000 --> 00:12:21.240
If it's something that's just happening on
your computer

256
00:12:21.240 --> 00:12:24.149
it's usually going to be easier to
reproduce the problems.

257
00:12:26.180 --> 00:12:31.230
so, unless, I mean only under very
esoteric circumstances, circumstances

258
00:12:31.230 --> 00:12:33.140
will it be hard to reproduce a problem on
your computer.