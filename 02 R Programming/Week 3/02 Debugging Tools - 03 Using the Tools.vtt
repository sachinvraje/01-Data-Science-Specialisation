WEBVTT

1
00:00:00.180 --> 00:00:02.350
Let's take a look, I'll just give you a
couple examples and

2
00:00:02.350 --> 00:00:05.990
then I'll move to the actual [UNKNOWN]
just so you can see things.

3
00:00:05.990 --> 00:00:07.530
So here's the mean.

4
00:00:07.530 --> 00:00:10.350
I took the mean of x, x doesn't exist.

5
00:00:10.350 --> 00:00:11.490
So if you take the mean of something

6
00:00:11.490 --> 00:00:14.080
that doesn't exist you're clearly going to
get an error.

7
00:00:14.080 --> 00:00:17.290
Here it says so you get the error message
this is produced by the stop function.

8
00:00:17.290 --> 00:00:20.740
And I call the traceback.
It tells me where the error occurs.

9
00:00:20.740 --> 00:00:24.020
Well the error just occurs like right away
at the top of the mean function.

10
00:00:24.020 --> 00:00:25.420
So that, so the function

11
00:00:25.420 --> 00:00:28.560
mean didn't actually call any other
functions, right because it

12
00:00:28.560 --> 00:00:31.960
couldn't because it couldn't figure out,
it couldn't evaluate your argument.

13
00:00:31.960 --> 00:00:35.220
And so, that's where the error occurs so,
you know that may or may not be.

14
00:00:35.220 --> 00:00:36.720
Many times that's just that is where the

15
00:00:36.720 --> 00:00:38.549
error will occur at the top level
function.

16
00:00:39.860 --> 00:00:43.240
so, that in that case the trace-back's not
very handy.

17
00:00:43.240 --> 00:00:46.960
One thing that's useful to, that, that the
trace-back is useful for,

18
00:00:46.960 --> 00:00:51.190
is for when you're communicating with
someone else over email, for example, me.

19
00:00:51.190 --> 00:00:57.130
And you say, you know I get an error when
I call, you know, whatever function.

20
00:00:57.130 --> 00:00:58.605
Its very useful if we just say use the

21
00:00:58.605 --> 00:01:00.770
trace-back, when I get after I get the
error.

22
00:01:00.770 --> 00:01:04.298
And then I can see okay, wha, what was the
list of function calls, I mean.

23
00:01:04.298 --> 00:01:06.900
Unless the trace-back looks like this,
then near dud bug, but

24
00:01:06.900 --> 00:01:10.700
when you're communicating with someone
about an error and a function,

25
00:01:10.700 --> 00:01:14.180
its very handy just to print out the
trace-back, so that

26
00:01:14.180 --> 00:01:16.260
they can seek out where the error occurred
in the hierarchy

27
00:01:16.260 --> 00:01:17.160
of functions.

28
00:01:17.160 --> 00:01:21.360
You have to call traceback immediately
after the error occurs.

29
00:01:21.360 --> 00:01:22.830
If you execute some other code and

30
00:01:22.830 --> 00:01:24.580
then call traceback it's not going to
work, right?

31
00:01:24.580 --> 00:01:27.810
Because the traceback will only give you
the most recent error.

32
00:01:29.830 --> 00:01:33.060
If you execute another function and
there's no error well then there's

33
00:01:33.060 --> 00:01:36.488
no traceback to give because there's no
error in the, in the next.

34
00:01:36.488 --> 00:01:37.870
ex, execution.

35
00:01:37.870 --> 00:01:39.460
So you have to you've to call it right
away.

36
00:01:41.400 --> 00:01:43.280
Here's a slightly more interesting trace
back so I

37
00:01:43.280 --> 00:01:46.130
call it LM, which is the linear modeling
function.

38
00:01:46.130 --> 00:01:47.270
I said y tilda x.

39
00:01:47.270 --> 00:01:49.770
So y tilda x.
They don't exist.

40
00:01:49.770 --> 00:01:52.529
And so I'm getting an error that says y
cannot be found.

41
00:01:53.784 --> 00:01:54.810
Were to that error occur?

42
00:01:54.810 --> 00:01:57.420
Well actually it occurred several levels
deep actually.

43
00:01:57.420 --> 00:02:01.060
So here I called L M and the L M arrow
function is a little funky.

44
00:02:01.060 --> 00:02:03.060
So I don't expect you to understand all
this but

45
00:02:03.060 --> 00:02:06.062
L M called e val on what's called a mono
frame.

46
00:02:06.062 --> 00:02:10.520
Then that, it's then and then that called
e val again

47
00:02:10.520 --> 00:02:13.060
which called the model frame function
which called the model frame default.

48
00:02:13.060 --> 00:02:16.710
Model frame is a generic function that
called a model frame default function.

49
00:02:16.710 --> 00:02:18.440
Then it called the eval function again on
this.

50
00:02:18.440 --> 00:02:19.952
And then, the and at the seventh

51
00:02:19.952 --> 00:02:21.970
level, here.
That's where the error occurred.

52
00:02:21.970 --> 00:02:22.190
Okay.

53
00:02:22.190 --> 00:02:25.480
So and it basically it occurred because it
tried to evaluate my formula here.

54
00:02:25.480 --> 00:02:26.870
Which is y tilda x.

55
00:02:26.870 --> 00:02:29.090
That's what all e val calls are for.

56
00:02:29.090 --> 00:02:30.620
And and it couldn't.

57
00:02:30.620 --> 00:02:34.160
And when it evaluated the formula it
couldn't find the actual value of y and x.

58
00:02:34.160 --> 00:02:35.940
So then, that's where the error occurred.

59
00:02:35.940 --> 00:02:37.951
So printing out something like this can be
very useful.

60
00:02:37.951 --> 00:02:40.450
If you're trying to get help from someone
else and you're,

61
00:02:40.450 --> 00:02:43.868
and you're, and you're kind of trying to
debug your function together, okay?

62
00:02:43.868 --> 00:02:44.993
So so that's

63
00:02:44.993 --> 00:02:46.580
the traceback, there.

64
00:02:48.830 --> 00:02:52.140
The debug function doesn't really work
well in the static format

65
00:02:52.140 --> 00:02:54.020
like this, but I'll show, I'll just show
you that, but

66
00:02:55.440 --> 00:02:57.460
But, basically I could debug the l m, so
you can

67
00:02:57.460 --> 00:03:00.610
debug any function, doesn't matter if you
wrote it or not.

68
00:03:00.610 --> 00:03:04.510
So I can debug the l m function, and now
when I call l m y fill

69
00:03:04.510 --> 00:03:07.180
the x it you get this debugging in and

70
00:03:07.180 --> 00:03:09.690
I'll give you the the expression that you
called.

71
00:03:09.690 --> 00:03:11.560
And I'll first thing it will do is it will

72
00:03:11.560 --> 00:03:13.870
print out the entire code of the function,
so this

73
00:03:13.870 --> 00:03:16.565
is a lot longer than so I just I just put
I just cut cut it off in

74
00:03:16.565 --> 00:03:18.490
the middle here but the first thing it
does

75
00:03:18.490 --> 00:03:21.236
is it prints out the whole function body
code okay.

76
00:03:21.236 --> 00:03:24.308
And then you get this little prompt at the
bottom here

77
00:03:24.308 --> 00:03:27.879
the browse [UNKNOWN] so now you're in
what's called the browser.

78
00:03:27.879 --> 00:03:29.039
Okay?

79
00:03:29.039 --> 00:03:34.640
And the browser is just like your r
workspace, actually.

80
00:03:34.640 --> 00:03:38.080
you, you can think of it like a work space
embedded within a work space.

81
00:03:38.080 --> 00:03:38.510
Right?

82
00:03:38.510 --> 00:03:38.780
So,

83
00:03:38.780 --> 00:03:41.450
and but, but the elements of the
workspace.

84
00:03:41.450 --> 00:03:44.670
Are, sorry, so the environment of that

85
00:03:44.670 --> 00:03:47.190
workspace in the browser is your function
environment.

86
00:03:47.190 --> 00:03:52.072
So the things that are in your function
are what are in your environment.

87
00:03:52.072 --> 00:03:54.270
So at, at the very top of this function
you just

88
00:03:54.270 --> 00:03:55.920
actually, there's nothing in your
environment

89
00:03:55.920 --> 00:03:58.320
except for the function arguments, right.

90
00:03:58.320 --> 00:04:01.060
So what are the function arguments?
Well, the first one is the formula?

91
00:04:01.060 --> 00:04:03.850
So I have a formula in my environment
which is this

92
00:04:03.850 --> 00:04:05.922
y tilda x, but that's it.

93
00:04:05.922 --> 00:04:11.202
So anyway so now I can well there are
actually I should say

94
00:04:11.202 --> 00:04:16.629
there are other arguments so l'm too which
are default values.

95
00:04:16.629 --> 00:04:19.424
But they are not, they are not listed
there, but they do, they also, they,

96
00:04:19.424 --> 00:04:23.005
I shouldn't say there is more than just a
formula because there is other arguments.

97
00:04:23.005 --> 00:04:28.610
So here what I do is I press n for next
and it runs the first line.

98
00:04:28.610 --> 00:04:28.970
When I hit

99
00:04:28.970 --> 00:04:30.800
n and then enter and it runs the first
line.

100
00:04:30.800 --> 00:04:32.240
N then enter runs the second line.

101
00:04:32.240 --> 00:04:33.500
N enter third.

102
00:04:33.500 --> 00:04:35.960
I just keep hitting n, n, n, so I run, and
I just

103
00:04:35.960 --> 00:04:38.450
execute each line until I get to the line
where the error occurs.

104
00:04:38.450 --> 00:04:40.530
So when you get to the line where the
error occurs.

105
00:04:40.530 --> 00:04:41.520
And you execute it.

106
00:04:41.520 --> 00:04:43.170
You'll get an error just like you did
before.

107
00:04:43.170 --> 00:04:45.670
It's not going to magically fix the
problem by itself.

108
00:04:45.670 --> 00:04:47.442
But, at least you'll know where that error
occurred, okay?

109
00:04:49.736 --> 00:04:52.770
So and further more, suppose you want

110
00:04:52.770 --> 00:04:55.150
you can debug functions within the
debugger, right?

111
00:04:55.150 --> 00:04:58.445
So, you can I can call, if I want so, I
can call.

112
00:04:58.445 --> 00:05:02.560
So this match.call function I just kind of
stepped right over

113
00:05:02.560 --> 00:05:04.970
it but I could have gone into this
function by calling

114
00:05:04.970 --> 00:05:08.410
debug on match.call before executing it
and then when this

115
00:05:08.410 --> 00:05:11.512
got executed I'd be in the third level of
the browser.

116
00:05:11.512 --> 00:05:14.798
Ah, so these things can nest and then as
you go so they come like a stack

117
00:05:14.798 --> 00:05:16.520
of browser frames right?

118
00:05:16.520 --> 00:05:20.830
So so you can, you can, you can call the
debug function on functions.

119
00:05:20.830 --> 00:05:22.630
While you're, even while you're in the
debugger.

120
00:05:22.630 --> 00:05:24.520
And you can step through functions even
while

121
00:05:24.520 --> 00:05:28.520
you're kind of debugging your top level
functions.

122
00:05:28.520 --> 00:05:34.920
The recover function, so the you can set
the recover to be this kind of error

123
00:05:34.920 --> 00:05:39.410
handler by using the options function.
So you say options error equals recover.

124
00:05:39.410 --> 00:05:39.640
And,

125
00:05:39.640 --> 00:05:41.870
and that will set a global option, right?

126
00:05:41.870 --> 00:05:45.120
So now this will, this will, this behavior
will curve ever,

127
00:05:45.120 --> 00:05:48.900
everything you do as long as your r
session is open.

128
00:05:48.900 --> 00:05:50.960
As soon as you quit it will go away and
then if you start

129
00:05:50.960 --> 00:05:54.231
up R somewhere else it's not going, it's
not going to save that option.

130
00:05:54.231 --> 00:05:56.473
So now I'm going to what I'm trying to do
is

131
00:05:56.473 --> 00:05:59.550
I'm going to read that csv some file that
doesn't exist.

132
00:05:59.550 --> 00:06:02.950
Okay, and then you get an error and

133
00:06:02.950 --> 00:06:05.570
you get the error message, cannot open the
connection.

134
00:06:05.570 --> 00:06:07.500
And you get some warning also.

135
00:06:07.500 --> 00:06:11.470
And now bu, but instead of getting my
console back, I get a little menu here.

136
00:06:11.470 --> 00:06:15.540
And this menu is the function call stack,
okay.

137
00:06:15.540 --> 00:06:17.320
So it's the same thing that you would get

138
00:06:17.320 --> 00:06:19.550
back, if you called trace back after the
error.

139
00:06:19.550 --> 00:06:21.893
Right, so reed.csv is that I called,

140
00:06:21.893 --> 00:06:25.324
remember reed.csv is just a [UNKNOWN] for
reed.tables.

141
00:06:25.324 --> 00:06:30.913
So Reed.csv called reed.table and then
reed.table called the file function,

142
00:06:30.913 --> 00:06:35.613
because we wanted to create a file
connection with my file, no such file.

143
00:06:35.613 --> 00:06:36.210
Right?

144
00:06:36.210 --> 00:06:39.312
And then when it tried to create that file
connection.

145
00:06:39.312 --> 00:06:42.260
Obviously you couldn't find the file, and
that's where the error occurred, okay?

146
00:06:42.260 --> 00:06:45.880
So the error occurred at the third level
in the

147
00:06:45.880 --> 00:06:48.950
function call stacks, so what you can do,
is you

148
00:06:48.950 --> 00:06:51.800
can press a number one, two, three [SOUND]
and then

149
00:06:51.800 --> 00:06:55.460
you can kind of browse the environment of
that function.

150
00:06:55.460 --> 00:06:56.030
So if I want to see

151
00:06:56.030 --> 00:07:00.200
okay, what was the read, what was going on
in read.csv, I can just press

152
00:07:00.200 --> 00:07:03.820
one here, and then it would show me kind
of the environment of the read.csv.

153
00:07:03.820 --> 00:07:05.300
And, and then I can break out of that

154
00:07:05.300 --> 00:07:08.130
and look at the environment for
read.table, and et cetera.

155
00:07:08.130 --> 00:07:10.890
And so you can, if you have a very long
function call stack, you can kind

156
00:07:10.890 --> 00:07:15.240
of jump back and forth to see what was
going on at each, at each function call.

157
00:07:15.240 --> 00:07:18.118
To to try out a pinpoint kind of where the
problem occurs.

158
00:07:18.118 --> 00:07:20.724
Okay.

159
00:07:23.346 --> 00:07:25.960
Okay.

160
00:07:25.960 --> 00:07:30.090
So so just to summarize really quickly
there's, there are

161
00:07:30.090 --> 00:07:33.210
basically three main indications of some
sort of problem or condition.

162
00:07:33.210 --> 00:07:37.080
There's the message warning error and of
the three

163
00:07:37.080 --> 00:07:39.840
only the error will stop execution of the
function.

164
00:07:41.340 --> 00:07:43.310
When you're analyzing a function that has
and you think

165
00:07:43.310 --> 00:07:45.770
has a problem make sure you can reproduce
that problem.

166
00:07:45.770 --> 00:07:48.393
And then you make sure you can articulate
how what do

167
00:07:48.393 --> 00:07:52.907
your expectations and how'd and what the
output are that and how the output differs

168
00:07:52.907 --> 00:07:57.283
from what you were expecting or [LAUGH]
I'd like to say what you are expecting.

169
00:07:57.283 --> 00:08:00.457
And so that the, the interactive tools
trace

170
00:08:00.457 --> 00:08:04.108
back, debug, browser, trace, and recover
can be used.

171
00:08:04.108 --> 00:08:06.200
And it's, and the keyword actually here is
interactive.

172
00:08:06.200 --> 00:08:08.770
The, the reason these tools are useful is
because they are interactive.

173
00:08:08.770 --> 00:08:12.090
You can kind of do things on the console.

174
00:08:12.090 --> 00:08:13.460
And of course the debugging tools

175
00:08:13.460 --> 00:08:15.950
are not a substitute for thinking.

176
00:08:15.950 --> 00:08:18.850
And so you should always think about
writing your code before, you know,

177
00:08:18.850 --> 00:08:21.390
just throwing it to the wind and hoping
the debugger will catch it.