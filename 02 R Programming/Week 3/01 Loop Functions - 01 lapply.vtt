WEBVTT

1
00:00:01.000 --> 00:00:04.810
Loop functions are some of the most
powerful functions in the R language and

2
00:00:04.810 --> 00:00:09.000
they make it kind of very easy to use,
especially in an interactive setting.

3
00:00:09.000 --> 00:00:11.580
The idea behind a loop function is you
want to

4
00:00:11.580 --> 00:00:13.820
execute a loop over an object or a set of

5
00:00:13.820 --> 00:00:17.810
objects in a way that's kind of that does
a

6
00:00:17.810 --> 00:00:20.240
lot of work in, in a very small amount of
space.

7
00:00:20.240 --> 00:00:22.990
That way, you don't have to type as much
on the command line.

8
00:00:22.990 --> 00:00:26.000
Of course, we already learned about loops.
We know about for loops and while

9
00:00:26.000 --> 00:00:27.895
loops, things like that, and those are
all, work very

10
00:00:27.895 --> 00:00:31.620
well; however, they are com, less compact
in a certain way.

11
00:00:31.620 --> 00:00:34.920
So, there are a couple of loop functions
in R

12
00:00:34.920 --> 00:00:37.390
and they usually have the word apply in
them somewhere.

13
00:00:38.570 --> 00:00:45.020
So some of the key ones are lapply,
sapply, apply, tapply, mapply and

14
00:00:45.020 --> 00:00:49.070
the real workhorse function that I, that
I'd like to talk about here is lapply.

15
00:00:49.070 --> 00:00:51.130
And the idea behind lapply is

16
00:00:51.130 --> 00:00:54.140
that you have a list of objects and you
want to loop over

17
00:00:54.140 --> 00:01:00.128
the list of objects and apply a function
to every element of that list.

18
00:01:00.128 --> 00:01:03.114
And so it's a very general concept.

19
00:01:03.114 --> 00:01:04.950
And it can be used very powerfully to do a
lot

20
00:01:04.950 --> 00:01:08.122
of computations in a few, in just a little
bit of typing.

21
00:01:08.122 --> 00:01:12.470
Sapply is a variant of lapply that
simplifies the results.

22
00:01:12.470 --> 00:01:15.620
Apply is a function that operates over the
margins of an array.

23
00:01:15.620 --> 00:01:17.150
So, this is very useful

24
00:01:17.150 --> 00:01:22.300
if you want to take summaries of matrices
or other or, higher dimensional arrays.

25
00:01:22.300 --> 00:01:25.170
Tapply is short for table apply.

26
00:01:25.170 --> 00:01:28.640
And, it applies a function over subsets of
a vector.

27
00:01:28.640 --> 00:01:31.660
And mapply is a multivariate version of
real of lapply.

28
00:01:31.660 --> 00:01:35.070
So I'll go into details about how these
work in a, in a, in a minute.

29
00:01:36.070 --> 00:01:38.600
There's also another function called split

30
00:01:38.600 --> 00:01:41.380
which doesn't actually apply anything to
objects.

31
00:01:41.380 --> 00:01:43.300
But it's often useful

32
00:01:43.300 --> 00:01:45.310
in conjunction with functions like lapply
or

33
00:01:45.310 --> 00:01:48.517
sapply because it splits objects into
sub-pieces.

34
00:01:50.870 --> 00:01:54.030
So, lapply.
Lapply takes three arguments.

35
00:01:54.030 --> 00:01:57.680
Basically the first argument is a list
which is called X.

36
00:01:57.680 --> 00:02:02.060
The second argument is a function or the
name of a function and then

37
00:02:02.060 --> 00:02:05.630
there are other arguments that are, can be
passed to the dot dot dot argument.

38
00:02:05.630 --> 00:02:09.740
And the dot, dot, dot argument is used to
pass arguments that go with the

39
00:02:09.740 --> 00:02:12.020
function that you're being, that's being
applied

40
00:02:12.020 --> 00:02:13.940
to each of the elements in the list.

41
00:02:13.940 --> 00:02:15.960
If X is not a list, then you will

42
00:02:15.960 --> 00:02:17.830
be coerced to a list if possible.

43
00:02:17.830 --> 00:02:21.800
If it's not possible to coerce the object
to a list, then you will get an error.

44
00:02:21.800 --> 00:02:23.710
So the lapply function, you can see, is
very simple.

45
00:02:23.710 --> 00:02:24.940
The code for it is right here.

46
00:02:26.410 --> 00:02:29.180
Basically the func we look for the
function if it's, if the

47
00:02:29.180 --> 00:02:31.815
object is not a list then it's coerced to
a list using

48
00:02:31.815 --> 00:02:35.330
as.list and then the, the rest of the
Lapply function is, is,is

49
00:02:35.330 --> 00:02:39.650
implemented internally in C code to make
it a little bit faster.

50
00:02:39.650 --> 00:02:41.410
So the idea with Lapply

51
00:02:41.410 --> 00:02:43.440
is that you're going to take this list of
things.

52
00:02:43.440 --> 00:02:47.940
And remember a list can contain any, any
number of different types of objects.

53
00:02:47.940 --> 00:02:51.890
So they could be vectors, or matrices, or
data frames, or whatever it may be

54
00:02:51.890 --> 00:02:56.100
and you want to apply a function to each
one of these elements of the list.

55
00:02:56.100 --> 00:02:58.110
And that function is going to return
something.

56
00:02:59.820 --> 00:03:03.360
It may not be the same thing that it
originally was on the list.

57
00:03:03.360 --> 00:03:06.640
So, for example, it may take as an input,
as a vector, but then it may return

58
00:03:06.640 --> 00:03:07.740
a scalar as a result.

59
00:03:07.740 --> 00:03:11.170
So, the function's going to return
something for every single object in that

60
00:03:11.170 --> 00:03:14.890
list, and the return values are going to
be assembled in a new list.

61
00:03:14.890 --> 00:03:17.140
And that's what lapply is going to return.

62
00:03:17.140 --> 00:03:20.610
So lapply, it's key to remember, it always
returns a list.

63
00:03:20.610 --> 00:03:24.880
What goes in may or may not a list but it
will be coerced to a list.

64
00:03:24.880 --> 00:03:26.710
And what comes out will always be a list.

65
00:03:28.170 --> 00:03:29.610
So here's a simple example.

66
00:03:29.610 --> 00:03:31.740
I'm creating a list of two elements, the
first one's called

67
00:03:31.740 --> 00:03:34.242
A, and it's a sequence from one to five,
the second

68
00:03:34.242 --> 00:03:37.940
one is called B, and it's it's ten or more
random variables.

69
00:03:37.940 --> 00:03:40.650
So what I, and then, what I want to do is
I want to loop

70
00:03:40.650 --> 00:03:42.700
over this lists of two elements and apply

71
00:03:42.700 --> 00:03:45.510
the mean function to each of those
elements.

72
00:03:45.510 --> 00:03:49.990
So you can see that when I call Lapply on
x and I apply the mean function I get

73
00:03:49.990 --> 00:03:52.250
another list back, w-, and notice the list
has

74
00:03:52.250 --> 00:03:54.950
the same names as the original list, a and
b.

75
00:03:54.950 --> 00:03:56.810
But now I've got the mean of the first
element and the mean

76
00:03:56.810 --> 00:03:59.200
of the second element.
And so that's how lapply works.

77
00:04:02.520 --> 00:04:04.918
Here I've got a slightly more complicated
list.

78
00:04:04.918 --> 00:04:08.490
I've got four elements and I've got, I'm
calling lapply to each

79
00:04:08.490 --> 00:04:11.170
of those elements and I'm getting the mean
of each of those elements.

80
00:04:11.170 --> 00:04:12.520
So, now I've got a list with four
elements.

81
00:04:12.520 --> 00:04:16.050
The names are preserved and notice, of
course, you know, each of the elements of

82
00:04:16.050 --> 00:04:19.560
the original list was a vector of some, of
a numeric vector of some sort.

83
00:04:19.560 --> 00:04:22.370
But what I'm getting back is a vector with
just

84
00:04:22.370 --> 00:04:24.790
a single number in it, for each element of
the list.

85
00:04:27.430 --> 00:04:30.680
So, here's another way I way to call,
lapply.

86
00:04:30.680 --> 00:04:33.330
Here I'm creating a sequence one, of x, 1
to 4,

87
00:04:33.330 --> 00:04:37.950
and I'm calling runif, so, which generates
a uniform random variables,

88
00:04:40.560 --> 00:04:44.250
to, using a random number generator.

89
00:04:44.250 --> 00:04:47.410
Now, the first argument to runif, is the
number

90
00:04:47.410 --> 00:04:49.350
of uniform random variables that you want
to generate.

91
00:04:49.350 --> 00:04:52.410
So if I say runif 1 it's going to generate
a single random variable.

92
00:04:52.410 --> 00:04:55.860
If I say runif 2, it's going to generate a
vector of two random variables.

93
00:04:55.860 --> 00:04:59.710
So, here I'm applying l, the runif
function to sequence 1, 2, 3, 4.

94
00:04:59.710 --> 00:05:01.716
So, what I'm going to get is a list where

95
00:05:01.716 --> 00:05:05.370
the first element is a single random
number random uniform.

96
00:05:05.370 --> 00:05:05.766
The second

97
00:05:05.766 --> 00:05:07.750
element's going to be a vector of two
random uniforms.

98
00:05:07.750 --> 00:05:09.630
The third element's going to be a vector
of three.

99
00:05:09.630 --> 00:05:13.800
And the fourth element's going to be a
vector for random uniforms.

100
00:05:13.800 --> 00:05:17.300
And so ret, you'll note, if you know the
runif function, you'll know that

101
00:05:17.300 --> 00:05:22.930
it has other arguments to it beyond the,
the number of uniforms to generate.

102
00:05:22.930 --> 00:05:25.980
But those other arguments have default
values so I don't need to specify them.

103
00:05:28.000 --> 00:05:31.570
Now, suppose I want to call the runif
function on each one of these elements of

104
00:05:31.570 --> 00:05:34.020
X but I didn't want to just generate

105
00:05:34.020 --> 00:05:36.510
a uniform between zero and one which is
default.

106
00:05:36.510 --> 00:05:39.759
Suppose I want to generate a uniform
between zero and ten so now I

107
00:05:39.759 --> 00:05:43.819
need to pass some arguments to the runif
function which are not the default values.

108
00:05:43.819 --> 00:05:46.910
In particular I need to change the max
value.

109
00:05:46.910 --> 00:05:48.550
So I can do that through with lapply by

110
00:05:48.550 --> 00:05:52.160
passing these arguments through the dot
dot dot argument.

111
00:05:52.160 --> 00:05:53.150
So here I'm calling lapply

112
00:05:53.150 --> 00:05:56.400
on X, I'm calling the run, I'm passing the
runif function, but that I'm

113
00:05:56.400 --> 00:05:59.960
specifying that I want the min to be zero
and the max to be ten.

114
00:05:59.960 --> 00:06:02.340
So now when I the, the list that I get out

115
00:06:02.340 --> 00:06:06.430
of this has random uniforms that are
between zero and ten.

116
00:06:10.740 --> 00:06:13.454
So lapply and the associated functions
make heavy

117
00:06:13.454 --> 00:06:16.620
use of what, of what are called anonymous
functions.

118
00:06:16.620 --> 00:06:18.520
Anonymous functions are functions that
don't have

119
00:06:18.520 --> 00:06:20.120
names, so you don't assign them a

120
00:06:20.120 --> 00:06:24.500
name of some sort but you can kind of
generate them on the fly.

121
00:06:24.500 --> 00:06:26.285
So here is a just a quick example, I'm
going

122
00:06:26.285 --> 00:06:29.200
to create a list that contains two
matrices in it.

123
00:06:29.200 --> 00:06:34.250
The first is a mat, a two by two matrix
and the second is a three by two matrix.

124
00:06:34.250 --> 00:06:35.345
So you can see the list here.

125
00:06:35.345 --> 00:06:36.100
There's two elements.

126
00:06:36.100 --> 00:06:36.960
They are named A and B.

127
00:06:36.960 --> 00:06:39.540
And suppose I want to, I want to extract

128
00:06:39.540 --> 00:06:42.700
the first column from each one of these
matrices.

129
00:06:45.360 --> 00:06:49.780
So what I can do is I can call lapply so,
there's no function that, out there that

130
00:06:49.780 --> 00:06:55.390
already extracts the first column of a
matrix but this is easy to do.

131
00:06:55.390 --> 00:06:57.710
You can just write a function that just
takes

132
00:06:57.710 --> 00:07:00.060
the first element, the first column of
that matrix.

133
00:07:00.060 --> 00:07:02.210
So here I'm going to call lapply on x.

134
00:07:02.210 --> 00:07:03.650
And I'm, I'm going to write, I'm going to
write the

135
00:07:03.650 --> 00:07:05.580
function right here, so I'm going to say
function, and

136
00:07:05.580 --> 00:07:07.570
then I'm, I'm going to give it an
argument, and

137
00:07:07.570 --> 00:07:10.788
then given that argument, I extract the
first column.

138
00:07:10.788 --> 00:07:13.930
So here, when I call Lapply with this
function I get

139
00:07:13.930 --> 00:07:16.760
the first column from A, and the first
column from B.

140
00:07:16.760 --> 00:07:20.830
So this function doesn't exist except
within the context of Lapply,

141
00:07:20.830 --> 00:07:25.600
and after the Lapply function is finished,
the function basically goes away.

142
00:07:25.600 --> 00:07:29.000
So that's an anonymous function, because
it doesn't have a name and lapply

143
00:07:29.000 --> 00:07:30.120
and a lot of these other types

144
00:07:30.120 --> 00:07:33.230
of functions use anonymous functions very
heavily.

145
00:07:33.230 --> 00:07:36.050
Because unless there already exists a

146
00:07:36.050 --> 00:07:39.170
function that does the operation that you
want to do, you're

147
00:07:39.170 --> 00:07:42.290
going to have to write the function kind
of on the spot.

148
00:07:45.170 --> 00:07:48.404
So sapply is just a variant of lapply and
all it

149
00:07:48.404 --> 00:07:52.470
does is it tries to simplify the result of
lapply if possible.

150
00:07:52.470 --> 00:07:56.800
So recall that lapply always returns a
list but sometimes

151
00:07:56.800 --> 00:07:59.490
you don't want a list, sometimes you just
want something different.

152
00:07:59.490 --> 00:08:03.840
So for example, if the, if the result is a
list where every element is a length

153
00:08:03.840 --> 00:08:06.560
1 then what sapply will do is it'll return

154
00:08:06.560 --> 00:08:09.120
a vector of all,of all, of all those
elements.

155
00:08:09.120 --> 00:08:10.200
Usually you don't want an

156
00:08:10.200 --> 00:08:12.860
ele, a list where every, where every
element is a single number,

157
00:08:12.860 --> 00:08:16.250
for example, and so sapply will simplify
that into just a vector.

158
00:08:17.610 --> 00:08:21.974
if, if the result is a list where every
element is a vector of the same length.

159
00:08:21.974 --> 00:08:24.046
For example, if the, if the list comes
back

160
00:08:24.046 --> 00:08:26.920
and every element has a length five, for
example.

161
00:08:26.920 --> 00:08:29.330
Then what sapply will do it'll, it'll put
those elements in a

162
00:08:29.330 --> 00:08:34.220
matrix that's, that's five by however long
the matrix, the, the list is.

163
00:08:34.220 --> 00:08:35.350
So that, that's often

164
00:08:35.350 --> 00:08:37.000
what you want to happen.

165
00:08:37.000 --> 00:08:38.584
But if it, if it can't figure out how to

166
00:08:38.584 --> 00:08:40.888
simplify the object when it comes back,
for example, if

167
00:08:40.888 --> 00:08:43.144
the object has many different types of
things that comes

168
00:08:43.144 --> 00:08:45.850
back then it's just going to then it won't
do anything.

169
00:08:45.850 --> 00:08:46.880
It will just return a list.

170
00:08:48.225 --> 00:08:50.695
So here in this, in this example when I
called

171
00:08:50.695 --> 00:08:53.580
lapply and I applied the mean to
everything what happens

172
00:08:53.580 --> 00:08:55.300
is that I got a list back that's of length

173
00:08:55.300 --> 00:08:57.966
four and every element of the list is a
single number.

174
00:08:57.966 --> 00:09:00.480
So it would make, it would be a lot nicer
if I just got

175
00:09:00.480 --> 00:09:02.830
my list back that was just, I'm sorry, if
I

176
00:09:02.830 --> 00:09:05.310
just got a vector back with all these
numbers in it.

177
00:09:05.310 --> 00:09:06.898
And that's exactly what sapply does.

178
00:09:06.898 --> 00:09:09.870
So sapply called on x with the mean
function

179
00:09:09.870 --> 00:09:12.230
gives me a vector with four numbers in it.

180
00:09:12.230 --> 00:09:16.060
Of course, if I called mean on the, on the
list by itself, that's

181
00:09:16.060 --> 00:09:19.460
not really going to work because mean is
not meant to be applied to lists.

182
00:09:19.460 --> 00:09:21.570
And so you'll get a warning message of n a
back.