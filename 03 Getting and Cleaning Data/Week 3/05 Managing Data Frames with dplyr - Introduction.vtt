WEBVTT

1
00:00:03.730 --> 00:00:06.746
Hey everyone, this lecture is
about the dplyr package in R,

2
00:00:06.746 --> 00:00:10.544
which is a package specifically designed
to help you work with data frames.

3
00:00:10.544 --> 00:00:15.845
So in this lecture I'll just cover
the basics to introduce the package and

4
00:00:15.845 --> 00:00:22.060
we'll talk about the verbs arrange,
filter, select, mutate and rename.

5
00:00:22.060 --> 00:00:26.270
And we'll show you how to use these
functions to manipulate data frames and

6
00:00:26.270 --> 00:00:31.510
to manage data in a more efficient and
kind of, easy-to-use way.

7
00:00:31.510 --> 00:00:35.170
The dplyr package is about working
with data frames because data

8
00:00:35.170 --> 00:00:38.890
frames are key data structure in
statistics, and in R, in general.

9
00:00:38.890 --> 00:00:43.930
So the basic assumptions that are made by
the dplyr package are that the data in a,

10
00:00:43.930 --> 00:00:49.830
in a given data frame, each
observation is represented by one row.

11
00:00:49.830 --> 00:00:53.630
And then every column represents
a variable or a measure or characteristic.

12
00:00:53.630 --> 00:00:56.240
So, these are con,
basic concepts from the I,

13
00:00:56.240 --> 00:00:59.200
from the notion of kind of tidy data,
right?

14
00:00:59.200 --> 00:01:03.250
And so the so there are a number
of different implementations for

15
00:01:03.250 --> 00:01:06.700
the dplyr package, in terms of back
ends for representing data frames.

16
00:01:06.700 --> 00:01:10.610
But we'll use for this presentation
just the default R implementation.

17
00:01:10.610 --> 00:01:13.560
But you can dplyr with things
like the data table package and

18
00:01:13.560 --> 00:01:15.009
with relational database systems.

19
00:01:17.700 --> 00:01:21.960
So the dplyr package was developed
by Hadley Wickham at RStudio in,

20
00:01:21.960 --> 00:01:24.160
it often can be thought
of as an optimized and

21
00:01:24.160 --> 00:01:27.980
distilled version of the plyr package
which we also talked about here.

22
00:01:27.980 --> 00:01:31.880
And now, and it doesn't necessarily
conceptually provide any new

23
00:01:31.880 --> 00:01:36.190
functionality, but it greatly simplifies a
lot of the existing functionality in R and

24
00:01:36.190 --> 00:01:38.750
it makes it a lot faster.

25
00:01:38.750 --> 00:01:39.350
And the verym and

26
00:01:39.350 --> 00:01:42.630
one of the reasons it's a lot faster is
because a lot of the operations are coded

27
00:01:42.630 --> 00:01:45.620
in C++ you know, kind of at a low level.

28
00:01:45.620 --> 00:01:49.140
So some of the basic
dplyr verbs are select,

29
00:01:49.140 --> 00:01:53.708
filter, arrange, rename, and
mutate as well as summarize.

30
00:01:53.708 --> 00:01:58.264
And so we're going to cover each one
of these, verbs, so to speak, in the,

31
00:01:58.264 --> 00:02:02.630
in the, in the grammar of data
manipulation in, in this presentation.

32
00:02:02.630 --> 00:02:07.530
So, select basically returns a subset
of the columns of a data frame.

33
00:02:07.530 --> 00:02:12.190
Filter extracts a subset of
rows arrange allows you to

34
00:02:12.190 --> 00:02:16.853
reorder the rows of a data frame while
preserving the order of the other columns.

35
00:02:16.853 --> 00:02:20.310
rename, lets you rename the variable,
and mutate kind of transforms or

36
00:02:20.310 --> 00:02:22.700
adds new variables to a data frame.

37
00:02:22.700 --> 00:02:24.320
And then finally summarize,

38
00:02:24.320 --> 00:02:26.711
helps you generate summary
statistics of the data frame.

39
00:02:29.670 --> 00:02:33.060
So all the dplyr functions kind
of have a similar format, and

40
00:02:33.060 --> 00:02:35.090
so the first argument
is always a data frame.

41
00:02:36.090 --> 00:02:40.730
And then the subsequent arguments are just
kind of, describe, what to do with it.

42
00:02:40.730 --> 00:02:42.750
So, in the select function, for

43
00:02:42.750 --> 00:02:46.510
example, you would refer to different
column names by their name.

44
00:02:46.510 --> 00:02:50.670
In the filter function,
you might create a kind of logical,

45
00:02:50.670 --> 00:02:54.740
a logical, test, to see two subset rows.

46
00:02:54.740 --> 00:02:55.830
And so that, that's what,

47
00:02:55.830 --> 00:02:59.960
that's what goes into the second
argument of each one of these functions.

48
00:02:59.960 --> 00:03:03.230
The result is always a new data frame, so
each one of these functions takes data

49
00:03:03.230 --> 00:03:05.560
frame as an argument and
always returns a data frame.

50
00:03:07.300 --> 00:03:10.080
So and so you have to be careful
that your data frames are always

51
00:03:10.080 --> 00:03:11.700
properly formatted and annotated.

52
00:03:11.700 --> 00:03:15.038
For example, the factor levels are,
are all kind of annotated and

53
00:03:15.038 --> 00:03:19.333
that the variable names are all there, for
any, for all these functions to be useful.