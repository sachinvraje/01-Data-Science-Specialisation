WEBVTT

1
00:00:00.320 --> 00:00:03.220
This is a continuation of our
lecture on Regular Expressions.

2
00:00:04.390 --> 00:00:06.990
So we're gonna continue
talking about metacharacters,

3
00:00:06.990 --> 00:00:10.900
which we can think of as the grammar,
where the literals are actually the words

4
00:00:10.900 --> 00:00:13.690
in the language that we're
going to be talking about.

5
00:00:13.690 --> 00:00:17.390
So another metacharacter
is actually just the dot.

6
00:00:17.390 --> 00:00:21.600
And so
the dot means it could be any character.

7
00:00:21.600 --> 00:00:26.950
So if you search for the term 9.11,
what that's gonna look for is any

8
00:00:26.950 --> 00:00:31.630
place where it sees a 9, followed by any
possible character followed by an 11.

9
00:00:31.630 --> 00:00:35.011
So it matches all of these
phrases because there's a 9 and

10
00:00:35.011 --> 00:00:39.639
an 11 separated by exactly one character
in all of these different examples.

11
00:00:42.425 --> 00:00:45.859
Another metacharacter is the or
metacharacter.

12
00:00:45.859 --> 00:00:49.208
And so what it can be used is to
combine two different expressions.

13
00:00:49.208 --> 00:00:52.710
The sub expressions
are called alternatives.

14
00:00:52.710 --> 00:00:56.880
So here it's combining the expression
flood, and the expression fire.

15
00:00:56.880 --> 00:00:59.050
And they are the two alternatives.

16
00:00:59.050 --> 00:01:01.580
So we'll match all of these lines
because there's either fire or

17
00:01:03.010 --> 00:01:05.190
flood in every single
line that we see here.

18
00:01:09.770 --> 00:01:12.170
You can include up to any number
of alternatives that you like.

19
00:01:12.170 --> 00:01:16.950
So here it can match flood,
earthquake, hurricane, or cold fire.

20
00:01:16.950 --> 00:01:21.080
So all of these different lines
get matched even though it's

21
00:01:21.080 --> 00:01:23.800
a different literal that's
identifying in every single one.

22
00:01:25.900 --> 00:01:29.280
The alternatives can also be expressions,
regular expressions,

23
00:01:29.280 --> 00:01:30.150
and not just literals.

24
00:01:30.150 --> 00:01:35.260
So for example, what we're searching for
here is the beginning of the line and

25
00:01:35.260 --> 00:01:39.080
then either a capital or lower case good,
or anywhere in the line a [Bb]ad.

26
00:01:39.080 --> 00:01:44.190
So for example, here you see good
at the beginning of the line.

27
00:01:44.190 --> 00:01:48.734
And here you see bad and it doesn't have
to necessarily be at the beginning of

28
00:01:48.734 --> 00:01:53.645
the line, because the alternative here
doesn't have a carrot at the beginning.

29
00:01:53.645 --> 00:02:01.830
An alternative is to include parenthesis
to constrain the alternatives.

30
00:02:01.830 --> 00:02:06.494
So here, we're looking at the beginning
of the line and you have to have

31
00:02:06.494 --> 00:02:11.186
either good or bad lowercase or
uppercase at the beginning of the line.

32
00:02:11.186 --> 00:02:14.514
But in this case, we've now constrained,
even if we're looking for bad,

33
00:02:14.514 --> 00:02:16.493
it has to find it at
the beginning of the line.

34
00:02:19.500 --> 00:02:23.267
If you have a question mark that
follows a parenthesis like this,

35
00:02:23.267 --> 00:02:26.564
it suggests that the indicated
expression is optional.

36
00:02:26.564 --> 00:02:32.560
So here we have a lower case or
a capital W and then we have a period.

37
00:02:32.560 --> 00:02:34.890
And it's optional in
this particular phrase.

38
00:02:34.890 --> 00:02:38.460
So we're looking for George Bush with
potentially the W in the middle, but

39
00:02:38.460 --> 00:02:39.310
it'll match this line.

40
00:02:39.310 --> 00:02:42.801
Because it doesn't necessarily have to
have the W in the middle to be able

41
00:02:42.801 --> 00:02:43.382
to find it.

42
00:02:46.152 --> 00:02:50.491
Something to note is that here we actually
have to escape the character dot, and

43
00:02:50.491 --> 00:02:54.829
that's because dot, it can be viewed as
a metacharacter, and so by adding this

44
00:02:54.829 --> 00:02:59.170
backslash what we've done is said don't
consider this to be a metacharacter,

45
00:02:59.170 --> 00:03:01.100
consider it to be the literal dot.

46
00:03:04.550 --> 00:03:06.420
Some more metacharacters are star and
the plus signs.

47
00:03:06.420 --> 00:03:11.366
So star means repeat any number of
times including none of the item,

48
00:03:11.366 --> 00:03:15.200
and plus means at least one of the item.

49
00:03:15.200 --> 00:03:19.250
So here we are searching for
something between parentheses.

50
00:03:19.250 --> 00:03:22.170
And it can be any character
repeated any number of times.

51
00:03:22.170 --> 00:03:25.470
So that will match everything from
something like this where you have

52
00:03:25.470 --> 00:03:28.270
a phrase in between the parentheses
to something like this where you

53
00:03:28.270 --> 00:03:30.900
just have parentheses with
absolutely nothing in between.

54
00:03:30.900 --> 00:03:35.453
Because the star can include,
including no repetition at all.

55
00:03:38.200 --> 00:03:41.369
Remember the plus sign includes
at least one of the item.

56
00:03:41.369 --> 00:03:46.634
So for example, here we're looking for
at least one number followed

57
00:03:46.634 --> 00:03:51.895
by any number of characters followed
by at least one number again.

58
00:03:51.895 --> 00:03:57.015
So here we see one number followed by
some large number of characters followed

59
00:03:57.015 --> 00:03:59.135
by another number again.

60
00:03:59.135 --> 00:04:01.915
You see this again here.

61
00:04:01.915 --> 00:04:04.555
And so this allows us to look for
any possible combination of numbers that

62
00:04:04.555 --> 00:04:08.750
are separated by something
other than numbers.

63
00:04:08.750 --> 00:04:12.260
We can use the curly brackets as interval
qualifiers to let us specify both

64
00:04:12.260 --> 00:04:15.100
the minimum and the maximum number
of times to match an expression.

65
00:04:15.100 --> 00:04:18.510
So here what we're looking for
is bush, either capital or

66
00:04:18.510 --> 00:04:23.460
lower case.

67
00:04:23.460 --> 00:04:24.000
And at the end debate.

68
00:04:24.000 --> 00:04:25.660
And between what we're looking for
is at least one space.

69
00:04:25.660 --> 00:04:29.970
Following by something that's not a space.

70
00:04:29.970 --> 00:04:35.718
Followed by at least one space, I don't
wanna see that between one and five times.

71
00:04:35.718 --> 00:04:39.300
In other words we wanna see
something like space word space,

72
00:04:39.300 --> 00:04:40.450
up between one and five times.

73
00:04:40.450 --> 00:04:45.278
So that will match all of these because in
this case there are five words that occur

74
00:04:45.278 --> 00:04:47.200
between [Bb]ush, debates.

75
00:04:48.870 --> 00:04:52.061
In this case, there are three words
that occur between Bush and debates,

76
00:04:52.061 --> 00:04:52.688
and so forth.

77
00:04:52.688 --> 00:04:57.044
So as long as there's between one and
five word like objects between the two,

78
00:04:57.044 --> 00:04:59.938
we'll discover it with
this regular expression.

79
00:04:59.938 --> 00:05:02.904
If you use m,n within the curly bracket,

80
00:05:02.904 --> 00:05:06.813
that means at least m times but
not more than n matches.

81
00:05:06.813 --> 00:05:11.290
If you only use one number m,
it means exactly that many matches.

82
00:05:11.290 --> 00:05:16.820
If you use m, that means at least m
matches to that regular expression.

83
00:05:16.820 --> 00:05:22.180
In most implementations of regular
expressions the parentheses

84
00:05:22.180 --> 00:05:25.890
not only limit the scope of
the alternatives provided by this or, but

85
00:05:25.890 --> 00:05:29.910
they can also be used to remember
the text matched by the self expression.

86
00:05:31.570 --> 00:05:34.890
We refer to the matched
text with escaped numbers.

87
00:05:34.890 --> 00:05:39.400
Like escape one, escape two and so forth.

88
00:05:39.400 --> 00:05:45.210
So, for example, here what we're looking
for is a space followed by some,

89
00:05:45.210 --> 00:05:50.330
at least one, but possibly more
characters followed by at least one space

90
00:05:51.910 --> 00:05:56.780
followed by the exact same match
that we saw within the parenthesis.

91
00:05:56.780 --> 00:06:00.547
So for example here we see night,
space, night.

92
00:06:00.547 --> 00:06:04.403
Which will match this part plus a space.

93
00:06:04.403 --> 00:06:06.300
And then a replication of
the exact same phrase.

94
00:06:06.300 --> 00:06:09.210
So that'll happen again
with blah blah blah.

95
00:06:09.210 --> 00:06:10.870
Or so so itchy and so forth.

96
00:06:10.870 --> 00:06:14.150
So that's looking for
repetition of a particular phrase.

97
00:06:17.380 --> 00:06:20.650
The star is greedy, so
it always matches the longest possible

98
00:06:20.650 --> 00:06:22.160
string that satisfies
the regular expression.

99
00:06:22.160 --> 00:06:24.850
So in this case we're starting
at the beginning of a string and

100
00:06:24.850 --> 00:06:28.620
we're looking for
an S followed by some possibly large

101
00:06:28.620 --> 00:06:31.495
number of characters
followed by another s.

102
00:06:31.495 --> 00:06:34.986
And so it's gonna match the entire
phrase here, because it goes for

103
00:06:34.986 --> 00:06:38.182
the longest possible string
that satisfies the expression.

104
00:06:38.182 --> 00:06:42.147
And that's true for all of these phrases,
because they all start with an s and

105
00:06:42.147 --> 00:06:42.892
end with an s.

106
00:06:42.892 --> 00:06:47.817
[SOUND] If we want to make it less greedy,
then what we can do is we can

107
00:06:47.817 --> 00:06:53.114
actually use this question mark to
change the greediness of the star.

108
00:06:53.114 --> 00:06:55.120
So now we start with the S.

109
00:06:55.120 --> 00:06:58.062
Now we follow up with some
smaller number of characters,

110
00:06:58.062 --> 00:07:01.496
it's not going to try to find
the maximum like through the string,

111
00:07:01.496 --> 00:07:04.399
followed by something with
an S at the end of the string.

112
00:07:05.930 --> 00:07:06.700
So in summary,

113
00:07:06.700 --> 00:07:10.250
regular expressions are used in many
different languages, not just in R.

114
00:07:10.250 --> 00:07:14.010
They're composed of literals, that's
the actual text that you're looking for.

115
00:07:14.010 --> 00:07:16.880
And metacharacters which allows
us to look at alternatives,

116
00:07:16.880 --> 00:07:21.250
or look at specific places in a line, or
look at places where there are spaces.

117
00:07:21.250 --> 00:07:23.290
And find classes of characters or words.

118
00:07:23.290 --> 00:07:27.731
Text processing via regular expression is
particularly powerful when you're dealing

119
00:07:27.731 --> 00:07:29.479
with sort of unfriendly sources.

120
00:07:29.479 --> 00:07:32.537
So, sources where the data may
be in free text format, or

121
00:07:32.537 --> 00:07:34.084
in a structure data format.

122
00:07:34.084 --> 00:07:37.870
Where you're trying to just get
an access to a particular phrase.

123
00:07:37.870 --> 00:07:42.150
They're typically used with the functions
grep, grepl, sub, gsub like we've talked

124
00:07:42.150 --> 00:07:46.630
about when we're searching for strings or
trying to do some kind of text

125
00:07:46.630 --> 00:07:50.800
processing to either the variable names or
to the variables themselves.

126
00:07:50.800 --> 00:07:54.890
I'd like to thank Mark Hansen for some
of the lecture material in this lecture.

127
00:07:54.890 --> 00:07:56.428
For Roger Payne for putting it together.