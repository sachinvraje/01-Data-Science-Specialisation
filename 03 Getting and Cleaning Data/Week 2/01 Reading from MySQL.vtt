WEBVTT

1
00:00:00.440 --> 00:00:03.980
This lecture's about reading data from a
MySQL database.

2
00:00:03.980 --> 00:00:08.710
MySQL's one of the most widely used open
source databases, and it's widely

3
00:00:08.710 --> 00:00:10.590
used because it's, partially because it's
free

4
00:00:10.590 --> 00:00:12.730
but also because it works really well.

5
00:00:12.730 --> 00:00:15.250
And it's, again, widely used in
Internet-based applications.

6
00:00:16.500 --> 00:00:19.460
Data are structured in databases, and then
the

7
00:00:19.460 --> 00:00:24.100
databases, within each database, there's a
series of tables.

8
00:00:24.100 --> 00:00:26.160
And then within the tables, there a series
of fields.

9
00:00:26.160 --> 00:00:29.820
So, you can think of each table sort of as
the data set,

10
00:00:29.820 --> 00:00:33.800
and each field as, say, one of the calms
of that data set.

11
00:00:33.800 --> 00:00:36.540
So, each row in the database is called a
record.

12
00:00:36.540 --> 00:00:39.810
If you want to know a little bit more
about MySQL structure, you can

13
00:00:39.810 --> 00:00:41.790
look at the the Wikipedia page,

14
00:00:41.790 --> 00:00:45.396
or there's quite extensive documentation
at MySQL.com.

15
00:00:45.396 --> 00:00:50.590
So, here's an example structure that you
would get for a particular database.

16
00:00:50.590 --> 00:00:54.270
So, what you have is here this is a
database of employees.

17
00:00:54.270 --> 00:00:57.400
And so, what you might have here are

18
00:00:57.400 --> 00:01:00.140
several different tables that are all
linked together.

19
00:01:00.140 --> 00:01:02.540
So, for example, you might have the
departments

20
00:01:02.540 --> 00:01:06.640
that the employees are employed in, the
employees themselves.

21
00:01:06.640 --> 00:01:09.940
You might have information about their
salaries in a different table, and

22
00:01:09.940 --> 00:01:14.570
you might have information about who their
managers are in yet another table.

23
00:01:14.570 --> 00:01:17.320
And information about their titles in yet
another table.

24
00:01:17.320 --> 00:01:19.950
For each table, you get a slightly
different kind of data type.

25
00:01:19.950 --> 00:01:22.244
And so, one thing to note is that what

26
00:01:22.244 --> 00:01:25.352
this data table pretty much shows is each
table you

27
00:01:25.352 --> 00:01:28.090
can think of is corresponding to, so one
box

28
00:01:28.090 --> 00:01:31.161
corresponds to one data frame in R, so to
speak.

29
00:01:31.161 --> 00:01:34.563
And, all of these are listed variables
here, or you could think

30
00:01:34.563 --> 00:01:37.495
of it as the column names for that data
frame in R.

31
00:01:37.495 --> 00:01:41.015
And so, you'll notice that one of the,
sort of, common ids

32
00:01:41.015 --> 00:01:45.860
appears in all of these tables, so that
they're, sort of, linked tables.

33
00:01:45.860 --> 00:01:50.970
So, it's possible to go and sort of
access, say, for an employee, which

34
00:01:50.970 --> 00:01:54.720
department they come from and what their
salary is and what their title is.

35
00:01:55.760 --> 00:02:00.190
And so, you could figure out also who
their department manager is, and then the

36
00:02:00.190 --> 00:02:02.980
department managers are then organized
into departments sort

37
00:02:02.980 --> 00:02:05.360
of in a, sort of a structured format.

38
00:02:05.360 --> 00:02:07.700
So, you can follow that back and find out
who the employees are.

39
00:02:07.700 --> 00:02:11.270
So, this is an example of MySQL database,
and so you have the

40
00:02:11.270 --> 00:02:15.330
data sorted all these tables, and you
want to be able to access them.

41
00:02:15.330 --> 00:02:17.010
So, the first step in the using the MySQL

42
00:02:17.010 --> 00:02:19.500
package is actually installing MySQL, so
this is a

43
00:02:19.500 --> 00:02:21.610
little bit complicated because it depends
a lot on

44
00:02:21.610 --> 00:02:24.710
your operating system and the particular
structure that you have.

45
00:02:24.710 --> 00:02:26.960
So, if you go to this website that I've
linked to down

46
00:02:26.960 --> 00:02:30.120
here at the bottom, you'll be able to
install MySQL, and you

47
00:02:30.120 --> 00:02:33.040
can see that there's a version of MySQL
for just about every

48
00:02:33.040 --> 00:02:36.740
kind of operating system that you might be
interested in installing it on.

49
00:02:36.740 --> 00:02:39.040
And so, there are pretty explicit
instructions on how

50
00:02:39.040 --> 00:02:41.770
to install MySQL on all of those web
sites.

51
00:02:41.770 --> 00:02:46.370
We're actually going to be showing in this
lecture, an example of a web-facing MySQL

52
00:02:46.370 --> 00:02:50.320
server that we'll be able to access, but
as a act of good citizenship to

53
00:02:50.320 --> 00:02:54.220
the world I would appreciate if you didn't
all go and try to access that

54
00:02:54.220 --> 00:02:56.680
one server because we'll probably
overwhelm them with

55
00:02:56.680 --> 00:02:58.030
the large number of people in the class.

56
00:02:58.030 --> 00:03:01.110
So a better example is to try to create
MySQL

57
00:03:01.110 --> 00:03:04.770
database on your own system and then play
around with it.

58
00:03:06.070 --> 00:03:09.270
So, the first thing that you need to do is
install RMySQL

59
00:03:09.270 --> 00:03:15.444
with an R, so on a Mac, you can just do
install.packagesRMySQL.

60
00:03:15.444 --> 00:03:18.140
For Windows, it's actually a little bit
more complicated

61
00:03:18.140 --> 00:03:20.000
because of the way that the database
drivers need to

62
00:03:20.000 --> 00:03:22.270
be set up and so forth, so you can
actually

63
00:03:22.270 --> 00:03:25.910
see the official instructions here on this
website and then

64
00:03:25.910 --> 00:03:27.990
this guide I found to be actually quite a

65
00:03:27.990 --> 00:03:31.180
bit more sort of intuitive and useful so,
if you

66
00:03:31.180 --> 00:03:33.010
are having a little bit of trouble getting
it installed

67
00:03:33.010 --> 00:03:35.290
on Windows, that might be a good place to
go.

68
00:03:35.290 --> 00:03:38.300
If you have more trouble, please go to the
forums and ask questions.

69
00:03:40.040 --> 00:03:42.770
So, we're going to be using a web-facing
version of a

70
00:03:42.770 --> 00:03:45.780
MySQL database, so that we can just show
how the R

71
00:03:45.780 --> 00:03:49.780
of MySQL package works, without having to
install R my, install

72
00:03:49.780 --> 00:03:52.990
MySQL and go through the process of
actually building that database.

73
00:03:54.230 --> 00:03:55.820
The important point to keep in mind here
is

74
00:03:55.820 --> 00:03:59.060
that as a data scientist what role that
you will

75
00:03:59.060 --> 00:04:02.440
have is likely to collect data from a
database, and

76
00:04:02.440 --> 00:04:04.680
maybe later you're going to put some data
back in it.

77
00:04:04.680 --> 00:04:06.890
But usually, the basic data collection has

78
00:04:06.890 --> 00:04:09.890
already been formed before you get there,
so

79
00:04:09.890 --> 00:04:14.520
you usually be handed a database and
trying, having to get data out of it.

80
00:04:14.520 --> 00:04:16.350
So, this is information about the human
genome

81
00:04:16.350 --> 00:04:19.390
that's collected by University of
California Santa Cruz.

82
00:04:19.390 --> 00:04:22.180
It's one of the most famous databases for
genomic.

83
00:04:22.180 --> 00:04:26.660
And so, they have a public facing MySQL
page, sort of MySQL server.

84
00:04:26.660 --> 00:04:30.100
And so it gives you information here on
how to connect.

85
00:04:30.100 --> 00:04:31.690
If you have MySQL installed on your

86
00:04:31.690 --> 00:04:34.830
computer, how to connect to their MySQL
server.

87
00:04:34.830 --> 00:04:38.630
And so we're going to use that information
actually just connect with an R.

88
00:04:38.630 --> 00:04:40.920
And what we're going to try to do is
access the database

89
00:04:40.920 --> 00:04:42.230
and collect some information about a

90
00:04:42.230 --> 00:04:43.880
particular genome that we're interested
in.

91
00:04:45.100 --> 00:04:52.070
So, the first thing that we need to do is
once you've loaded RMySQL package in R.

92
00:04:52.070 --> 00:04:55.152
You're going to use the dbConnect command
to connect to a

93
00:04:55.152 --> 00:04:58.683
database, and so in this case, it's a
MySQL database.

94
00:04:58.683 --> 00:05:00.927
You can actually use this dbConnect to
actually

95
00:05:00.927 --> 00:05:03.640
connect to other kinds of databases as
well.

96
00:05:03.640 --> 00:05:06.170
And so, you saw from the page on the
previous

97
00:05:06.170 --> 00:05:09.690
slide that the user that we're going to
pass it is genome.

98
00:05:09.690 --> 00:05:11.340
And then, you're going to pass it, the
host,

99
00:05:11.340 --> 00:05:13.380
which is just where the MySQL server is.

100
00:05:13.380 --> 00:05:16.443
And in this case, it's this website, web
address here.

101
00:05:16.443 --> 00:05:17.691
So what this does is it opens a

102
00:05:17.691 --> 00:05:20.670
connection, and that connection is given
this handle: ucscDb.

103
00:05:20.670 --> 00:05:26.040
So, you should always assign the handle
each connection a handle.

104
00:05:26.040 --> 00:05:30.540
And then, what you can do is you can
actually apply a query to that database.

105
00:05:30.540 --> 00:05:33.960
So, what you can do is you can use the
dbGetQuery command.

106
00:05:33.960 --> 00:05:37.210
So, what that does is it'll go to the
connection.

107
00:05:37.210 --> 00:05:39.720
In this case, the connection is to this
database.

108
00:05:39.720 --> 00:05:41.050
And it'll run this MySQL command.

109
00:05:41.050 --> 00:05:45.030
So, this actually isn't an R command; it's
actually a MySQL

110
00:05:45.030 --> 00:05:49.970
command that we're sending to this
database through the dbGetQuery function.

111
00:05:49.970 --> 00:05:54.650
And so then the end after I run that
command, I'm going to use dbDisconnect.

112
00:05:54.650 --> 00:05:58.260
So, I'm going to disconnect from the MySQL
server.

113
00:05:58.260 --> 00:06:02.400
It's very important that whenever you're
done analyzing data or collecting

114
00:06:02.400 --> 00:06:05.760
data from a MySQL server that you
disconnect from that server.

115
00:06:05.760 --> 00:06:07.430
And you should get a true response.

116
00:06:07.430 --> 00:06:09.921
That true is coming from the dbDisconnect
because it's

117
00:06:09.921 --> 00:06:13.560
saying that we did, in fact, disconnect
from the server.

118
00:06:13.560 --> 00:06:17.390
Then, if I go and I look at result, what
result will show is a list of all the

119
00:06:17.390 --> 00:06:23.410
databases that are available for that all
the databases that are available

120
00:06:23.410 --> 00:06:29.330
within the MySQL server that is located at
this particular host address right here.

121
00:06:30.860 --> 00:06:35.430
So, we're going to actually focus on one
in particular,and that's hg19.

122
00:06:35.430 --> 00:06:38.340
Hg19 is a particular build of the human
genome.

123
00:06:38.340 --> 00:06:40.820
So, it's the 19th build of the human
genome.

124
00:06:40.820 --> 00:06:44.040
And so, what we can do now is just run
that dbConnect command again,

125
00:06:44.040 --> 00:06:47.990
but instead of just passing it the user,
we'll also pass it the database.

126
00:06:47.990 --> 00:06:49.080
We'll say, we're going to, we want to

127
00:06:49.080 --> 00:06:53.530
access this database within this MySQL
server, and

128
00:06:53.530 --> 00:06:56.940
then what we might want to do is see what
are the tables within that database.

129
00:06:56.940 --> 00:06:59.550
So remember, on a server, there might be
multiple

130
00:06:59.550 --> 00:07:02.640
databases and within the database, they'll
be multiple tables.

131
00:07:02.640 --> 00:07:05.951
Each table corresponding to what you might
think of as a data frame.

132
00:07:05.951 --> 00:07:09.966
So, what we can do is look at all the
tables that exist in the hg19

133
00:07:09.966 --> 00:07:15.220
database, and so if you look at the length
of that, in this case, it's very long.

134
00:07:15.220 --> 00:07:18.940
They're a ten, over 10,000 tables that are
in that single database.

135
00:07:18.940 --> 00:07:21.320
So, this is one nice thing about MySQL: it
can store

136
00:07:21.320 --> 00:07:24.840
a large amount of data that we can get
easy access to.

137
00:07:24.840 --> 00:07:29.090
So, if you look at the first, say, five
tables, you get these tables here.

138
00:07:29.090 --> 00:07:31.650
These are all different tables
corresponding to various

139
00:07:31.650 --> 00:07:35.430
different elements that describe
components of the human genome.

140
00:07:35.430 --> 00:07:39.660
Each table corresponds to a different kind
of data set.

141
00:07:39.660 --> 00:07:43.220
So, you can kind of think about it in the
same way that the tidy data principle is.

142
00:07:43.220 --> 00:07:47.440
You thought about each data set
corresponds to its own file.

143
00:07:47.440 --> 00:07:51.100
It's the same way here; you get a, each
different data type gets its own table.

144
00:07:52.300 --> 00:07:53.730
So, one thing that we can do is just

145
00:07:53.730 --> 00:07:56.140
suppose we know what table that we're
interested in.

146
00:07:56.140 --> 00:07:58.690
So, this is for a particular kind of micro
array, which

147
00:07:58.690 --> 00:08:01.980
is a measurement technology used to
measure something about the genome.

148
00:08:01.980 --> 00:08:05.390
So, you can actually say, okay, I want to
look at this database;

149
00:08:05.390 --> 00:08:10.130
this is the connection we made to the hg19
database within the MySQL server.

150
00:08:10.130 --> 00:08:14.770
And I want to know what are all the fields
in this particular table.

151
00:08:14.770 --> 00:08:18.090
So, remember a table corresponds to
something like a data frame.

152
00:08:18.090 --> 00:08:24.400
And the fields correspond to something
like the column names that data frame.

153
00:08:24.400 --> 00:08:26.050
And so, you can see if we look at the
fields

154
00:08:26.050 --> 00:08:30.850
here, there are things like bin, matches,
misMatches, and so forth.

155
00:08:30.850 --> 00:08:33.330
So, what we can do now is suppose we
want to find

156
00:08:33.330 --> 00:08:37.980
out, say, how many different rows there
are in this data set.

157
00:08:37.980 --> 00:08:40.950
So, we already know something about the
columns, right?

158
00:08:40.950 --> 00:08:43.820
Because this dbListFields told us all the
column names.

159
00:08:43.820 --> 00:08:50.100
And so, there's something like 22 columns
in this data set or in this table.

160
00:08:50.100 --> 00:08:52.450
Then, what we want to, might want to know
is how many rows it has.

161
00:08:52.450 --> 00:08:56.110
And so, what we're going to do is send
another query to the database.

162
00:08:56.110 --> 00:08:57.490
So, it's dbGetQuery again.

163
00:08:57.490 --> 00:09:01.180
So again, we're going to pass a, in quotes
a MySQL command.

164
00:09:02.230 --> 00:09:04.050
This is a very special MySQL command that

165
00:09:04.050 --> 00:09:08.320
says, select count star from this
particular table.

166
00:09:08.320 --> 00:09:09.820
So, what it's doing is it's basically
going to

167
00:09:09.820 --> 00:09:11.460
count all of the records in the table.

168
00:09:11.460 --> 00:09:13.670
And it's going to return the number of
records.

169
00:09:13.670 --> 00:09:14.830
So, if you wanted to look at the number

170
00:09:14.830 --> 00:09:16.650
of records in a different table, you would
just send

171
00:09:16.650 --> 00:09:20.240
this exact same command with the database
you are interested

172
00:09:20.240 --> 00:09:23.190
in here and the table you are interested
in here.

173
00:09:23.190 --> 00:09:26.990
And you would get the count of the number
of elements in that table.

174
00:09:29.110 --> 00:09:30.510
So then, the next thing that you can do
is,

175
00:09:30.510 --> 00:09:32.200
suppose you want to get one of the tables
out.

176
00:09:32.200 --> 00:09:34.670
You can basically get the data frame out
from the data set.

177
00:09:34.670 --> 00:09:38.000
And so, what you do is, you're using
dbReadTable.

178
00:09:38.000 --> 00:09:41.140
So, we pass a database that we're
interested in getting the table

179
00:09:41.140 --> 00:09:45.100
from and the table name that we're
interested in getting the data from.

180
00:09:45.100 --> 00:09:48.080
And so, what that'll return is then the
data frame itself.

181
00:09:48.080 --> 00:09:51.720
So, if you look at the top part of that
file, you can see this is the

182
00:09:51.720 --> 00:09:54.470
data that's actually been extracted now
from that MySQL

183
00:09:54.470 --> 00:09:57.650
server, from that particular database and
that particular table.

184
00:09:57.650 --> 00:09:59.930
So, you can extract the data one table at
a time.

185
00:10:01.230 --> 00:10:03.340
One important thing to keep in mind is
that often if

186
00:10:03.340 --> 00:10:06.250
I use MySQL databases, there'll be a huge
amount of data stored.

187
00:10:06.250 --> 00:10:08.640
And so, any particular table might be
gigantic

188
00:10:08.640 --> 00:10:11.030
and might be too big to read into R.

189
00:10:11.030 --> 00:10:14.420
So, one thing that you might want to do is
select only a subset of the data.

190
00:10:14.420 --> 00:10:18.230
So, you can do that with the dbSendQuery
command.

191
00:10:18.230 --> 00:10:23.199
So, what you do is you say dbSendQuery,
and you give it the database again.

192
00:10:23.199 --> 00:10:26.340
And then, we're going to send it a
different MySQL command.

193
00:10:26.340 --> 00:10:29.220
And so, the MySQL command here is select
star.

194
00:10:29.220 --> 00:10:30.760
So, it's going to select all the different

195
00:10:30.760 --> 00:10:37.340
observations from this table, the affy
U133plus2 table.

196
00:10:37.340 --> 00:10:40.590
Where the mismatches variable, so you
remember that's one of

197
00:10:40.590 --> 00:10:44.130
the columns in that data set, is between
one and three.

198
00:10:44.130 --> 00:10:47.610
So, what we do is we send this query to
the database.

199
00:10:48.780 --> 00:10:51.800
And so now, that's stored remotely at the
database, and then if we

200
00:10:51.800 --> 00:10:54.720
want to fetch the results of that, we use
the fetch command like this.

201
00:10:54.720 --> 00:11:01.620
And that'll return this affyMis, which
will give us some information about

202
00:11:01.620 --> 00:11:08.770
the, the, only the samples that we've
selected using this database query.

203
00:11:08.770 --> 00:11:11.350
So, if we look say at quantiles of
mismatches.

204
00:11:11.350 --> 00:11:13.480
So remember, we selected the mismatches
between one

205
00:11:13.480 --> 00:11:15.110
and three, and you can see that the

206
00:11:15.110 --> 00:11:17.730
quantiles reflect that, that we only had
data

207
00:11:17.730 --> 00:11:19.800
for which the mismatches are between one
and three.

208
00:11:21.460 --> 00:11:25.280
So, the other thing that you can do is you
can actually just fetch.

209
00:11:25.280 --> 00:11:29.520
So remember, when you used the SendQuery
command, it sent it to the database,

210
00:11:29.520 --> 00:11:33.240
but it didn't try to suck the data back to
your personal computer yet.

211
00:11:33.240 --> 00:11:35.645
If you only want to suck out a very small
amount of data so,

212
00:11:35.645 --> 00:11:39.070
so, suppose you just want to see a little
bit of the data and make

213
00:11:39.070 --> 00:11:42.760
sure that you don't accidentally suck down
a gigantic table, you can use the

214
00:11:42.760 --> 00:11:45.909
fetch command, and you can tell it only
bring back the top 10 records.

215
00:11:47.240 --> 00:11:50.020
And so, what you've got now is just a very
small

216
00:11:50.020 --> 00:11:54.550
data set that only contains the first 10
rows of that table.

217
00:11:54.550 --> 00:11:57.060
When you do that, you need to clear the
query.

218
00:11:57.060 --> 00:12:00.164
So, you remember you sent a query out to

219
00:12:00.164 --> 00:12:04.050
the MySQL server, and now, it's still
sitting out there.

220
00:12:04.050 --> 00:12:07.260
And you fetch the data back, but it didn't
stop

221
00:12:07.260 --> 00:12:10.250
that query from still being out there, at
the MySQL Server.

222
00:12:10.250 --> 00:12:14.950
So, you need to do dbClearResult to re
clear that query from the

223
00:12:14.950 --> 00:12:18.360
remote server, and it should return true
again because you've cleared that result.

224
00:12:18.360 --> 00:12:20.810
So, if you look at the small data set

225
00:12:20.810 --> 00:12:24.650
where we fetched only the top 10 rows or
observations,

226
00:12:24.650 --> 00:12:27.180
you can see that that produces a data
frame

227
00:12:27.180 --> 00:12:29.890
that actually has a dimension of 10 rows
as well.

228
00:12:29.890 --> 00:12:33.670
So, what we've done is select a very
specific subset.

229
00:12:33.670 --> 00:12:36.170
An important point here is that you can
basically send any

230
00:12:36.170 --> 00:12:39.660
MySQL query that you would like up here
within the quotes.

231
00:12:39.660 --> 00:12:41.820
So, it's a little bit beyond the scope of

232
00:12:41.820 --> 00:12:43.830
this class to teach you all of the
different queries.

233
00:12:43.830 --> 00:12:46.490
The most important ones are the queries
that

234
00:12:46.490 --> 00:12:48.130
I've shown you about selecting, the sort
of

235
00:12:48.130 --> 00:12:51.710
the total count and selecting all of the

236
00:12:51.710 --> 00:12:55.430
observations that are subject to some
particular conditions.

237
00:12:55.430 --> 00:12:57.490
But if you go to the MySQL documentation,
you can

238
00:12:57.490 --> 00:13:00.320
actually come up with a query that will
allow you to

239
00:13:00.320 --> 00:13:03.230
very flexibly select almost any sort of
subset of rows or

240
00:13:03.230 --> 00:13:07.570
columns from a data set that you're
actually interested in selecting.

241
00:13:07.570 --> 00:13:08.900
Remember to close the connection.

242
00:13:08.900 --> 00:13:10.210
So, this is one of the most common

243
00:13:10.210 --> 00:13:13.550
mistakes when using accessing a database
from R,

244
00:13:13.550 --> 00:13:18.840
is that you open a connection; you select
some data out; you go happily on your way.

245
00:13:18.840 --> 00:13:20.260
You should try to close the connection as

246
00:13:20.260 --> 00:13:22.610
soon as you don't need the connection
anymore.

247
00:13:22.610 --> 00:13:26.710
So, immediately after extracting out the
data that you're interested in, you

248
00:13:26.710 --> 00:13:29.380
should close the connection and move on
with the rest of your script.

249
00:13:30.940 --> 00:13:33.160
The RMySQL vignette is very good.

250
00:13:33.160 --> 00:13:36.470
It gives you access to a bunch of other
MySQL commands

251
00:13:36.470 --> 00:13:40.350
that might be useful for selecting data
for your particular examples.

252
00:13:40.350 --> 00:13:43.930
There's also this very nice collection of

253
00:13:43.930 --> 00:13:46.100
MySQL commands here, very nicely organized
that

254
00:13:46.100 --> 00:13:48.870
will give you a lot more information if
you want to be able to use them.

255
00:13:50.400 --> 00:13:51.860
One thing to keep in mind is that I

256
00:13:51.860 --> 00:13:54.920
have shown an example here about public
spacing MySQL server.

257
00:13:54.920 --> 00:13:57.910
And so, you, what I've done primarily for

258
00:13:57.910 --> 00:14:00.790
this analysis is select data from that
server.

259
00:14:00.790 --> 00:14:05.750
Please, please do not acces that server to
delete, add or join things.

260
00:14:05.750 --> 00:14:07.880
In other words, don't push anything back
into the server,

261
00:14:07.880 --> 00:14:10.260
only sub things or select things out of
the server.

262
00:14:10.260 --> 00:14:12.870
So, you should only be using the select
command.

263
00:14:12.870 --> 00:14:16.540
Another important component is that we
again, are a large class.

264
00:14:16.540 --> 00:14:18.130
So, if you all hit that server at the

265
00:14:18.130 --> 00:14:21.110
same time, it will likely cause problems
for them.

266
00:14:21.110 --> 00:14:25.040
It's much better to practice on your own
local version of MySQL.

267
00:14:25.040 --> 00:14:27.270
In careful, in general, you need to be a
little bit careful with

268
00:14:27.270 --> 00:14:31.360
MySQL commands because you can delete data
that other people are working on.

269
00:14:31.360 --> 00:14:35.160
So, a nice blog summarizing some other
commands that are used with MySQL and

270
00:14:35.160 --> 00:14:37.540
R is right here, and so if you want to
take a look and

271
00:14:37.540 --> 00:14:41.150
learn a lot more, there's a ton more that
can be learned there, and

272
00:14:41.150 --> 00:14:44.160
R and MySQL play very nicely together if
you want to get data out.