WEBVTT

1
00:00:00.310 --> 00:00:03.916
This next lecture is about reading
local what are called flat files.

2
00:00:03.916 --> 00:00:07.543
Prime examples are text files,
hyper delimited text files,

3
00:00:07.543 --> 00:00:09.991
comma delimited text files and so forth.

4
00:00:09.991 --> 00:00:14.598
If you've actually already taken the R
programming class, you may be able to skip

5
00:00:14.598 --> 00:00:18.363
this lecture, because you've
already seen how to load it into R.

6
00:00:18.363 --> 00:00:21.389
So again, we're gonna go back to
the Baltimore fixed camera data.

7
00:00:21.389 --> 00:00:24.295
And so,
I'm again going to download the data.

8
00:00:24.295 --> 00:00:26.469
I'm gonna check to see if
the data directory exists.

9
00:00:26.469 --> 00:00:28.574
And if it doesn't, I'm gonna create it,

10
00:00:28.574 --> 00:00:31.507
then I'm going to download
the data with download.file.

11
00:00:31.507 --> 00:00:34.129
So now the data has been
downloaded from the website and

12
00:00:34.129 --> 00:00:37.501
is actually sitting on my computer,
it's local data to my computer.

13
00:00:37.501 --> 00:00:41.306
So the first thing you might
wanna use to load the data is

14
00:00:41.306 --> 00:00:43.962
with the read.table() function.

15
00:00:43.962 --> 00:00:47.619
And so read.table() is the most common
function, because it's the most robust.

16
00:00:47.619 --> 00:00:52.231
It allows you the most
flexibility in some ways in R.

17
00:00:52.231 --> 00:00:56.360
It does require a few more parameters
than you would pass to some of

18
00:00:56.360 --> 00:00:59.605
the other functions and
it can be a little bit slow.

19
00:00:59.605 --> 00:01:03.861
So there's actually faster ways if you
need to scan through files to find

20
00:01:03.861 --> 00:01:07.164
specific elements and
we might talk about those later.

21
00:01:07.164 --> 00:01:10.699
It reads the data into RAM, so
it reads the data into memory.

22
00:01:10.699 --> 00:01:12.291
And so if you have a really,

23
00:01:12.291 --> 00:01:16.387
really big data setting caused
problems unless you read it in chunks.

24
00:01:16.387 --> 00:01:20.898
Read.tables() is also probably not
the best way to read large datasets in

25
00:01:20.898 --> 00:01:21.893
general into R.

26
00:01:21.893 --> 00:01:25.309
So the important parameters here
are what file you wanna read,

27
00:01:25.309 --> 00:01:26.668
weather is has a header?

28
00:01:26.668 --> 00:01:30.404
What's the separation between elements,
weather it has row names and

29
00:01:30.404 --> 00:01:32.093
how many rows do you wanna read?

30
00:01:32.093 --> 00:01:38.919
The related functions read.csv and
read.csv2 will also be briefly discussed.

31
00:01:38.919 --> 00:01:40.727
So if we wanna read the cameraData,

32
00:01:40.727 --> 00:01:44.000
we could try just sending it to
read.table() just like this.

33
00:01:44.000 --> 00:01:48.609
We say, cameraData is gonna be
the variable we're going to assign and

34
00:01:48.609 --> 00:01:54.401
we're gonna use the read.table command and
we're gonna read the file cameras.csv.

35
00:01:54.401 --> 00:01:57.104
So the problem that you'll get
back immediately is an error.

36
00:01:57.104 --> 00:01:59.879
It says,
line 1 did not have 13 elements and

37
00:01:59.879 --> 00:02:04.092
the reason why is because there's
commas separating cameras.csv.

38
00:02:04.092 --> 00:02:08.399
But the default for read.table() is
to look for a tab delimited file.

39
00:02:08.399 --> 00:02:11.540
So if you actually try to
look at this variable,

40
00:02:11.540 --> 00:02:16.262
cameraData, it doesn't exist,
because R wasn't able to read it in.

41
00:02:16.262 --> 00:02:22.155
So what we can do instead is read.table()
with setting the sep command.

42
00:02:22.155 --> 00:02:25.486
So this is the separation,
we're gonna set it equal to quotes comma.

43
00:02:25.486 --> 00:02:27.871
And so what that does is it says,
look through the file and

44
00:02:27.871 --> 00:02:31.008
assume that all the different values
will be separated by balance.

45
00:02:31.008 --> 00:02:33.677
We're also gonna tell it header = TRUE,

46
00:02:33.677 --> 00:02:38.652
because the variable names are included
at the top of each column in the file.

47
00:02:38.652 --> 00:02:42.324
So if we do that and assign
the results to cameraData variable and

48
00:02:42.324 --> 00:02:46.412
then use the head command, this will
look at a top few rows of that file.

49
00:02:46.412 --> 00:02:53.138
And so for example, on the first row,
now we see that data on the first Camera.

50
00:02:53.138 --> 00:02:58.219
It wraps around, because of the way
that the slide looks here, but

51
00:02:58.219 --> 00:03:03.316
each row has now been read into one
row of the cameraData variable.

52
00:03:03.316 --> 00:03:08.630
You can also use read.csv in the case that
you have a csv file, it automatically

53
00:03:08.630 --> 00:03:14.140
sets sep equal to the quote comma and
it automatically sets header = TRUE.

54
00:03:14.140 --> 00:03:18.620
And so, if you have a CSV file, which
is one of the most common flat formats

55
00:03:18.620 --> 00:03:22.473
that you'll see for data,
you can use the read.csv command.

56
00:03:22.473 --> 00:03:26.175
Some more important parameters
that you can pass, for

57
00:03:26.175 --> 00:03:29.725
example, to read.table is
you can tell it quotes.

58
00:03:29.725 --> 00:03:33.343
So for example, you can say,
whether there are quoted values.

59
00:03:33.343 --> 00:03:37.264
If you say, quote = " ", like that.

60
00:03:37.264 --> 00:03:39.406
You get no quotes in the file,

61
00:03:39.406 --> 00:03:44.823
na.strings tell r what the character
is that represents a missing value.

62
00:03:44.823 --> 00:03:49.902
So the most typical character that
you'll see in our datasets in na, but

63
00:03:49.902 --> 00:03:55.082
that character might also be minus 1 or
999, 99 or something else.

64
00:03:55.082 --> 00:04:00.588
Nrows tells you how many
rows in the file to read.

65
00:04:00.588 --> 00:04:04.719
So for example, if you only wanna
read the first ten lines of the file,

66
00:04:04.719 --> 00:04:09.568
you can use nrows = 10 as one of the
arguments to the read.table() function.

67
00:04:09.568 --> 00:04:12.433
Skip will also tell you how many
lines to skip before you read.

68
00:04:12.433 --> 00:04:17.809
So for example, suppose you wanna
read the 3rd through the 13th line,

69
00:04:17.809 --> 00:04:21.291
you would set skip equal to 2 and
nrows = 10.

70
00:04:21.291 --> 00:04:25.954
So my experience suggest that
the biggest common problem

71
00:04:25.954 --> 00:04:29.643
that I see in a lot of files
is that you see one of

72
00:04:29.643 --> 00:04:34.517
these quotation marks placed
in the data value somewhere.

73
00:04:34.517 --> 00:04:38.582
So when that happens, R gets confused,
because it's not looking for those quotes.

74
00:04:38.582 --> 00:04:42.151
And so if you set quote=" ",
this often resolves those issues and

75
00:04:42.151 --> 00:04:44.229
then you won't have to deal with them.

76
00:04:44.229 --> 00:04:48.530
So it's just a helpful tip, whenever you
see sort of data sets that aren't getting

77
00:04:48.530 --> 00:04:50.989
read in or
getting read in as very long vectors,

78
00:04:50.989 --> 00:04:54.500
setting this quote variable in that
way can be one way to address it.